(function(window, undefined) {
  var hm = window.hm = window.hm || {};
  hm.dict = hm.dict || {};
  hm.core = hm.core || {};
  hm.compilationInfo = {"time":1425983405E3, "projectCode":"rgsu"};
  (function() {
    var NFE = hm.NFE = {}, isStrictMode = false, expr = /\/\*\s*NFE_FIX\s*\*\/\s+function\s+([\w\d]+)\s*\(([^\)]*)\)\s\{/g, replace = "function($2) { var $1 = arguments.callee;\n";
    try {
      var test = arguments.callee;
    } catch (e) {
      isStrictMode = true;
    }
    if (isStrictMode) {
      NFE.fix = function(code) {
        return'"use strict";\n' + code;
      };
    } else {
      NFE.fix = function(code) {
        return code.replace(expr, replace);
      };
    }
  })();
  var Handlebars = function() {
    var __module3__ = function() {
      var __exports__;
      function SafeString(string) {
        this.string = string;
      }
      SafeString.prototype.toString = function() {
        return "" + this.string;
      };
      __exports__ = SafeString;
      return __exports__;
    }();
    var __module2__ = function(__dependency1__) {
      var __exports__ = {};
      var SafeString = __dependency1__;
      var escape = {"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "`":"&#x60;"};
      var badChars = /[&<>"'`]/g;
      var possible = /[&<>"'`]/;
      function escapeChar(chr) {
        return escape[chr] || "&amp;";
      }
      function extend(obj, value) {
        for (var key in value) {
          if (Object.prototype.hasOwnProperty.call(value, key)) {
            obj[key] = value[key];
          }
        }
      }
      __exports__.extend = extend;
      var toString = Object.prototype.toString;
      __exports__.toString = toString;
      var isFunction = function(value) {
        return typeof value === "function";
      };
      if (isFunction(/x/)) {
        isFunction = function(value) {
          return typeof value === "function" && toString.call(value) === "[object Function]";
        };
      }
      var isFunction;
      __exports__.isFunction = isFunction;
      var isArray = Array.isArray || function(value) {
        return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false;
      };
      __exports__.isArray = isArray;
      function escapeExpression(string) {
        if (string instanceof SafeString) {
          return string.toString();
        } else {
          if (!string && string !== 0) {
            return "";
          }
        }
        string = "" + string;
        if (!possible.test(string)) {
          return string;
        }
        return string.replace(badChars, escapeChar);
      }
      __exports__.escapeExpression = escapeExpression;
      function isEmpty(value) {
        if (!value && value !== 0) {
          return true;
        } else {
          if (isArray(value) && value.length === 0) {
            return true;
          } else {
            return false;
          }
        }
      }
      __exports__.isEmpty = isEmpty;
      return __exports__;
    }(__module3__);
    var __module4__ = function() {
      var __exports__;
      var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];
      function Exception(message, node) {
        var line;
        if (node && node.firstLine) {
          line = node.firstLine;
          message += " - " + line + ":" + node.firstColumn;
        }
        var tmp = Error.prototype.constructor.call(this, message);
        for (var idx = 0;idx < errorProps.length;idx++) {
          this[errorProps[idx]] = tmp[errorProps[idx]];
        }
        if (line) {
          this.lineNumber = line;
          this.column = node.firstColumn;
        }
      }
      Exception.prototype = new Error;
      __exports__ = Exception;
      return __exports__;
    }();
    var __module1__ = function(__dependency1__, __dependency2__) {
      var __exports__ = {};
      var Utils = __dependency1__;
      var Exception = __dependency2__;
      var VERSION = "1.3.0";
      __exports__.VERSION = VERSION;
      var COMPILER_REVISION = 4;
      __exports__.COMPILER_REVISION = COMPILER_REVISION;
      var REVISION_CHANGES = {1:"<= 1.0.rc.2", 2:"== 1.0.0-rc.3", 3:"== 1.0.0-rc.4", 4:">= 1.0.0"};
      __exports__.REVISION_CHANGES = REVISION_CHANGES;
      var isArray = Utils.isArray, isFunction = Utils.isFunction, toString = Utils.toString, objectType = "[object Object]";
      function HandlebarsEnvironment(helpers, partials) {
        this.helpers = helpers || {};
        this.partials = partials || {};
        registerDefaultHelpers(this);
      }
      __exports__.HandlebarsEnvironment = HandlebarsEnvironment;
      HandlebarsEnvironment.prototype = {constructor:HandlebarsEnvironment, logger:logger, log:log, registerHelper:function(name, fn, inverse) {
        if (toString.call(name) === objectType) {
          if (inverse || fn) {
            throw new Exception("Arg not supported with multiple helpers");
          }
          Utils.extend(this.helpers, name);
        } else {
          if (inverse) {
            fn.not = inverse;
          }
          this.helpers[name] = fn;
        }
      }, registerPartial:function(name, str) {
        if (toString.call(name) === objectType) {
          Utils.extend(this.partials, name);
        } else {
          this.partials[name] = str;
        }
      }};
      function registerDefaultHelpers(instance) {
        instance.registerHelper("helperMissing", function(arg) {
          if (arguments.length === 2) {
            return undefined;
          } else {
            throw new Exception("Missing helper: '" + arg + "'");
          }
        });
        instance.registerHelper("blockHelperMissing", function(context, options) {
          var inverse = options.inverse || function() {
          }, fn = options.fn;
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (context === true) {
            return fn(this);
          } else {
            if (context === false || context == null) {
              return inverse(this);
            } else {
              if (isArray(context)) {
                if (context.length > 0) {
                  return instance.helpers.each(context, options);
                } else {
                  return inverse(this);
                }
              } else {
                return fn(context);
              }
            }
          }
        });
        instance.registerHelper("each", function(context, options) {
          var fn = options.fn, inverse = options.inverse;
          var i = 0, ret = "", data;
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (options.data) {
            data = createFrame(options.data);
          }
          if (context && typeof context === "object") {
            if (isArray(context)) {
              for (var j = context.length;i < j;i++) {
                if (data) {
                  data.index = i;
                  data.first = i === 0;
                  data.last = i === context.length - 1;
                }
                ret = ret + fn(context[i], {data:data});
              }
            } else {
              for (var key in context) {
                if (context.hasOwnProperty(key)) {
                  if (data) {
                    data.key = key;
                    data.index = i;
                    data.first = i === 0;
                  }
                  ret = ret + fn(context[key], {data:data});
                  i++;
                }
              }
            }
          }
          if (i === 0) {
            ret = inverse(this);
          }
          return ret;
        });
        instance.registerHelper("if", function(conditional, options) {
          if (isFunction(conditional)) {
            conditional = conditional.call(this);
          }
          if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
            return options.inverse(this);
          } else {
            return options.fn(this);
          }
        });
        instance.registerHelper("unless", function(conditional, options) {
          return instance.helpers["if"].call(this, conditional, {fn:options.inverse, inverse:options.fn, hash:options.hash});
        });
        instance.registerHelper("with", function(context, options) {
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (!Utils.isEmpty(context)) {
            return options.fn(context);
          }
        });
        instance.registerHelper("log", function(context, options) {
          var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
          instance.log(level, context);
        });
      }
      var logger = {methodMap:{0:"debug", 1:"info", 2:"warn", 3:"error"}, DEBUG:0, INFO:1, WARN:2, ERROR:3, level:3, log:function(level, obj) {
        if (logger.level <= level) {
          var method = logger.methodMap[level];
          if (typeof console !== "undefined" && console[method]) {
            console[method].call(console, obj);
          }
        }
      }};
      __exports__.logger = logger;
      function log(level, obj) {
        logger.log(level, obj);
      }
      __exports__.log = log;
      var createFrame = function(object) {
        var obj = {};
        Utils.extend(obj, object);
        return obj;
      };
      __exports__.createFrame = createFrame;
      return __exports__;
    }(__module2__, __module4__);
    var __module5__ = function(__dependency1__, __dependency2__, __dependency3__) {
      var __exports__ = {};
      var Utils = __dependency1__;
      var Exception = __dependency2__;
      var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
      var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
      function checkRevision(compilerInfo) {
        var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = COMPILER_REVISION;
        if (compilerRevision !== currentRevision) {
          if (compilerRevision < currentRevision) {
            var runtimeVersions = REVISION_CHANGES[currentRevision], compilerVersions = REVISION_CHANGES[compilerRevision];
            throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
          } else {
            throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").");
          }
        }
      }
      __exports__.checkRevision = checkRevision;
      function template(templateSpec, env) {
        if (!env) {
          throw new Exception("No environment passed to template");
        }
        var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {
          var result = env.VM.invokePartial.apply(this, arguments);
          if (result != null) {
            return result;
          }
          if (env.compile) {
            var options = {helpers:helpers, partials:partials, data:data};
            partials[name] = env.compile(partial, {data:data !== undefined}, env);
            return partials[name](context, options);
          } else {
            throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
          }
        };
        var container = {escapeExpression:Utils.escapeExpression, invokePartial:invokePartialWrapper, programs:[], program:function(i, fn, data) {
          var programWrapper = this.programs[i];
          if (data) {
            programWrapper = program(i, fn, data);
          } else {
            if (!programWrapper) {
              programWrapper = this.programs[i] = program(i, fn);
            }
          }
          return programWrapper;
        }, merge:function(param, common) {
          var ret = param || common;
          if (param && (common && param !== common)) {
            ret = {};
            Utils.extend(ret, common);
            Utils.extend(ret, param);
          }
          return ret;
        }, programWithDepth:env.VM.programWithDepth, noop:env.VM.noop, compilerInfo:null};
        return function(context, options) {
          options = options || {};
          var namespace = options.partial ? options : env, helpers, partials;
          if (!options.partial) {
            helpers = options.helpers;
            partials = options.partials;
          }
          var result = templateSpec.call(container, namespace, context, helpers, partials, options.data);
          if (!options.partial) {
            env.VM.checkRevision(container.compilerInfo);
          }
          return result;
        };
      }
      __exports__.template = template;
      function programWithDepth(i, fn, data) {
        var args = Array.prototype.slice.call(arguments, 3);
        var prog = function(context, options) {
          options = options || {};
          return fn.apply(this, [context, options.data || data].concat(args));
        };
        prog.program = i;
        prog.depth = args.length;
        return prog;
      }
      __exports__.programWithDepth = programWithDepth;
      function program(i, fn, data) {
        var prog = function(context, options) {
          options = options || {};
          return fn(context, options.data || data);
        };
        prog.program = i;
        prog.depth = 0;
        return prog;
      }
      __exports__.program = program;
      function invokePartial(partial, name, context, helpers, partials, data) {
        var options = {partial:true, helpers:helpers, partials:partials, data:data};
        if (partial === undefined) {
          throw new Exception("The partial " + name + " could not be found");
        } else {
          if (partial instanceof Function) {
            return partial(context, options);
          }
        }
      }
      __exports__.invokePartial = invokePartial;
      function noop() {
        return "";
      }
      __exports__.noop = noop;
      return __exports__;
    }(__module2__, __module4__, __module1__);
    var __module0__ = function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
      var __exports__;
      var base = __dependency1__;
      var SafeString = __dependency2__;
      var Exception = __dependency3__;
      var Utils = __dependency4__;
      var runtime = __dependency5__;
      var create = function() {
        var hb = new base.HandlebarsEnvironment;
        Utils.extend(hb, base);
        hb.SafeString = SafeString;
        hb.Exception = Exception;
        hb.Utils = Utils;
        hb.VM = runtime;
        hb.template = function(spec) {
          return runtime.template(spec, hb);
        };
        return hb;
      };
      var Handlebars = create();
      Handlebars.create = create;
      __exports__ = Handlebars;
      return __exports__;
    }(__module1__, __module3__, __module4__, __module2__, __module5__);
    return __module0__;
  }();
  window.Handlebars = Handlebars;
  (function() {
    (function(window) {
      var console = window.console || {}, emptyFn = function() {
      }, functionNames = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","), ln = functionNames.length, functionName;
      for (var i = 0;i < ln;i++) {
        functionName = functionNames[i];
        console[functionName] = console[functionName] || emptyFn;
      }
    })(window);
  })();
  var HM = window.HM = {build:hm.build, serverInitTime:hm.serverInitTime || Date.now(), clientInitTime:hm.clientInitTime || Date.now(), global:window, isDebug:hm.isDebug, hmRoot:hm.basePath, theme:"default", emptyFn:function() {
  }, jQuery:jQuery, $document:function() {
    return hm.core.DOM.$document();
  }, $window:function() {
    return hm.core.DOM.$window();
  }, $body:function() {
    return hm.core.DOM.$body();
  }, define:function(className, prototype) {
    hm.core.ClassManager.define(className, prototype);
  }, override:function(className, prototype) {
    hm.core.ClassManager.override(className, prototype);
  }, create:function(className, cfg) {
    return hm.core.ClassManager.create(className, cfg);
  }, require:function(className) {
    return hm.core.ClassManager.require(className);
  }, getService:function(serviceName) {
    return hm.core.BaseService.get(serviceName);
  }, _modulesState:{hm:{js:true, css:false}}, moduleLoaded:function(moduleCode) {
    var state = this._modulesState[moduleCode];
    if (state && (state.js && state.css)) {
      return true;
    }
    return false;
  }, requireModule:function(moduleCode, callBack) {
    var linkId = "hm-module-link-" + Date.now();
    function afterLoadCallBack() {
      setTimeout(callBack, 0);
    }
    if (this.moduleLoaded(moduleCode)) {
      afterLoadCallBack();
      return;
    }
    if (!this._modulesState.hasOwnProperty(moduleCode)) {
      this._modulesState[moduleCode] = {js:this.isDebug ? true : false, css:false};
    }
    var me = this, state = this._modulesState[moduleCode];
    function checkState() {
      if (me.moduleLoaded(moduleCode)) {
        afterLoadCallBack();
      }
    }
    function needLoadJs() {
      return state.js === false;
    }
    function needLoadCss() {
      return state.css === false;
    }
    function jsLoaded() {
      state.js = true;
      checkState();
    }
    function cssLoaded() {
      state.css = true;
      checkState();
    }
    if (needLoadJs()) {
      var scriptUrl = this.hmRoot + "/data/js/" + moduleCode + ".min.js?v=" + this.build;
      yepnope.injectJs(scriptUrl, jsLoaded);
    } else {
      jsLoaded();
    }
    if (needLoadCss()) {
      var styleUrl, $link = $(document.createElement("link"));
      $link.prop("id", linkId);
      if (this.isDebug) {
        styleUrl = "/unmanaged/dev_tools.php?tool=sass&runtime=1&module=" + moduleCode + "&v=" + this.build;
      } else {
        styleUrl = this.hmRoot + "/data/css/" + moduleCode + "/" + this.theme + "/screen.css?v=" + this.build;
      }
      $link.prop("type", "text/css").prop("href", styleUrl).prop("rel", "stylesheet");
      $link.on("load", cssLoaded);
      $link.insertBefore("#theme-css-file");
    } else {
      cssLoaded();
    }
  }, _:function(name) {  // console.log("Try to translate: " + name);
    if (!hm.dict.translate) { console.log("Cant translate " + name);
      return name;
    }
    var result = hm.dict.translate[name]; 
    return typeof result === "string" ? result : name;
  }, init:function() {
    //console.info("============= \u0424\u0440\u043e\u043d\u0442\u044d\u043d\u0434 ============\n" + "    \u041f\u0440\u043e\u0435\u043a\u0442: " + hm.compilationInfo.projectCode + "\n" + "    \u0412\u0435\u0440\u0441\u0438\u044f: " + this.build + "\n" + "    \u0414\u0430\u0442\u0430:   " + hm.core.Date.format(hm.compilationInfo.time, "yyyy-mm-dd HH:MM:ss") + "\n" + "===================================");
    if (!hm.appClass) {
      return;
    }
    this.app = HM.create(hm.appClass);
  }, isObject:function() {
    return hm.core.Object.apply(hm.core.Object, arguments);
  }, namespace:function(namespace) {
    var ns = namespace.split("."), child = this.global;
    for (var j = 0, ln = ns.length;j < ln;j++) {
      var nsPart = ns[j];
      child = child[nsPart] = child[nsPart] || {};
    }
  }, singleton:function(Constructor) {
    var instance = null;
    Constructor.getInstance = function() {
      if (instance === null) {
        instance = new Constructor;
      }
      return instance;
    };
  }, each:function() {
    return hm.core.Object.each.apply(hm.core.Object, arguments);
  }};
  (function() {
    hm.core.Object = {isObject:function(obj) {
      return typeof obj === "object" && obj !== null;
    }, getProperty:function(name, obj, delimeter) {
      if (name === "") {
        return obj;
      }
      var nameParts = name.split(delimeter || ".");
      for (var i = 0;i < nameParts.length;i++) {
        var namePart = nameParts[i];
        if (!obj.hasOwnProperty(namePart)) {
          return null;
        }
        obj = obj[namePart];
      }
      return obj;
    }, clone:function(obj) {
      var result = null;
      if (obj instanceof Array) {
        result = [];
      } else {
        result = {};
      }
      for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {
          continue;
        }
        var value = obj[i];
        if (value instanceof Array || this.isObject(value)) {
          result[i] = this.clone(value);
        } else {
          result[i] = value;
        }
      }
      return result;
    }, _extend:function(target, source) {
      for (var i in source) {
        if (!source.hasOwnProperty(i)) {
          continue;
        }
        target[i] = source[i];
      }
    }, extend:function(target) {
      for (var i = 1, ln = arguments.length;i < ln;i++) {
        this._extend(target, arguments[i]);
      }
      return target;
    }, each:function(obj, callBack, scope) {
      var i, ln, key;
      if (hm.core.Array.isArrayLikely(obj)) {
        return hm.core.Array.forEach(obj, callBack, scope);
      }
      if (Object.getOwnPropertyNames) {
        var keys = Object.getOwnPropertyNames(obj);
        for (i = 0, ln = keys.length;i < ln;i++) {
          key = keys[i];
          callBack.call(scope, obj[key], key, obj);
        }
        return;
      }
      for (key in obj) {
        if (!obj.hasOwnProperty(i)) {
          continue;
        }
        callBack.call(scope, obj[key], key, obj);
      }
    }};
  })();
  (function() {
    hm.core.Array = {isArrayLikely:function(obj) {
      return obj.length !== undefined;
    }};
    var forEachFn = Array.prototype.forEach;
    if (!forEachFn) {
      forEachFn = function forEach(callback, thisArg) {
        var T, k, hasOwnProp = Object.prototype.hasOwnProperty;
        if (this == null) {
          throw new TypeError("this is null or not defined");
        }
        var O = Object(this);
        var len = O.length >>> 0;
        if ({}.toString.call(callback) !== "[object Function]") {
          throw new TypeError(callback + " is not a function");
        }
        if (thisArg) {
          T = thisArg;
        }
        k = 0;
        while (k < len) {
          var kValue;
          if (hasOwnProp.call(O, k)) {
            kValue = O[k];
            callback.call(T, kValue, k, O);
          }
          k++;
        }
      };
    }
    hm.core.Array.forEach = function(obj, callBack, scope) {
      return forEachFn.call(obj, callBack, scope);
    };
  })();
  (function() {
    ({_classXtypes:{}, _classDefined:{}, loadCachedFile:function(fileName) {
      var result = $.ajax({async:false, url:fileName + (fileName.indexOf("?") === -1 ? "?" : "&") + "v=" + HM.build, global:false});
      return result.responseText;
    }, injectScript:function(fileName) {
      var classTxt = this.loadCachedFile(fileName);
      if (classTxt) {
        classTxt = hm.NFE.fix(classTxt);
        (new Function('"use strict";\n' + classTxt + "\n// //@ sourceURL=" + fileName))();
      }
    }, injectScripts:function() {
      for (var i = 0, ln = arguments.length;i < ln;i++) {
        this.injectScript(arguments[i]);
      }
    }, extendedFrom:function(cls) {
      if (this === cls) {
        return true;
      }
      if (!this.hasOwnProperty("$parent\u0421lass")) {
        return false;
      }
      if (this.$parent\u0421lass === cls) {
        return true;
      }
      if (this.$parent\u0421lass.hasOwnProperty("extendedFrom")) {
        return this.$parent\u0421lass.extendedFrom(cls);
      }
      return false;
    }, define:function(className, classConfig) {
      if (!classConfig) {
        classConfig = {};
      }
      var simpleClsName = className.replace(/\./g, "_"), HmObject = hm.core.Object, NewClass, ParentClass;
      if (classConfig.hasOwnProperty("constructor")) {
        NewClass = classConfig.constructor;
        delete classConfig.constructor;
      } else {
        NewClass = function() {
          var constructor = arguments.callee;
          return this.callParent(constructor, arguments);
        };
      }
      ParentClass = this.require(classConfig.extend || "hm.core.Class");
      delete classConfig.extend;
      var NewClassPrototypeConstructor = function() {
      }, parentPrototype = ParentClass.prototype, newPrototype;
      NewClassPrototypeConstructor.prototype = parentPrototype;
      NewClass.prototype = newPrototype = new NewClassPrototypeConstructor;
      newPrototype.constructor = NewClass;
      newPrototype.self = NewClass;
      newPrototype.$className = className;
      NewClass.$parent\u0421lass = ParentClass;
      NewClass.extendedFrom = this.extendedFrom;
      if (classConfig.hasOwnProperty("statics")) {
        HmObject.extend(NewClass, classConfig.statics);
        delete classConfig.statics;
      }
      if (parentPrototype.hasOwnProperty("config")) {
        newPrototype.config = HmObject.extend({}, parentPrototype.config);
      } else {
        newPrototype.config = {};
      }
      if (classConfig.hasOwnProperty("config")) {
        HmObject.extend(newPrototype.config, classConfig.config);
        delete classConfig.config;
      }
      var classAlias = classConfig.alias;
      delete classConfig.alias;
      var classRequires = classConfig.requires;
      delete classConfig.requires;
      for (var i in classConfig) {
        if (!classConfig.hasOwnProperty(i)) {
          continue;
        }
        newPrototype[i] = classConfig[i];
        if (!(classConfig[i] instanceof Function)) {
          continue;
        }
        newPrototype[i].$owner = NewClass;
        newPrototype[i].$name = i;
        newPrototype[i].displayName = className + "." + i + "()";
      }
      NewClass.$owner = NewClass;
      NewClass.$name = "constructor";
      NewClass.displayName = className;
      if (classConfig.singleton) {
        NewClass = new NewClass;
      }
      this.classAlias(className, NewClass);
      if (classAlias) {
        this.classAlias(classAlias, NewClass);
      }
      if (!classRequires) {
        return;
      }
      var $requiredClasses = NewClass.$requiredClasses = [], classDefined = this._classDefined;
      for (var i = 0, ln = classRequires.length;i < ln;i++) {
        var requiredClass = classRequires[i];
        if (!classDefined[requiredClass]) {
          this.require(requiredClass);
        }
        $requiredClasses.push(classDefined[requiredClass]);
      }
    }, override:function(className, prototype) {
      var constructor = this.require(className), classPrototype = constructor.prototype;
      for (var i in prototype) {
        if (!prototype.hasOwnProperty(i)) {
          continue;
        }
        if (!classPrototype.hasOwnProperty(i)) {
          classPrototype[i] = prototype[i];
          if (!(prototype[i] instanceof Function)) {
            continue;
          }
          classPrototype[i].$owner = constructor;
          classPrototype[i].$name = i;
          classPrototype[i].displayName = className + "." + i + "()";
          continue;
        }
        if (!(prototype[i] instanceof Function)) {
          classPrototype[i] = prototype[i];
        } else {
          var overridedMethod = classPrototype[i];
          classPrototype[i] = prototype[i];
          classPrototype[i].$owner = constructor;
          classPrototype[i].$name = i;
          classPrototype[i].$overridedMethod = overridedMethod;
          classPrototype[i].displayName = className + "." + i + "()";
        }
      }
    }, classAlias:function(className, classFunction) {
      var ns = className.split("."), child = HM.global;
      for (var j = 0, ln = ns.length - 1;j < ln;j++) {
        var nsPart = ns[j];
        child[nsPart] = child[nsPart] || {};
        child = child[nsPart];
      }
      child[ns[j]] = classFunction;
      this._classDefined[className] = classFunction;
    }, create:function(className, cfg) {
      var cls;
      if (typeof className !== "function") {
        cls = this.require(className);
      } else {
        cls = className;
      }
      return new cls(cfg);
    }, requires:function() {
      for (var i in arguments) {
        if (!arguments.hasOwnProperty(i)) {
          continue;
        }
        this.require(arguments[i]);
      }
    }, require:function(className) {		
      if (!this._classDefined.hasOwnProperty(className)) {
        throw new Error(className + " \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d");
      }
      return this._classDefined[className];
    }, createFactory:function(cfgPropertyName, classMap) {
      return function(cfg) {
        if (typeof cfg === "string") {
          var type = cfg;
          cfg = {};
          cfg[cfgPropertyName] = type;
        }
        var classCode, className;
        if (!cfg.hasOwnProperty(cfgPropertyName)) {
          if (!classMap.hasOwnProperty("default")) {
            throw new Error("\u0414\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0438\u043f");
          }
          classCode = "default";
        } else {
          classCode = cfg[cfgPropertyName];
        }
        if (classMap.hasOwnProperty(classCode)) {
          className = classMap[classCode];
        } else {
          className = classCode;
        }
        return HM.create(className, cfg);
      };
    }, init:function() {
      this.classAlias("hm.core.ClassManager", this);
      delete this.init;
    }}).init();
  })();
  (function() {
    hm.core.ClassManager.classAlias("hm.core.Class", function(cfg) {
      this.__initConfig(cfg);
      return this.__construct();
    });
    hm.core.Class.prototype.callOverriden = function(method, args) {
      var overridenMethod = method.$overridedMethod;
      if (!overridenMethod) {
        throw new Error("\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434");
      }
      return overridenMethod.apply(this, args || []);
    };
    hm.core.Class.prototype.callParent = function(method, args) {
      if (typeof method !== "function") {
        args = method;
        method = args.callee;
        try {
          console.warn("\u0412\u044b\u0437\u043e\u0432 callParent \u0441 \u043e\u0434\u043d\u0438\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0443\u0441\u0442\u0430\u0440\u0435\u043b!", method.$owner.prototype.$className + "." + method.$name);
        } catch (e) {
        }
      }
      var parentMethod = method.$owner.$parent\u0421lass.prototype[method.$name];
      if (parentMethod && parentMethod instanceof Function) {
        return parentMethod.apply(this, args || []);
      }
    };
    hm.core.Class.prototype.__construct = function() {
    };
    hm.core.Class.prototype.__destruct = function() {
      if (this._needToDestroy) {
        var needToDestroy = this._needToDestroy;
        while (needToDestroy.length != 0) {
          if (needToDestroy[0].destroy) {
            needToDestroy[0].destroy();
          }
          needToDestroy.splice(0, 1);
        }
      }
      for (var i in this) {
        if (this.hasOwnProperty(i)) {
          delete this[i];
        }
      }
      this.destructed = true;
    };
    hm.core.Class.prototype.destroy = function() {
      this.__destruct();
    };
    hm.core.Class.prototype.needToDestroy = function(obj) {
      if (obj.destroy) {
        if (!this._needToDestroy) {
          this._needToDestroy = [];
        }
        this._needToDestroy.push(obj);
      } else {
        console.warn("\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043c\u0435\u0442\u043e\u0434 destroy.", obj);
      }
    };
    hm.core.Class.prototype.__initConfig = function(userCfg) {
      userCfg = userCfg || {};
      var config = this.config = $.extend({}, this.config);
      for (var i in userCfg) {
        if (!userCfg.hasOwnProperty(i)) {
          continue;
        }
        if (!config.hasOwnProperty(i)) {
          throw new Error("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 " + i + " \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 " + this.$className);
        }
        config[i] = userCfg[i];
      }
      for (var i in config) {
        if (!config.hasOwnProperty(i)) {
          continue;
        }
        if (HM.isDebug && Object.defineProperty) {
          (function(i, me, value) {
            try {
              Object.defineProperty(me, i, {get:function() {
                throw new Error("\u0412 \u043a\u043b\u0430\u0441\u0441\u0435 " + me.$className + " \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0435 \u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 " + i + ", \u044f\u0432\u043b\u044f\u044e\u0449\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u043c. . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 this.config." + 
                i + " \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430");
              }, set:function(newValue) {
                throw new Error("\u0412 \u043a\u043b\u0430\u0441\u0441\u0435 " + me.$className + " \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0443 " + i + ", \u044f\u0432\u043b\u044f\u044e\u0449\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u043c. . \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f" + 
                " \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430");
              }});
            } catch (e) {
            }
          })(i, this, config[i]);
        } else {
          this[i] = config[i];
        }
      }
    };
  })();
  (function() {
    var $document = null, $window = null, $body = null;
    var maxZIndex = 1E4, $cropTagsCont = $(document.createElement("div"));
    HM.define("hm.core.DOM", {statics:{$document:function() {
      if ($document === null) {
        $document = $(document);
      }
      return $document;
    }, $window:function() {
      if ($window === null) {
        $window = $(window);
      }
      return $window;
    }, $body:function() {
      if ($body === null) {
        if (!document.body) {
          return null;
        }
        $body = $(document.body);
      }
      return $body;
    }, cropTags:function(html) {
      return $cropTagsCont.html(html).text();
    }, getMaxZIndex:function() {
      return maxZIndex++;
    }, injectJs:function(url) {
      var $script = $(document.createElement("script"));
      $script.attr("src", url);
      $("head").append($script);
    }}});
  })();
  (function() {
    (function() {
      HM.define("hm.core.PopupManager", {});
      var popupElements = [], PopupManager = hm.core.PopupManager;
      PopupManager.show = function(el, callback, context, hideOtherIfExists) {
        if (hideOtherIfExists) {
          this.hideAll();
        }
        var $el = $(el);
        $el.on("click", this._onElClick);
        popupElements.push({$el:$el, el:el, fn:typeof callback === "function" ? callback : HM.emptyFn, context:context || el});
        HM.$body().append($el);
        $el.css({zIndex:hm.core.DOM.getMaxZIndex() + 1, position:"absolute", visibility:"visible"});
      };
      PopupManager.hide = function(el) {
        for (var len = popupElements.length, i = len - 1;i >= 0;i--) {
          var popupElement = popupElements[i];
          if (popupElement.el === el) {
            var $el = popupElement.$el;
            $el.off("click", this._onElClick);
            $el.detach();
            popupElements.splice(i, 1);
            popupElement.fn.call(popupElement.context);
            return;
          }
        }
        $(el).off("click", this._onElClick);
      };
      PopupManager.hideAll = function() {
        while (popupElements.length) {
          this.hide(popupElements[0].el);
        }
      };
      PopupManager._onElClick = function(e) {
        e.stopPropagation();
      };
      PopupManager._onBodyClick = function(e) {
        this.hideAll();
      };
      HM.$document().on("click", PopupManager._onBodyClick.bind(PopupManager));
    })();
  })();
  (function() {
    (function() {
      var Class = {create:function() {
        return function() {
          this.initialize.apply(this, arguments);
        };
      }};
      var version = Class.create();
      version.prototype = {initialize:function(versionArray) {
        this.major = versionArray[0] != null ? parseInt(versionArray[0], 10) : 0;
        this.minor = versionArray[1] != null ? parseInt(versionArray[1], 10) : 0;
        this.rev = versionArray[2] != null ? parseInt(versionArray[2], 10) : 0;
      }, compare:function(flashVersion) {
        if (this.major < flashVersion.major) {
          return-1;
        }
        if (this.major > flashVersion.major) {
          return 1;
        }
        if (this.minor < flashVersion.minor) {
          return-1;
        }
        if (this.minor > flashVersion.minor) {
          return 1;
        }
        if (this.rev < flashVersion.rev) {
          return-1;
        }
        if (this.rev > flashVersion.rev) {
          return 1;
        }
        return 0;
      }, major:-1, minor:-1, rev:-1, toString:function() {
        return[this.major, this.minor, this.rev].join(".");
      }};
      HM.define("hm.core.HardwareDetect", {__construct:function() {
        this._check();
        hm.core.HardwareDetect.pluginDetect.INIT();
      }, BrowserDetect:{detect:function() {
        var browser = this.searchString(this.dataBrowser) || "EU_UNKNOWN_BROWSER";
        var ver = new version([0, 0, 0]);
        ver = this.searchVersion(navigator.userAgent) || (this.searchVersion(navigator.appVersion) || "EU_UNKNOWN_VERSION");
        return{name:browser.toLowerCase(), appName:browser, version:ver};
      }, searchString:function(data) {
        for (var i = 0;i < data.length;i++) {
          var dataString = data[i].string;
          var dataProp = data[i].prop;
          this.versionSearchString = data[i].versionSearch || data[i].identity;
          if (dataString) {
            if (dataString.indexOf(data[i].subString) != -1) {
              return data[i].identity;
            }
          } else {
            if (dataProp) {
              return data[i].identity;
            }
          }
        }
      }, searchVersion:function(dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) {
          return new version([0, 0, 0]);
        }
        return new version(dataString.substring(index + this.versionSearchString.length + 1).split("."));
      }, dataBrowser:[{string:navigator.vendor, subString:"Apple", identity:"Safari"}, {string:navigator.userAgent, subString:"Chrome", identity:"Chrome"}, {prop:window.opera, identity:"Opera"}, {string:navigator.vendor, subString:"Konqueror", identity:"Konqueror"}, {string:navigator.userAgent, subString:"Firefox", identity:"Firefox"}, {string:navigator.userAgent, subString:"SeaMonkey", identity:"SeaMonkey"}, {string:navigator.vendor, subString:"Camino", identity:"Camino"}, {string:navigator.userAgent, 
      subString:"Netscape", identity:"Netscape"}, {string:navigator.userAgent, subString:"MSIE", identity:"Explorer", versionSearch:"MSIE"}, {string:navigator.userAgent, subString:"Trident", identity:"Explorer", versionSearch:"rv"}, {string:navigator.userAgent, subString:"Gecko", identity:"Mozilla", versionSearch:"rv"}]}, MSXMLVersion:function() {
        var MSXMLVersion = new version([0, 0, 0]);
        var progIDs = [{ID:"Msxml2.DOMDocument.6.0", version:[6, 0, 0]}, {ID:"Msxml2.DOMDocument.3.0", version:[3, 0, 0]}, {ID:"Msxml2.DOMDocument.4.0", version:[4, 0, 0]}, {ID:"Msxml2.DOMDocument.5.0", version:[5, 0, 0]}];
        var axo;
        for (var i = 0;i < progIDs.length;++i) {
          try {
            axo = new ActiveXObject(progIDs[i].ID);
            return new version(progIDs[i].version);
          } catch (e) {
          }
        }
        return MSXMLVersion;
      }, adobeFlashPlayerVersion:function() {
        var playerVersion = new version([0, 0, 0]);
        if (navigator.plugins && navigator.mimeTypes.length) {
          var x = navigator.plugins["Shockwave Flash"];
          if (x && x.description) {
            playerVersion = new version(x.description.replace(/([a-zA-Z]|\s)+/, "").replace(/(\s+r|\s+b[0-9]+)/, ".").split("."));
          }
        } else {
          if (navigator.userAgent && navigator.userAgent.indexOf("Windows CE") >= 0) {
            var axo = 1;
            var counter = 3;
            while (axo) {
              try {
                counter++;
                axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + counter);
                playerVersion = new deconcept.PlayerVersion([counter, 0, 0]);
              } catch (e) {
                axo = null;
              }
            }
          } else {
            try {
              var axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
            } catch (e) {
              try {
                var axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                playerVersion = new version([6, 0, 21]);
                axo.AllowScriptAccess = "always";
              } catch (e) {
                if (playerVersion.major == 6) {
                  return playerVersion;
                }
              }
              try {
                axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
              } catch (e) {
              }
            }
            if (axo != null) {
              playerVersion = new version(axo.GetVariable("$version").split(" ")[1].split(","));
            }
          }
        }
        return playerVersion;
      }, _cache:{}, _checkBrowser:function(name, version, msxmlVersion) {
        if (!this._cache.require.browser[name]) {
          return false;
        }
        if (name == "explorer") {
          return version.compare(this._cache.require.browser.explorer) >= 0 && msxmlVersion.compare(this._cache.require.msxml) >= 0;
        }
        return version.compare(this._cache.require.browser[name]) >= 0;
      }, _check:function() {
        if (!this._cache.require) {
          this._cache.require = {browser:{explorer:new version([7, 0]), opera:new version([9, 0, 0]), safari:new version([2, 0, 0]), firefox:new version([10, 0]), camino:new version([1, 0, 0]), seamonkey:new version([1, 0, 0]), mozilla:new version([10, 0]), chrome:new version([10, 0, 0])}, fp:new version([9, 0, 0]), msxml:new version([3, 0, 0])};
        }
        if (!this._cache.available) {
          var cObj = this;
          this._cache.available = {fp:cObj.adobeFlashPlayerVersion(), msxml:cObj.MSXMLVersion()};
          this._cache.available.browser = this.BrowserDetect.detect();
        }
        if (typeof this._cache.passed == "undefined") {
          this._cache.browserPassed = this._checkBrowser(this._cache.available.browser.name, this._cache.available.browser.version, this._cache.available.msxml);
          this._cache.passed = this._cache.browserPassed && this._cache.available.fp.compare(this._cache.require.fp) >= 0;
          this._cache.iePassed = this._cache.passed && this._cache.available.browser.name == "explorer";
        }
      }, ieFeedback:false, check:function() {
        this._check();
        this.ieFeedback = false;
        return this._cache.passed;
      }, courseCheck:function() {
        this._check();
        this.ieFeedback = true;
        return this._cache.iePassed;
      }, osPatterns:{"Windows 2000":/Windows NT 5\.0/, "Windows XP":/Windows NT 5\.1/, "Windows Server 2003":/Windows NT 5\.2/, "Windows Vista":/Windows NT 6\.0/, "Windows 7":/Windows NT 6\.1/, "Windows 8":/Windows NT 6\.2/, "Windows":/Windows/}, getOS:function() {
        var userAgent = navigator.userAgent;
        for (var osName in this.osPatterns) {
          if (!this.osPatterns.hasOwnProperty(osName)) {
            continue;
          }
          var pattern = this.osPatterns[osName];
          if (pattern.test(userAgent)) {
            return osName;
          }
        }
        return "Unknown";
      }, getSystemInfo:function() {
        var cache = this._cache;
        if (!cache.require.browser[cache.available.browser.name]) {
          return false;
        }
        var pluginDetect = hm.core.HardwareDetect.pluginDetect, plugins = pluginDetect.Plugins;
        plugins.java.getVersion();
        plugins.silverlight.getVersion();
        plugins.adobereader.getVersion();
        var result = {browser:{name:cache.available.browser.appName, value:cache.available.browser.version.toString() || ""}, flash:{value:cache.available.fp.toString() || ""}, os:{value:this.getOS()}, screen:{value:screen.width + "x" + screen.height}, cookie:{value:document.cookie ? 1 : 0}, js:{value:1}, java:{value:(plugins.java.version || "").replace(/,/g, ".") || ""}, silverlight:{value:(plugins.silverlight.version || "").replace(/,/g, ".") || ""}, acrobat_reader:{value:(plugins.adobereader.version || 
        "").replace(/,/g, ".") || ""}};
        if (cache.available.browser.name == "explorer") {
          result.msxml = {value:cache.available.msxml.toString() || ""};
        }
        return result;
      }, getSystemInfoForTable:function(systemInfo) {
        if (!systemInfo) {
          return;
        }
        var result = [], cache = this._cache;
        if (!cache.require.browser[systemInfo.browser.name.toLowerCase()]) {
          return false;
        }
        var require = ["browser", "flash", "cookie", "js", "msxml"];
        var browserInfo = systemInfo.browser, browserName = browserInfo.name, browserCode = browserInfo.name.toLowerCase(), browserVersion = new version(browserInfo.value.split(".")), isIE = browserCode === "explorer", msxmlVersion = isIE && (systemInfo.msxml && systemInfo.msxml.value) ? new version(systemInfo.msxml.value.split(".")) : undefined, browserPassed = this._checkBrowser(browserCode, browserVersion, msxmlVersion);
        result.push.apply(result, [{passed:browserPassed, version:browserVersion, require:cache.require.browser[browserCode].toString(), appName:browserName}, {passed:systemInfo.cookie.value, version:systemInfo.cookie.value ? HM._("\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b") : HM._("\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u044b"), require:HM._("\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b"), appName:HM._("Cookie")}, {passed:true, version:systemInfo.js.value ? HM._("\u0432\u043a\u043b\u044e\u0447\u0435\u043d") : 
        "\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d", require:HM._("\u0432\u043a\u043b\u044e\u0447\u0435\u043d"), appName:HM._("JavaScript")}, {version:systemInfo.os.value || "", appName:HM._("\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430")}, {version:systemInfo.screen.value || "", appName:HM._("\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430")}]);
        
		var flashInfo = systemInfo.flash, flashVersion = new version(flashInfo.value ? flashInfo.value.split(".") : [0, 0, 0]), 
		flashPassed = 1, 
		passed = browserPassed && flashPassed, iePassed = passed && isIE;
		
		var flashVersionText = flashVersion.toString() == "0.0.0" ? "" : flashVersion.toString(); // success message passed
		var flashPassedText	 = flashVersion.toString() == "0.0.0" ? "" : "1"; // visual decor class
        result.push({version:flashPassed ? flashVersionText : "", appName:"Adobe Flash Player", notRequired:true,passed:flashPassedText});
        
		result.push.apply(result, [{passed:systemInfo.acrobat_reader.value, version:systemInfo.acrobat_reader.value || "", appName:HM._("Adobe Acrobat Reader"), notRequired:true}, {passed:systemInfo.silverlight.value, version:systemInfo.silverlight.value || "", appName:HM._("Microsoft Silverlight"), notRequired:true}, {passed:systemInfo.java.value, version:systemInfo.java.value || "", appName:HM._("Java"), notRequired:true}]);
        if (isIE) {
          result.push.apply(result, [{passed:msxmlVersion.compare(cache.require.msxml) >= 0, version:msxmlVersion.toString(), require:cache.require.msxml.toString(), appName:"MSXML"}]);
        }
		return{passed:this.ieFeedback && iePassed || !this.ieFeedback && passed, info:result, isIE:isIE};
      }, testTableCell:function(data) {
        var passed = data.passed || !data.hasOwnProperty("passed"), require = data.require ? data.require : "", needTestComment = data.hasOwnProperty("passed"), notRequired = data.notRequired;
        return['<tr class="' + (passed ? "passed" : "failed") + (notRequired ? " hm-infoblock-hwdetect-item-not-required" : "") + '">', '<td class="app-name">' + data.appName + (notRequired ? " *" : "") + "</td>", '<td class="app-version">' + (data.version == "0.0.0" ? '<span class="failed">' + HM._("\u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d") + "</span>" : data.version) + "</td>", '   <td class="app-require">' + require + "</td>", "</tr>"].join("");
      }, messageBox:function(message, level) {
        var $message = $("<div></div>"), $cont = $("<div></div>");
        $message.text(message || "");
        $.ui.errorbox.clear($message);
        $message.errorbox({level:level || "notice"});
        $cont.append($message);
        return $cont.html();
      }, _renderTable:function(result, isAdmin) {			
        var feedback = "";
        if (!result) {
          return this.messageBox(HM._(isAdmin ? "\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0435" : "\u0412\u0430\u0448 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f"), 
          "error");
        }
        feedback = '<div class="EUDetectionCheck">';
        if (!isAdmin) {
          if (result.passed) {
            feedback += this.messageBox(HM._("\u0412\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"), "success");
          } else {
            feedback += this.messageBox(HM._("\u0412\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e"), 
            "error");
          }
        }
        feedback += '<br /><table cellpadding="3" cellspacing="0">';
        feedback += '<tr><th class="app-name">' + HM._("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440") + '</th><th class="app-version">' + HM._("\u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u0432\u0435\u0440\u0441\u0438\u044f)") + '</th><th class="app-require">' + HM._("\u0422\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u0432\u0435\u0440\u0441\u0438\u044f)") + "</th></tr>";
        var resultInfo = result.info;
        for (var i = 0;i < resultInfo.length;i++) {
          feedback += this.testTableCell(resultInfo[i]);
        }
        feedback += "</table>";
        feedback += '<br /><div class="comment"><b>' + HM._("\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435") + ":</b> " + HM._('\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 "*", \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043d\u043e \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0443\u0447\u0435\u0431\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439.'); 
        if(resultInfo[5].version == ""){
			feedback += "<br />" + HM._("Не удалось определить версию ") + " <b>Adobe Flash Player</b>." + HM._(" Возможно, он заблокирован настройками браузера.");
		}		
		feedback += "</div>";				
        feedback += "</div>";
        return feedback;
      }, renderTableBySystemInfo:function(systemInfo, isAdmin) {
        return this._renderTable(this.getSystemInfoForTable(systemInfo), isAdmin);
      }, checkWithFeedback:function(passed) { 
	  
		var sysinfo = this.getSystemInfo();
		console.log(sysinfo);
	  
        return this.renderTableBySystemInfo(this.getSystemInfo());
      }});
      var instance = null;
      hm.core.HardwareDetect.get = function() {
        if (!instance) {
          instance = HM.create("hm.core.HardwareDetect");
        }
        return instance;
      };
    })();
    (function() {
      hm.core.HardwareDetect.pluginDetect = {version:"0.8.1", name:"PluginDetect", openTag:"<", isDefined:function(b) {
        return typeof b != "undefined";
      }, isArray:function(b) {
        return/array/i.test(Object.prototype.toString.call(b));
      }, isFunc:function(b) {
        return typeof b == "function";
      }, isString:function(b) {
        return typeof b == "string";
      }, isNum:function(b) {
        return typeof b == "number";
      }, isStrNum:function(b) {
        return typeof b == "string" && /\d/.test(b);
      }, getNumRegx:/[\d][\d\.\_,\-]*/, splitNumRegx:/[\.\_,\-]/g, getNum:function(b, c) {
        var d = this, a = d.isStrNum(b) ? (d.isDefined(c) ? new RegExp(c) : d.getNumRegx).exec(b) : null;
        return a ? a[0] : null;
      }, compareNums:function(h, f, d) {
        var e = this, c, b, a, g = parseInt;
        if (e.isStrNum(h) && e.isStrNum(f)) {
          if (e.isDefined(d) && d.compareNums) {
            return d.compareNums(h, f);
          }
          c = h.split(e.splitNumRegx);
          b = f.split(e.splitNumRegx);
          for (a = 0;a < Math.min(c.length, b.length);a++) {
            if (g(c[a], 10) > g(b[a], 10)) {
              return 1;
            }
            if (g(c[a], 10) < g(b[a], 10)) {
              return-1;
            }
          }
        }
        return 0;
      }, formatNum:function(b, c) {
        var d = this, a, e;
        if (!d.isStrNum(b)) {
          return null;
        }
        if (!d.isNum(c)) {
          c = 4;
        }
        c--;
        e = b.replace(/\s/g, "").split(d.splitNumRegx).concat(["0", "0", "0", "0"]);
        for (a = 0;a < 4;a++) {
          if (/^(0+)(.+)$/.test(e[a])) {
            e[a] = RegExp.$2;
          }
          if (a > c || !/\d/.test(e[a])) {
            e[a] = "0";
          }
        }
        return e.slice(0, 4).join(",");
      }, getPROP:function(d, b, a) {
        var c;
        try {
          if (d) {
            a = d[b];
          }
        } catch (c) {
        }
        return a;
      }, findNavPlugin:function(l, e, c) {
        var j = this, h = new RegExp(l, "i"), d = !j.isDefined(e) || e ? /\d/ : 0, k = c ? new RegExp(c, "i") : 0, a = navigator.plugins, g = "", f, b, m;
        for (f = 0;f < a.length;f++) {
          m = a[f].description || g;
          b = a[f].name || g;
          if (h.test(m) && (!d || d.test(RegExp.leftContext + RegExp.rightContext)) || h.test(b) && (!d || d.test(RegExp.leftContext + RegExp.rightContext))) {
            if (!k || !(k.test(m) || k.test(b))) {
              return a[f];
            }
          }
        }
        return null;
      }, getMimeEnabledPlugin:function(k, m, c) {
        var e = this, f, b = new RegExp(m, "i"), h = "", g = c ? new RegExp(c, "i") : 0, a, l, d, j = e.isString(k) ? [k] : k;
        for (d = 0;d < j.length;d++) {
          if ((f = e.hasMimeType(j[d])) && (f = f.enabledPlugin)) {
            l = f.description || h;
            a = f.name || h;
            if (b.test(l) || b.test(a)) {
              if (!g || !(g.test(l) || g.test(a))) {
                return f;
              }
            }
          }
        }
        return 0;
      }, getVersionDelimiter:",", findPlugin:function(d) {
        var c = this, b, d, a = {status:-3, plugin:0};
        if (!c.isString(d)) {
          return a;
        }
        if (d.length == 1) {
          c.getVersionDelimiter = d;
          return a;
        }
        d = d.toLowerCase().replace(/\s/g, "");
        b = c.Plugins[d];
        if (!b || !b.getVersion) {
          return a;
        }
        a.plugin = b;
        a.status = 1;
        return a;
      }, getPluginFileVersion:function(f, b) {
        var h = this, e, d, g, a, c = -1;
        if (h.OS > 2 || (!f || (!f.version || !(e = h.getNum(f.version))))) {
          return b;
        }
        if (!b) {
          return e;
        }
        e = h.formatNum(e);
        b = h.formatNum(b);
        d = b.split(h.splitNumRegx);
        g = e.split(h.splitNumRegx);
        for (a = 0;a < d.length;a++) {
          if (c > -1 && (a > c && d[a] != "0")) {
            return b;
          }
          if (g[a] != d[a]) {
            if (c == -1) {
              c = a;
            }
            if (d[a] != "0") {
              return b;
            }
          }
        }
        return e;
      }, AXO:window.ActiveXObject, getAXO:function(a) {
        var d = null, c, b = this;
        try {
          d = new b.AXO(a);
        } catch (c) {
        }
        return d;
      }, INIT:function() {
        this.init.library(this);
      }, init:{$:1, hasRun:0, objProperties:function(d, e, b) {
        var a, c = {};
        if (e && b) {
          if (e[b[0]] === 1 && (!d.isArray(e) && (!d.isFunc(e) && (!d.isString(e) && !d.isNum(e))))) {
            for (a = 0;a < b.length;a = a + 2) {
              e[b[a]] = b[a + 1];
              c[b[a]] = 1;
            }
          }
          for (a in e) {
            if (!c[a] && (e[a] && e[a][b[0]] === 1)) {
              this.objProperties(d, e[a], b);
            }
          }
        }
      }, publicMethods:function(c, f) {
        var g = this, b = g.$, a, d;
        if (c && f) {
          for (a in c) {
            try {
              if (b.isFunc(c[a])) {
                f[a] = c[a](f);
              }
            } catch (d) {
            }
          }
        }
      }, plugin:function(a, c) {
        var d = this, b = d.$;
        if (a) {
          d.objProperties(b, a, ["$", b, "$$", a]);
          if (!b.isDefined(a.getVersionDone)) {
            a.installed = null;
            a.version = null;
            a.version0 = null;
            a.getVersionDone = null;
            a.pluginName = c;
          }
        }
      }, detectIE:function() {
        var init = this, $ = init.$, doc = document, e, x, userAgent = navigator.userAgent || "", progid, progid1, progid2;
        $.isIE = eval("/*@cc_on!@*/!1");
        $.verIE = $.isIE ? /MSIE\s*(\d+\.?\d*)/i.test(userAgent) ? parseFloat(RegExp.$1, 10) : 7 : null;
        $.verIEfull = null;
        $.docModeIE = null;
        if ($.isIE) {
          var verFullFloat, obj = doc.createElement("div");
          try {
            obj.style.behavior = "url(#default#clientcaps)";
            $.verIEfull = obj.getComponentVersion("{89820200-ECBD-11CF-8B85-00AA005B4383}", "componentid").replace(/,/g, ".");
          } catch (e) {
          }
          verFullFloat = parseFloat($.verIEfull || "0", 10);
          $.docModeIE = doc.documentMode || ((/back/i.test(doc.compatMode || "") ? 5 : verFullFloat) || $.verIE);
          $.verIE = verFullFloat || $.docModeIE;
        }
        $.ActiveXEnabled = !1;
        $.ActiveXFilteringEnabled = !1;
        if ($.isIE) {
          try {
            $.ActiveXFilteringEnabled = window.external.msActiveXFilteringEnabled();
          } catch (e) {
          }
          progid1 = ["Msxml2.XMLHTTP", "Msxml2.DOMDocument", "Microsoft.XMLDOM", "TDCCtl.TDCCtl", "Shell.UIHelper", "HtmlDlgSafeHelper.HtmlDlgSafeHelper", "Scripting.Dictionary"];
          progid2 = ["WMPlayer.OCX", "ShockwaveFlash.ShockwaveFlash", "AgControl.AgControl"];
          progid = progid1.concat(progid2);
          for (x = 0;x < progid.length;x++) {
            if ($.getAXO(progid[x])) {
              $.ActiveXEnabled = !0;
              if (!$.dbug) {
                break;
              }
            }
          }
          if ($.ActiveXEnabled && $.ActiveXFilteringEnabled) {
            for (x = 0;x < progid2.length;x++) {
              if ($.getAXO(progid2[x])) {
                $.ActiveXFilteringEnabled = !1;
                break;
              }
            }
          }
        }
      }, detectNonIE:function() {
        var e = this, c = this.$, d = navigator, b = c.isIE ? "" : d.userAgent || "", f = d.vendor || "", a = d.product || "";
        c.isGecko = /Gecko/i.test(a) && /Gecko\s*\/\s*\d/i.test(b);
        c.verGecko = c.isGecko ? c.formatNum(/rv\s*\:\s*([\.\,\d]+)/i.test(b) ? RegExp.$1 : "0.9") : null;
        c.isChrome = /(Chrome|CriOS)\s*\/\s*(\d[\d\.]*)/i.test(b);
        c.verChrome = c.isChrome ? c.formatNum(RegExp.$2) : null;
        c.isSafari = !c.isChrome && ((/Apple/i.test(f) || !f) && /Safari\s*\/\s*(\d[\d\.]*)/i.test(b));
        c.verSafari = c.isSafari && /Version\s*\/\s*(\d[\d\.]*)/i.test(b) ? c.formatNum(RegExp.$1) : null;
        c.isOpera = /Opera\s*[\/]?\s*(\d+\.?\d*)/i.test(b);
        c.verOpera = c.isOpera && (/Version\s*\/\s*(\d+\.?\d*)/i.test(b) || 1) ? parseFloat(RegExp.$1, 10) : null;
      }, detectPlatform:function() {
        var e = this, d = e.$, b, a = navigator.platform || "";
        d.OS = 100;
        if (a) {
          var c = ["Win", 1, "Mac", 2, "Linux", 3, "FreeBSD", 4, "iPhone", 21.1, "iPod", 21.2, "iPad", 21.3, "Win.*CE", 22.1, "Win.*Mobile", 22.2, "Pocket\\s*PC", 22.3, "", 100];
          for (b = c.length - 2;b >= 0;b = b - 2) {
            if (c[b] && (new RegExp(c[b], "i")).test(a)) {
              d.OS = c[b + 1];
              break;
            }
          }
        }
      }, library:function(c) {
        var e = this, d = document, b, a;
        c.init.objProperties(c, c, ["$", c]);
        for (a in c.Plugins) {
          c.init.plugin(c.Plugins[a], a);
        }
        e.publicMethods(c.PUBLIC, c);
        c.win.init();
        c.head = d.getElementsByTagName("head")[0] || (d.getElementsByTagName("body")[0] || (d.body || null));
        e.detectPlatform();
        e.detectIE();
        e.detectNonIE();
        c.init.hasRun = 1;
      }}, handler:function(c, b, a) {
        return function() {
          c(b, a);
        };
      }, fPush:function(b, a) {
        var c = this;
        if (c.isArray(a) && (c.isFunc(b) || c.isArray(b) && (b.length > 0 && c.isFunc(b[0])))) {
          a.push(b);
        }
      }, callArray:function(b) {
        var c = this, a, d;
        if (c.isArray(b)) {
          d = [].concat(b);
          for (a = 0;a < d.length;a++) {
            c.call(d[a]);
            b.splice(0, 1);
          }
        }
      }, call:function(c) {
        var b = this, a = b.isArray(c) ? c.length : -1;
        if (a > 0 && b.isFunc(c[0])) {
          c[0](b, a > 1 ? c[1] : 0, a > 2 ? c[2] : 0, a > 3 ? c[3] : 0);
        } else {
          if (b.isFunc(c)) {
            c(b);
          }
        }
      }, PUBLIC:{isMinVersion:function(a) {
        return function(h, g, d, c) {
          var e = a.findPlugin(h), f, b = -1;
          if (e.status < 0) {
            return e.status;
          }
          f = e.plugin;
          g = a.formatNum(a.isNum(g) ? g.toString() : a.isStrNum(g) ? a.getNum(g) : "0");
          if (f.getVersionDone != 1) {
            f.getVersion(g, d, c);
            if (f.getVersionDone === null) {
              f.getVersionDone = 1;
            }
          }
          if (f.installed !== null) {
            b = f.installed <= 0.5 ? f.installed : f.installed == 0.7 ? 1 : f.version === null ? 0 : a.compareNums(f.version, g, f) >= 0 ? 1 : -0.1;
          }
          return b;
        };
      }, getVersion:function(a) {
        return function(g, d, c) {
          var e = a.findPlugin(g), f, b;
          if (e.status < 0) {
            return null;
          }
          f = e.plugin;
          if (f.getVersionDone != 1) {
            f.getVersion(null, d, c);
            if (f.getVersionDone === null) {
              f.getVersionDone = 1;
            }
          }
          b = f.version || f.version0;
          b = b ? b.replace(a.splitNumRegx, a.getVersionDelimiter) : b;
          return b;
        };
      }, getInfo:function(a) {
        return function(g, d, c) {
          var b = {}, e = a.findPlugin(g), f;
          if (e.status < 0) {
            return b;
          }
          f = e.plugin;
          if (f.getInfo) {
            if (f.getVersionDone === null) {
              a.getVersion ? a.getVersion(g, d, c) : a.isMinVersion(g, "0", d, c);
            }
            b = f.getInfo();
          }
          return b;
        };
      }, onDetectionDone:function(a) {
        return function(h, g, c, b) {
          var d = a.findPlugin(h), j, e;
          if (d.status == -3) {
            return-1;
          }
          e = d.plugin;
          if (!a.isArray(e.funcs)) {
            e.funcs = [];
          }
          if (e.getVersionDone != 1) {
            j = a.getVersion ? a.getVersion(h, c, b) : a.isMinVersion(h, "0", c, b);
          }
          if (e.installed != -0.5 && e.installed != 0.5) {
            a.call(g);
            return 1;
          }
          if (e.NOTF) {
            a.fPush(g, e.funcs);
            return 0;
          }
          return 1;
        };
      }, onWindowLoaded:function(a) {
        return function(b) {
          if (a.win.loaded) {
            a.call(b);
          } else {
            a.fPush(b, a.win.funcs);
          }
        };
      }, hasMimeType:function(a) {
        return function(c) {
          if (!a.isIE && (c && (navigator && navigator.mimeTypes))) {
            var f, e, b, d = a.isArray(c) ? c : a.isString(c) ? [c] : [];
            for (b = 0;b < d.length;b++) {
              if (a.isString(d[b]) && /[^\s]/.test(d[b])) {
                f = navigator.mimeTypes[d[b]];
                e = f ? f.enabledPlugin : 0;
                if (e && (e.name || e.description)) {
                  return f;
                }
              }
            }
          }
          return null;
        };
      }, z:0}, codebase:{$:1, isDisabled:function() {
        var a = this, b = a.$;
        return b.ActiveXEnabled && (b.isIE && b.verIE >= 7) ? 0 : 1;
      }, checkGarbage:function(d) {
        var b = this, c = b.$, a;
        if (c.isIE && (d && c.getPROP(d.firstChild, "object"))) {
          a = c.getPROP(d.firstChild, "readyState");
          if (c.isNum(a) && a != 4) {
            b.garbage = 1;
            return 1;
          }
        }
        return 0;
      }, emptyGarbage:function() {
        var a = this, b = a.$, c;
        if (b.isIE && a.garbage) {
          try {
            window.CollectGarbage();
          } catch (c) {
          }
          a.garbage = 0;
        }
      }, init:function(d) {
        if (!d.init) {
          var b = this, c = b.$, a;
          d.init = 1;
          d.min = 0;
          d.max = 0;
          d.hasRun = 0;
          d.version = null;
          d.L = 0;
          d.altHTML = "";
          d.span = document.createElement("span");
          d.tagA = '<object width="1" height="1" style="display:none;" codebase="#version=';
          d.tagB = '" ' + (/clsid\s*:/i.test(d.$$.classID) ? 'classid="' : 'type="') + d.$$.classID + '">' + d.ParamTags + d.altHTML + c.openTag + "/object>";
          for (a = 0;a < d.Lower.length;a++) {
            d.Lower[a] = c.formatNum(d.Lower[a]);
            d.Upper[a] = c.formatNum(d.Upper[a]);
          }
        }
      }, isActiveXObject:function(i, b) {
        var f = this, g = f.$, a = 0, h, d = i.$$, c = i.span;
        if (i.min && g.compareNums(b, i.min) <= 0) {
          return 1;
        }
        if (i.max && g.compareNums(b, i.max) >= 0) {
          return 0;
        }
        if (d.BIfuncs && d.BIfuncs.length) {
          g.callArray(d.BIfuncs);
        }
        c.innerHTML = i.tagA + b + i.tagB;
        if (g.getPROP(c.firstChild, "object")) {
          a = 1;
        }
        f.checkGarbage(c);
        c.innerHTML = "";
        if (a) {
          i.min = b;
        } else {
          i.max = b;
        }
        return a;
      }, convert_:function(f, a, b, e) {
        var d = f.convert[a], c = f.$;
        return d ? c.isFunc(d) ? c.formatNum(d(b.split(c.splitNumRegx), e).join(",")) : b : d;
      }, convert:function(h, c, g) {
        var e = this, f = h.$, b, a, d;
        c = f.formatNum(c);
        a = {v:c, x:-1};
        if (c) {
          for (b = 0;b < h.Lower.length;b++) {
            d = e.convert_(h, b, h.Lower[b]);
            if (d && (f.compareNums(c, g ? d : h.Lower[b]) >= 0 && (!b || f.compareNums(c, g ? e.convert_(h, b, h.Upper[b]) : h.Upper[b]) < 0))) {
              a.v = e.convert_(h, b, c, g);
              a.x = b;
              break;
            }
          }
        }
        return a;
      }, isMin:function(g, f) {
        var d = this, e = g.$, c, b, a = 0;
        d.init(g);
        if (!e.isStrNum(f) || d.isDisabled()) {
          return a;
        }
        if (!g.L) {
          g.L = {};
          for (c = 0;c < g.Lower.length;c++) {
            if (d.isActiveXObject(g, g.Lower[c])) {
              g.L = d.convert(g, g.Lower[c]);
              break;
            }
          }
        }
        if (g.L.v) {
          b = d.convert(g, f, 1);
          if (b.x >= 0) {
            a = (g.L.x == b.x ? d.isActiveXObject(g, b.v) : e.compareNums(f, g.L.v) <= 0) ? 1 : -1;
          }
        }
        return a;
      }, search:function(g) {
        var k = this, h = k.$, i = g.$$, b = 0, c;
        k.init(g);
        c = g.hasRun || k.isDisabled() ? 1 : 0;
        g.hasRun = 1;
        if (c) {
          return g.version;
        }
        var o, n, m, j = function(q, t) {
          var r = [].concat(f), s;
          r[q] = t;
          s = k.isActiveXObject(g, r.join(","));
          if (s) {
            b = 1;
            f[q] = t;
          } else {
            p[q] = t;
          }
          return s;
        }, d = g.DIGITMAX, e, a, l = 9999999, f = [0, 0, 0, 0], p = [0, 0, 0, 0];
        for (o = 0;o < p.length;o++) {
          f[o] = g.DIGITMIN[o] || 0;
          e = f.join(",");
          a = f.slice(0, o).concat([l, l, l, l]).slice(0, f.length).join(",");
          for (m = 0;m < d.length;m++) {
            if (h.isArray(d[m])) {
              d[m].push(0);
              if (d[m][o] > p[o] && (h.compareNums(a, g.Lower[m]) >= 0 && h.compareNums(e, g.Upper[m]) < 0)) {
                p[o] = d[m][o];
              }
            }
          }
          for (n = 0;n < 20;n++) {
            if (p[o] - f[o] <= 16) {
              for (m = p[o];m >= f[o] + (o ? 1 : 0);m--) {
                if (j(o, m)) {
                  break;
                }
              }
              break;
            }
            j(o, Math.round((p[o] + f[o]) / 2));
          }
          if (!b) {
            break;
          }
          p[o] = f[o];
        }
        if (b) {
          g.version = k.convert(g, f.join(",")).v;
        }
        return g.version;
      }}, win:{$:1, loaded:false, hasRun:0, init:function() {
        var b = this, a = b.$;
        if (!b.hasRun) {
          b.hasRun = 1;
          b.addEvent("load", a.handler(b.runFuncs, a));
          b.addEvent("unload", a.handler(b.cleanup, a));
        }
      }, addEvent:function(c, b) {
        var e = this, d = e.$, a = window;
        if (d.isFunc(b)) {
          if (a.addEventListener) {
            a.addEventListener(c, b, false);
          } else {
            if (a.attachEvent) {
              a.attachEvent("on" + c, b);
            } else {
              a["on" + c] = e.concatFn(b, a["on" + c]);
            }
          }
        }
      }, concatFn:function(d, c) {
        return function() {
          d();
          if (typeof c == "function") {
            c();
          }
        };
      }, funcs0:[], funcs:[], cleanup:function(b) {
        for (var a in b) {
          b[a] = 0;
        }
        b = 0;
      }, runFuncs:function(a) {
        a.win.loaded = true;
        a.callArray(a.win.funcs0);
        a.callArray(a.win.funcs);
        if (a.DOM) {
          a.DOM.onDoneEmptyDiv();
        }
      }, z:0}, DOM:{$:1, isEnabled:{$:1, objectTag:function() {
        var a = this.$;
        return a.isIE ? a.ActiveXEnabled : 1;
      }, objectProperty:function() {
        var a = this.$;
        return a.isIE && a.verIE >= 7 ? 1 : 0;
      }}, div:null, divID:"plugindetect", divWidth:50, pluginSize:1, altHTML:"&nbsp;&nbsp;&nbsp;&nbsp;", emptyNode:function(c) {
        var b = this, d = b.$, a, f;
        if (c && c.childNodes) {
          for (a = c.childNodes.length - 1;a >= 0;a--) {
            if (d.isIE) {
              b.setStyle(c.childNodes[a], ["display", "none"]);
            }
            c.removeChild(c.childNodes[a]);
          }
        }
      }, LASTfuncs:[], onDoneEmptyDiv:function() {
        var f = this, g = f.$, b, d, c, a, h;
        if (!g.win.loaded || (g.win.funcs0.length || g.win.funcs.length)) {
          return;
        }
        for (b in g.Plugins) {
          d = g.Plugins[b];
          if (d) {
            if (d.OTF == 3 || d.funcs && d.funcs.length) {
              return;
            }
          }
        }
        g.callArray(f.LASTfuncs);
        if (f.div && f.div.childNodes) {
          for (b = f.div.childNodes.length - 1;b >= 0;b--) {
            c = f.div.childNodes[b];
            f.emptyNode(c);
          }
          try {
            f.div.innerHTML = "";
          } catch (h) {
          }
        }
        if (!f.div) {
          a = document.getElementById(f.divID);
          if (a) {
            f.div = a;
          }
        }
        if (f.div && f.div.parentNode) {
          try {
            f.div.parentNode.removeChild(f.div);
          } catch (h) {
          }
          f.div = null;
        }
      }, width:function() {
        var g = this, e = g.DOM, f = e.$, d = g.span, b, c, a = -1;
        b = d && f.isNum(d.scrollWidth) ? d.scrollWidth : a;
        c = d && f.isNum(d.offsetWidth) ? d.offsetWidth : a;
        return c > 0 ? c : b > 0 ? b : Math.max(c, b);
      }, obj:function(b) {
        var g = this, d = g.DOM, c = g.span, f, a = c && c.firstChild ? c.firstChild : null;
        try {
          if (a && b) {
            d.div.focus();
          }
        } catch (f) {
        }
        return a;
      }, rs:function() {
        var b = this, a = b.DOM.$;
        return a.isIE ? a.getPROP(b.obj(), "readyState") : b.undefined;
      }, getTagStatus:function(a, m, r, p, d, g) {
        var f = /clsid\s*\:/i, o = r && f.test(r.outerHTML || "") ? r : p && f.test(p.outerHTML || "") ? p : 0, h = r && !f.test(r.outerHTML || "") ? r : p && !f.test(p.outerHTML || "") ? p : 0, l = a && f.test(a.outerHTML || "") ? o : h;
        if (!a || (!a.span || (!m || (!m.span || (!l || !l.span))))) {
          return-2;
        }
        var s = this, c = s.$, q, k = a.width(), j = l.width(), n = m.width(), b = a.readyState(), t = l.readyState();
        if (k < 0 || (j < 0 || n <= s.pluginSize)) {
          return 0;
        }
        if (s.isEnabled.objectProperty()) {
          var i = c.getPROP(a.obj(), "object");
          if (i) {
            return 1.5;
          }
          if (g && (!a.pi && (c.isDefined(i) && (c.isIE && (a.tagName == l.tagName && a.time <= l.time))))) {
            if (k === j && (b === 0 && t !== 0)) {
              a.pi = 1;
            }
          }
        }
        if (j < n) {
          return a.pi ? -0.1 : 0;
        }
        if (k >= n) {
          if (!a.winLoaded && c.win.loaded) {
            return a.pi ? -0.5 : -1;
          }
          if (c.isNum(d)) {
            if (!c.isNum(a.count2)) {
              a.count2 = d;
            }
            if (d - a.count2 > 0) {
              return a.pi ? -0.5 : -1;
            }
          }
        }
        try {
          if (k == s.pluginSize && (!c.isIE || b === 4)) {
            if (!a.winLoaded && c.win.loaded) {
              return 1;
            }
            if (a.winLoaded && c.isNum(d)) {
              if (!c.isNum(a.count)) {
                a.count = d;
              }
              if (d - a.count >= 5) {
                return 1;
              }
            }
          }
        } catch (q) {
        }
        return a.pi ? -0.1 : 0;
      }, setStyle:function(b, h) {
        var c = this, d = c.$, g = b.style, a, f;
        if (g && h) {
          for (a = 0;a < h.length;a = a + 2) {
            try {
              g[h[a]] = h[a + 1];
            } catch (f) {
            }
          }
        }
      }, insertDivInBody:function(a, h) {
        var j = this, d = j.$, g, b = "pd33993399", c = null, i = h ? window.top.document : window.document, f = i.getElementsByTagName("body")[0] || i.body;
        if (!f) {
          try {
            i.write('<div id="' + b + '">.' + d.openTag + "/div>");
            c = i.getElementById(b);
          } catch (g) {
          }
        }
        f = i.getElementsByTagName("body")[0] || i.body;
        if (f) {
          f.insertBefore(a, f.firstChild);
          if (c) {
            f.removeChild(c);
          }
        }
      }, insert:function(f, b, g, a, l, k) {
        var q = this, i = q.$, m, n = document, s, r, p = n.createElement("span"), o, h, c = ["outlineStyle", "none", "borderStyle", "none", "padding", "0px", "margin", "0px", "visibility", "visible"], j = "outline-style:none;border-style:none;padding:0px;margin:0px;visibility:" + (k ? "hidden;" : "visible;") + "display:inline;";
        if (!i.isDefined(a)) {
          a = "";
        }
        if (i.isString(f) && /[^\s]/.test(f)) {
          f = f.toLowerCase().replace(/\s/g, "");
          s = i.openTag + f + ' width="' + q.pluginSize + '" height="' + q.pluginSize + '" ';
          s += 'style="' + j + '" ';
          for (o = 0;o < b.length;o = o + 2) {
            if (/[^\s]/.test(b[o + 1])) {
              s += b[o] + '="' + b[o + 1] + '" ';
            }
          }
          s += ">";
          for (o = 0;o < g.length;o = o + 2) {
            if (/[^\s]/.test(g[o + 1])) {
              s += i.openTag + 'param name="' + g[o] + '" value="' + g[o + 1] + '" />';
            }
          }
          s += a + i.openTag + "/" + f + ">";
        } else {
          f = "";
          s = a;
        }
        if (!q.div) {
          h = n.getElementById(q.divID);
          if (h) {
            q.div = h;
          } else {
            q.div = n.createElement("div");
            q.div.id = q.divID;
          }
          q.setStyle(q.div, c.concat(["width", q.divWidth + "px", "height", q.pluginSize + 3 + "px", "fontSize", q.pluginSize + 3 + "px", "lineHeight", q.pluginSize + 3 + "px", "verticalAlign", "baseline", "display", "block"]));
          if (!h) {
            q.setStyle(q.div, ["position", "absolute", "right", "0px", "top", "0px"]);
            q.insertDivInBody(q.div);
          }
        }
        r = {span:null, winLoaded:i.win.loaded, tagName:f, outerHTML:s, DOM:q, time:(new Date).getTime(), width:q.width, obj:q.obj, readyState:q.rs};
        if (q.div && q.div.parentNode) {
          q.setStyle(p, c.concat(["fontSize", q.pluginSize + 3 + "px", "lineHeight", q.pluginSize + 3 + "px", "verticalAlign", "baseline", "display", "inline"]));
          q.div.appendChild(p);
          try {
            p.innerHTML = s;
          } catch (m) {
          }
          r.span = p;
          r.winLoaded = i.win.loaded;
        }
        return r;
      }}, file:{$:1, any:"fileStorageAny999", valid:"fileStorageValid999", save:function(d, f, c) {
        var b = this, e = b.$, a;
        if (d && e.isDefined(c)) {
          if (!d[b.any]) {
            d[b.any] = [];
          }
          if (!d[b.valid]) {
            d[b.valid] = [];
          }
          d[b.any].push(c);
          a = b.split(f, c);
          if (a) {
            d[b.valid].push(a);
          }
        }
      }, getValidLength:function(a) {
        return a && a[this.valid] ? a[this.valid].length : 0;
      }, getAnyLength:function(a) {
        return a && a[this.any] ? a[this.any].length : 0;
      }, getValid:function(c, a) {
        var b = this;
        return c && c[b.valid] ? b.get(c[b.valid], a) : null;
      }, getAny:function(c, a) {
        var b = this;
        return c && c[b.any] ? b.get(c[b.any], a) : null;
      }, get:function(d, a) {
        var c = d.length - 1, b = this.$.isNum(a) ? a : c;
        return b < 0 || b > c ? null : d[b];
      }, split:function(g, c) {
        var b = this, e = b.$, f = null, a, d;
        g = g ? g.replace(".", "\\.") : "";
        d = new RegExp("^(.*[^\\/])(" + g + "\\s*)$");
        if (e.isString(c) && d.test(c)) {
          a = RegExp.$1.split("/");
          f = {name:a[a.length - 1], ext:RegExp.$2, full:c};
          a[a.length - 1] = "";
          f.path = a.join("/");
        }
        return f;
      }, z:0}, Plugins:{quicktime:{$:1, mimeType:["video/quicktime", "application/x-quicktimeplayer", "image/x-macpaint", "image/x-quicktime"], progID:"QuickTimeCheckObject.QuickTimeCheck.1", progID0:"QuickTime.QuickTime", classID:"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B", codebase:{$:1, isMin:function(a) {
        return this.$.codebase.isMin(this, a);
      }, search:function() {
        return this.$.codebase.search(this);
      }, ParamTags:'<param name="src" value="" /><param name="controller" value="false" />', DIGITMAX:[[12, 11, 11], [7, 60], [7, 11, 11], 0, [7, 11, 11]], DIGITMIN:[5, 0, 0, 0], Upper:["999", "7,60", "7,50", "7,6", "7,5"], Lower:["7,60", "7,50", "7,6", "7,5", "0"], convert:[1, function(b, a) {
        return a ? [b[0], b[1] + b[2], b[3], "0"] : [b[0], b[1].charAt(0), b[1].charAt(1), b[2]];
      }, 1, 0, 1]}, setPluginStatus:function(d, a, f) {
        var e = this, c = e.$, b = e.installed;
        e.installed = a ? 1 : f ? f > 0 ? 0.7 : -0.1 : d ? 0 : -1;
        if (a) {
          e.version = c.formatNum(a, 3);
        }
        e.getVersionDone = e.installed == 0.7 || e.installed == -0.1 ? 0 : 1;
        c.codebase.emptyGarbage();
      }, getVersion:function(c) {
        var h = this, d = h.$, a = null, g = null, b, f;
        if (!d.isIE) {
          if (d.hasMimeType(h.mimeType)) {
            g = d.OS != 3 ? d.findNavPlugin("QuickTime.*Plug-?in", 0) : null;
            if (g && g.name) {
              a = d.getNum(g.name);
            }
          }
        } else {
          if (d.isStrNum(c)) {
            b = c.split(d.splitNumRegx);
            if (b.length > 3 && parseInt(b[3], 10) > 0) {
              b[3] = "9999";
            }
            c = b.join(",");
          }
          b = h.codebase.isMin(c);
          if (b) {
            h.setPluginStatus(0, 0, b);
            return;
          }
          if (!a || d.dbug) {
            a = h.codebase.search();
          }
          if (!a || d.dbug) {
            g = d.getAXO(h.progID);
            b = d.getPROP(g, "QuickTimeVersion");
            if (b && b.toString) {
              a = b.toString(16);
              a = parseInt(a.charAt(0) || "0", 16) + "." + parseInt(a.charAt(1) || "0", 16) + "." + parseInt(a.charAt(2) || "0", 16);
            }
          }
        }
        h.setPluginStatus(g, a);
      }}, java:{$:1, mimeType:["application/x-java-applet", "application/x-java-vm", "application/x-java-bean"], mimeType_dummy:"application/dummymimejavaapplet", classID:"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93", classID_dummy:"clsid:8AD9C840-044E-11D1-B3E9-BA9876543210", navigator:{$:1, a:function() {
        var b, a = !0;
        try {
          a = window.navigator.javaEnabled();
        } catch (b) {
        }
        return a;
      }(), javaEnabled:function() {
        return this.a;
      }, mimeObj:0, pluginObj:0}, OTF:null, info:{$:1, Plugin2Status:0, setPlugin2Status:function(a) {
        if (this.$.isNum(a)) {
          this.Plugin2Status = a;
        }
      }, getPlugin2Status:function() {
        var c = this, d = c.$, b = c.$$, i = b.navigator, f, g, k, h, j, a;
        if (c.Plugin2Status === 0) {
          if (d.isIE && (d.OS == 1 && /Sun|Oracle/i.test(c.getVendor()))) {
            f = c.isMinJre4Plugin2();
            if (f > 0) {
              c.setPlugin2Status(1);
            } else {
              if (f < 0) {
                c.setPlugin2Status(-1);
              }
            }
          } else {
            if (!d.isIE && i.pluginObj) {
              k = /Next.*Generation.*Java.*Plug-?in|Java.*Plug-?in\s*2\s/i;
              h = /Classic.*Java.*Plug-in/i;
              j = i.pluginObj.description || "";
              a = i.pluginObj.name || "";
              if (k.test(j) || k.test(a)) {
                c.setPlugin2Status(1);
              } else {
                if (h.test(j) || h.test(a)) {
                  c.setPlugin2Status(-1);
                }
              }
            }
          }
        }
        return c.Plugin2Status;
      }, isMinJre4Plugin2:function(a) {
        var f = this, e = f.$, c = f.$$, d = "", g = c.applet.codebase, b = c.applet.getResult()[0];
        if (e.OS == 1) {
          d = "1,6,0,10";
        } else {
          if (e.OS == 2) {
            d = "1,6,0,12";
          } else {
            if (e.OS == 3) {
              d = "1,6,0,10";
            } else {
              d = "1,6,0,10";
            }
          }
        }
        if (!a) {
          a = (b && !c.applet.isRange(b) ? b : 0) || (c.version || (g.min && d ? g.isMin(d) > 0 ? d : "0,0,0,0" : 0));
        }
        a = e.formatNum(e.getNum(a));
        return a ? e.compareNums(a, d) >= 0 ? 1 : -1 : 0;
      }, BrowserForbidsPlugin2:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 0;
        }
        if (a.isIE && a.verIE < 6 || (a.isGecko && a.compareNums(a.verGecko, "1,9,0,0") < 0 || a.isOpera && (a.verOpera && a.verOpera < 10.5))) {
          return 1;
        }
        return 0;
      }, BrowserRequiresPlugin2:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 0;
        }
        if (a.isGecko && a.compareNums(a.verGecko, "1,9,2,0") >= 0 || (a.isChrome || a.OS == 1 && (a.verOpera && a.verOpera >= 10.6))) {
          return 1;
        }
        return 0;
      }, VENDORS:["Sun Microsystems Inc.", "Apple Computer, Inc.", "Oracle Corporation"], OracleMin:"1,7,0,0", OracleOrSun:function(a) {
        var c = this, b = c.$;
        return c.VENDORS[b.compareNums(b.formatNum(a), c.OracleMin) < 0 ? 0 : 2];
      }, OracleOrApple:function(a) {
        var c = this, b = c.$;
        return c.VENDORS[b.compareNums(b.formatNum(a), c.OracleMin) < 0 ? 1 : 2];
      }, getVendor:function() {
        var d = this, c = d.$, b = d.$$, f = b.vendor || (b.applet.getResult()[1] || ""), e = b.applet.codebase, a;
        if (!f) {
          a = b.DTK.version || (e.version || (e.min ? e.isMin(d.OracleMin) > 0 ? d.OracleMin : "0,0,0,0" : 0));
          if (a) {
            f = d.OracleOrSun(a);
          } else {
            if (b.version) {
              if (c.OS == 2) {
                f = d.OracleOrApple(b.version);
              } else {
                if (!c.isIE && c.OS == 1 || c.OS == 3) {
                  f = d.OracleOrSun(b.version);
                }
              }
            }
          }
        }
        return f;
      }, isPlugin2InstalledEnabled:function() {
        var b = this, d = b.$, a = b.$$, i = -1, f = a.installed, g = b.getPlugin2Status(), h = b.BrowserRequiresPlugin2(), e = b.BrowserForbidsPlugin2(), c = b.isMinJre4Plugin2();
        if (f !== null && f >= -0.1) {
          if (g >= 3) {
            i = 1;
          } else {
            if (g <= -3) {
            } else {
              if (g == 2) {
                i = 1;
              } else {
                if (g == -2) {
                } else {
                  if (h && (g >= 0 && c > 0)) {
                    i = 1;
                  } else {
                    if (e && (g <= 0 && c < 0)) {
                    } else {
                      if (h) {
                        i = 1;
                      } else {
                        if (e) {
                        } else {
                          if (g > 0) {
                            i = 1;
                          } else {
                            if (g < 0) {
                            } else {
                              if (c < 0) {
                              } else {
                                i = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return i;
      }}, getInfo:function() {
        var b = this, d = b.$, a = b.applet, h, j = b.installed, g = b.DTK.query(), f = a.results, k = {All_versions:[], DeployTK_versions:[].concat(d.isArray(g.VERSIONS) ? g.VERSIONS : []), DeploymentToolkitPlugin:g.status == 0 || !g.HTML ? null : g.HTML.obj(), vendor:b.info.getVendor(), isPlugin2:b.info.isPlugin2InstalledEnabled(), OTF:b.OTF < 3 ? 0 : b.OTF == 3 ? 1 : 2, PLUGIN:null, name:"", description:""};
        k.All_versions = [].concat(k.DeployTK_versions.length ? k.DeployTK_versions : d.isString(b.version) ? [b.version] : []);
        var c = k.All_versions;
        for (h = 0;h < c.length;h++) {
          c[h] = d.formatNum(d.getNum(c[h]));
        }
        for (h = 0;h < f.length;h++) {
          if (f[h][0] && (a.HTML[h] && a.HTML[h].obj())) {
            k.PLUGIN = a.HTML[h].obj();
            break;
          }
        }
        var e = [null, null, null, null];
        for (h = 0;h < f.length;h++) {
          if (f[h][0]) {
            e[h] = 1;
          } else {
            if (f[h][0] !== null) {
              if (b.NOTF) {
                b.NOTF.isAppletActive(h);
              }
              if (a.active[h] > 0) {
                e[h] = 0;
              } else {
                if (a.allowed[h] >= 1 && (b.OTF != 3 && (a.isDisabled.single(h) || (j == -0.2 || (j == -1 || (a.active[h] < 0 || h == 3 && (!d.isIE || /Microsoft/i.test(k.vendor)))))))) {
                  e[h] = -1;
                }
              }
            } else {
              if (h == 3 && f[0][0]) {
                e[h] = 0;
              } else {
                if (a.isDisabled.single(h)) {
                  e[h] = -1;
                }
              }
            }
          }
        }
        k.objectTag = e[1];
        k.appletTag = e[2];
        k.objectTagActiveX = e[3];
        var i = 0;
        if (!d.isIE) {
          if (b.navMime.query().pluginObj) {
            i = b.navMime.pluginObj;
          } else {
            if (b.navigator.pluginObj) {
              i = b.navigator.pluginObj;
            }
          }
          if (i) {
            k.name = i.name || "";
            k.description = i.description || "";
          }
        }
        return k;
      }, getVerifyTagsDefault:function() {
        return[1, this.applet.isDisabled.VerifyTagsDefault_1() ? 0 : 1, 1];
      }, getVersion:function(j, g, i) {
        var b = this, d = b.$, e, a = b.applet, h = b.verify, k = b.navigator, f = null, l = null, c = null;
        if (b.getVersionDone === null) {
          b.OTF = 0;
          k.mimeObj = d.hasMimeType(b.mimeType);
          if (k.mimeObj) {
            k.pluginObj = k.mimeObj.enabledPlugin;
          }
          if (h) {
            h.begin();
          }
        }
        a.setVerifyTagsArray(i);
        d.file.save(b, ".jar", g);
        if (b.getVersionDone === 0) {
          if (a.should_Insert_Query_Any()) {
            e = a.insert_Query_Any(j);
            b.setPluginStatus(e[0], e[1], f, j);
          }
          return;
        }
        if ((!f || d.dbug) && b.DTK.query().version) {
          f = b.DTK.version;
        }
        if ((!f || d.dbug) && b.navMime.query().version) {
          f = b.navMime.version;
        }
        if ((!f || d.dbug) && b.navPlugin.query().version) {
          f = b.navPlugin.version;
        }
        if (b.nonAppletDetectionOk(f)) {
          c = f;
        }
        if (!c || (d.dbug || (a.VerifyTagsHas(2.2) || a.VerifyTagsHas(2.5)))) {
          e = b.lang.System.getProperty();
          if (e[0]) {
            f = e[0];
            c = e[0];
            l = e[1];
          }
        }
        b.setPluginStatus(c, l, f, j);
        if (a.should_Insert_Query_Any()) {
          e = a.insert_Query_Any(j);
          if (e[0]) {
            c = e[0];
            l = e[1];
          }
        }
        b.setPluginStatus(c, l, f, j);
      }, nonAppletDetectionOk:function(b) {
        var d = this, e = d.$, a = d.navigator, c = 1;
        if (!b || (!a.javaEnabled() && !d.lang.System.getPropertyHas(b) || (!e.isIE && (!a.mimeObj && !d.lang.System.getPropertyHas(b)) || e.isIE && !e.ActiveXEnabled))) {
          c = 0;
        } else {
          if (e.OS >= 20) {
          } else {
            if (d.info && (d.info.getPlugin2Status() < 0 && d.info.BrowserRequiresPlugin2())) {
              c = 0;
            }
          }
        }
        return c;
      }, setPluginStatus:function(d, i, g, h) {
        var b = this, e = b.$, f, c = 0, a = b.applet;
        g = g || b.version0;
        if (b.OTF > 0) {
          d = d || b.lang.System.getProperty()[0];
        }
        f = a.isRange(d);
        if (f) {
          if (a.setRange(f, h) == d) {
            c = f;
          }
          d = 0;
        }
        if (b.OTF < 3) {
          b.installed = c ? c > 0 ? 0.7 : -0.1 : d ? 1 : g ? -0.2 : -1;
        }
        if (b.OTF == 2 && (b.NOTF && (!b.applet.getResult()[0] && !b.lang.System.getProperty()[0]))) {
          b.installed = g ? -0.2 : -1;
        }
        if (b.OTF == 3 && (b.installed != -0.5 && b.installed != 0.5)) {
          b.installed = b.NOTF.isJavaActive(1) == 1 || b.lang.System.getProperty()[0] ? 0.5 : -0.5;
        }
        if (b.OTF == 4 && (b.installed == -0.5 || b.installed == 0.5)) {
          if (d) {
            b.installed = 1;
          } else {
            if (c) {
              b.installed = c > 0 ? 0.7 : -0.1;
            } else {
              if (b.NOTF.isJavaActive(1) == 1) {
                if (g) {
                  b.installed = 1;
                  d = g;
                } else {
                  b.installed = 0;
                }
              } else {
                if (g) {
                  b.installed = -0.2;
                } else {
                  b.installed = -1;
                }
              }
            }
          }
        }
        if (g) {
          b.version0 = e.formatNum(e.getNum(g));
        }
        if (d && !c) {
          b.version = e.formatNum(e.getNum(d));
        }
        if (i && e.isString(i)) {
          b.vendor = i;
        }
        if (!b.vendor) {
          b.vendor = "";
        }
        if (b.verify && b.verify.isEnabled()) {
          b.getVersionDone = 0;
        } else {
          if (b.getVersionDone != 1) {
            if (b.OTF < 2) {
              b.getVersionDone = 0;
            } else {
              b.getVersionDone = b.applet.can_Insert_Query_Any() ? 0 : 1;
            }
          }
        }
        e.codebase.emptyGarbage();
      }, DTK:{$:1, hasRun:0, status:null, VERSIONS:[], version:"", HTML:null, Plugin2Status:null, classID:["clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA", "clsid:CAFEEFAC-DEC7-0000-0000-ABCDEFFEDCBA"], mimeType:["application/java-deployment-toolkit", "application/npruntime-scriptable-plugin;DeploymentToolkit"], isDisabled:function() {
        var a = this, b = a.$;
        if (!b.DOM.isEnabled.objectTag() || (b.isIE && b.verIE < 6 || (b.isGecko && b.compareNums(b.verGecko, b.formatNum("1.6")) <= 0 || (b.isSafari && (b.OS == 1 && (!b.verSafari || b.compareNums(b.verSafari, "5,1,0,0") < 0)) || b.isChrome)))) {
          return 1;
        }
        return 0;
      }, query:function() {
        var l = this, h = l.$, f = l.$$, k, m, i, a = h.DOM.altHTML, g = {}, b, d = null, j = null, c = l.hasRun || l.isDisabled();
        l.hasRun = 1;
        if (c) {
          return l;
        }
        l.status = 0;
        if (h.isIE) {
          for (m = 0;m < l.classID.length;m++) {
            l.HTML = h.DOM.insert("object", ["classid", l.classID[m]], [], a);
            d = l.HTML.obj();
            if (h.getPROP(d, "jvms")) {
              break;
            }
          }
        } else {
          i = h.hasMimeType(l.mimeType);
          if (i && i.type) {
            l.HTML = h.DOM.insert("object", ["type", i.type], [], a);
            d = l.HTML.obj();
          }
        }
        if (d) {
          try {
            if (Math.abs(f.info.getPlugin2Status()) < 2) {
              l.Plugin2Status = d.isPlugin2();
            }
          } catch (k) {
          }
          if (l.Plugin2Status !== null) {
            if (l.Plugin2Status) {
              f.info.setPlugin2Status(2);
            } else {
              if (h.isIE || f.info.getPlugin2Status() <= 0) {
                f.info.setPlugin2Status(-2);
              }
            }
          }
          try {
            b = h.getPROP(d, "jvms");
            if (b) {
              j = b.getLength();
              if (h.isNum(j)) {
                l.status = j > 0 ? 1 : -1;
                for (m = 0;m < j;m++) {
                  i = h.getNum(b.get(j - 1 - m).version);
                  if (i) {
                    l.VERSIONS.push(i);
                    g["a" + h.formatNum(i)] = 1;
                  }
                }
              }
            }
          } catch (k) {
          }
        }
        i = 0;
        for (m in g) {
          i++;
        }
        if (i && i !== l.VERSIONS.length) {
          l.VERSIONS = [];
        }
        if (l.VERSIONS.length) {
          l.version = h.formatNum(l.VERSIONS[0]);
        }
        return l;
      }}, navMime:{$:1, hasRun:0, mimetype:"", version:"", length:0, mimeObj:0, pluginObj:0, isDisabled:function() {
        var b = this, d = b.$, c = b.$$, a = c.navigator;
        if (d.isIE || (!a.mimeObj || !a.pluginObj)) {
          return 1;
        }
        return 0;
      }, query:function() {
        var i = this, f = i.$, a = i.$$, b = i.hasRun || i.isDisabled();
        i.hasRun = 1;
        if (b) {
          return i;
        }
        var n = /^\s*application\/x-java-applet;jpi-version\s*=\s*(\d.*)$/i, g, l, j, d = "", h = "a", o, m, k = {}, c = f.formatNum("0");
        for (l = 0;l < navigator.mimeTypes.length;l++) {
          o = navigator.mimeTypes[l];
          m = o ? o.enabledPlugin : 0;
          g = o && n.test(o.type || d) ? f.formatNum(f.getNum(RegExp.$1)) : 0;
          if (g && (m && (m.description || m.name))) {
            if (!k[h + g]) {
              i.length++;
            }
            k[h + g] = o.type;
            if (f.compareNums(g, c) > 0) {
              c = g;
            }
          }
        }
        g = k[h + c];
        if (g) {
          o = f.hasMimeType(g);
          i.mimeObj = o;
          i.pluginObj = o ? o.enabledPlugin : 0;
          i.mimetype = g;
          i.version = c;
        }
        return i;
      }}, navPlugin:{$:1, hasRun:0, version:"", isDisabled:function() {
        var d = this, c = d.$, b = d.$$, a = b.navigator;
        if (c.isIE || (!a.mimeObj || !a.pluginObj)) {
          return 1;
        }
        return 0;
      }, query:function() {
        var m = this, e = m.$, c = m.$$, h = c.navigator, j, l, k, g, d, a, i, f = 0, b = m.hasRun || m.isDisabled();
        m.hasRun = 1;
        if (b) {
          return m;
        }
        a = h.pluginObj.name || "";
        i = h.pluginObj.description || "";
        if (!f || e.dbug) {
          g = /Java.*TM.*Platform[^\d]*(\d+)(?:[\.,_](\d*))?(?:\s*[Update]+\s*(\d*))?/i;
          if ((g.test(a) || g.test(i)) && parseInt(RegExp.$1, 10) >= 5) {
            f = "1," + RegExp.$1 + "," + (RegExp.$2 ? RegExp.$2 : "0") + "," + (RegExp.$3 ? RegExp.$3 : "0");
          }
        }
        if (!f || e.dbug) {
          g = /Java[^\d]*Plug-in/i;
          l = g.test(i) ? e.formatNum(e.getNum(i)) : 0;
          k = g.test(a) ? e.formatNum(e.getNum(a)) : 0;
          if (l && (e.compareNums(l, e.formatNum("1,3")) < 0 || e.compareNums(l, e.formatNum("2")) >= 0)) {
            l = 0;
          }
          if (k && (e.compareNums(k, e.formatNum("1,3")) < 0 || e.compareNums(k, e.formatNum("2")) >= 0)) {
            k = 0;
          }
          d = l && k ? e.compareNums(l, k) > 0 ? l : k : l || k;
          if (d) {
            f = d;
          }
        }
        if (!f && (e.isSafari && e.OS == 2)) {
          j = e.findNavPlugin("Java.*\\d.*Plug-in.*Cocoa", 0);
          if (j) {
            l = e.getNum(j.description);
            if (l) {
              f = l;
            }
          }
        }
        if (f) {
          m.version = e.formatNum(f);
        }
        return m;
      }}, lang:{$:1, System:{$:1, hasRun:0, result:[null, null], isDisabled:function() {
        var b = this, c = b.$, a = b.$$;
        if (!window.java || c.isIE) {
          return 1;
        }
        if (c.OS == 2 && (c.verOpera && (c.verOpera < 9.2 && c.verOpera >= 9))) {
          return 1;
        }
        return 0;
      }, getPropertyHas:function(a) {
        var b = this, d = b.$, c = b.getProperty()[0];
        return a && (c && d.compareNums(d.formatNum(a), d.formatNum(c)) === 0) ? 1 : 0;
      }, getProperty:function() {
        var f = this, g = f.$, d = f.$$, h, a = "java_qqq990", c, i = "window.java.lang.System.getProperty", b = f.hasRun || f.isDisabled();
        f.hasRun = 1;
        if (!b) {
          g[a] = 0;
          try {
            c = document.createElement("script");
            c.type = "text/javascript";
            c.appendChild(document.createTextNode("(function(){var e;try{" + g.name + "." + a + "=[" + i + "('java.version')+''," + i + "('java.vendor')+'']}catch(e){}})();"));
            g.head.insertBefore(c, g.head.firstChild);
            g.head.removeChild(c);
          } catch (h) {
          }
          if (g.isArray(g[a])) {
            f.result = [].concat(g[a]);
          }
        }
        return f.result;
      }}}, applet:{$:1, codebase:{$:1, isMin:function(a) {
        return this.$.codebase.isMin(this, a);
      }, search:function() {
        return this.$.codebase.search(this);
      }, ParamTags:'<param name="code" value="A19999.class" /><param name="codebase_lookup" value="false" />', DIGITMAX:[[16, 64], [6, 0, 512], 0, [1, 5, 2, 256], 0, [1, 4, 1, 1], [1, 4, 0, 64], [1, 3, 2, 32]], DIGITMIN:[1, 0, 0, 0], Upper:["999", "10", "5,0,20", "1,5,0,20", "1,4,1,20", "1,4,1,2", "1,4,1", "1,4"], Lower:["10", "5,0,20", "1,5,0,20", "1,4,1,20", "1,4,1,2", "1,4,1", "1,4", "0"], convert:[function(b, a) {
        return a ? [parseInt(b[0], 10) > 1 ? "99" : parseInt(b[1], 10) + 3 + "", b[3], "0", "0"] : ["1", parseInt(b[0], 10) - 3 + "", "0", b[1]];
      }, function(b, a) {
        return a ? [b[1], b[2], b[3] + "0", "0"] : ["1", b[0], b[1], b[2].substring(0, b[2].length - 1 || 1)];
      }, 0, function(b, a) {
        return a ? [b[0], b[1], b[2], b[3] + "0"] : [b[0], b[1], b[2], b[3].substring(0, b[3].length - 1 || 1)];
      }, 0, 1, function(b, a) {
        return a ? [b[0], b[1], b[2], b[3] + "0"] : [b[0], b[1], b[2], b[3].substring(0, b[3].length - 1 || 1)];
      }, 1]}, results:[[null, null], [null, null], [null, null], [null, null]], getResult:function() {
        var b = this, d = b.results, a, c = [];
        for (a = d.length - 1;a >= 0;a--) {
          c = d[a];
          if (c[0]) {
            break;
          }
        }
        c = [].concat(c);
        return c;
      }, DummySpanTagHTML:0, HTML:[0, 0, 0, 0], active:[0, 0, 0, 0], DummyObjTagHTML:0, DummyObjTagHTML2:0, allowed:[1, 1, 1, 1], VerifyTagsHas:function(c) {
        var d = this, b;
        for (b = 0;b < d.allowed.length;b++) {
          if (d.allowed[b] === c) {
            return 1;
          }
        }
        return 0;
      }, saveAsVerifyTagsArray:function(c) {
        var b = this, d = b.$, a;
        if (d.isArray(c)) {
          for (a = 1;a < b.allowed.length;a++) {
            if (c.length > a - 1 && d.isNum(c[a - 1])) {
              if (c[a - 1] < 0) {
                c[a - 1] = 0;
              }
              if (c[a - 1] > 3) {
                c[a - 1] = 3;
              }
              b.allowed[a] = c[a - 1];
            }
          }
          b.allowed[0] = b.allowed[3];
        }
      }, setVerifyTagsArray:function(d) {
        var b = this, c = b.$, a = b.$$;
        if (a.getVersionDone === null) {
          b.saveAsVerifyTagsArray(a.getVerifyTagsDefault());
        }
        if (c.dbug || a.verify && a.verify.isEnabled()) {
          b.saveAsVerifyTagsArray([3, 3, 3]);
        } else {
          if (d) {
            b.saveAsVerifyTagsArray(d);
          }
        }
      }, isDisabled:{$:1, single:function(d) {
        var a = this, c = a.$, b = a.$$;
        if (d == 0) {
          return c.codebase.isDisabled();
        }
        if (d == 3 && !c.isIE || a.all()) {
          return 1;
        }
        if (d == 1 || d == 3) {
          return!c.DOM.isEnabled.objectTag();
        }
        if (d == 2) {
          return a.AppletTag();
        }
      }, aA_:null, all:function() {
        var c = this, e = c.$, d = c.$$, b = d.navigator, a = 0;
        if (c.aA_ === null) {
          if (e.OS >= 20) {
            a = 0;
          } else {
            if (e.verOpera && (e.verOpera < 11 && (!b.javaEnabled() && !d.lang.System.getProperty()[0]))) {
              a = 1;
            } else {
              if (e.verGecko && e.compareNums(e.verGecko, e.formatNum("2")) < 0 && (!b.mimeObj && !d.lang.System.getProperty()[0])) {
                a = 1;
              } else {
                if (c.AppletTag() && !e.DOM.isEnabled.objectTag()) {
                  a = 1;
                }
              }
            }
          }
          c.aA_ = a;
        }
        return c.aA_;
      }, AppletTag:function() {
        var b = this, d = b.$, c = b.$$, a = c.navigator;
        return d.isIE ? !a.javaEnabled() : 0;
      }, VerifyTagsDefault_1:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 1;
        }
        if (a.isIE && (a.verIE < 9 || !a.ActiveXEnabled) || (a.verGecko && a.compareNums(a.verGecko, a.formatNum("2")) < 0 || (a.isSafari && (!a.verSafari || a.compareNums(a.verSafari, a.formatNum("4")) < 0) || a.verOpera && a.verOpera < 10))) {
          return 0;
        }
        return 1;
      }, z:0}, can_Insert_Query:function(d) {
        var b = this, c = b.results[0][0], a = b.getResult()[0];
        if (b.HTML[d] || (d == 0 && (c !== null && !b.isRange(c)) || d == 0 && (a && !b.isRange(a)))) {
          return 0;
        }
        return!b.isDisabled.single(d);
      }, can_Insert_Query_Any:function() {
        var b = this, a;
        for (a = 0;a < b.results.length;a++) {
          if (b.can_Insert_Query(a)) {
            return 1;
          }
        }
        return 0;
      }, should_Insert_Query:function(e) {
        var c = this, f = c.allowed, d = c.$, b = c.$$, a = c.getResult()[0];
        a = a && (e > 0 || !c.isRange(a));
        if (!c.can_Insert_Query(e) || f[e] === 0) {
          return 0;
        }
        if (f[e] == 3 || (f[e] == 2.8 && !a || (f[e] == 2.5 && !b.lang.System.getProperty()[0] || f[e] == 2.2 && (!b.lang.System.getProperty()[0] && !a)))) {
          return 1;
        }
        if (!b.nonAppletDetectionOk(b.version0)) {
          if (f[e] == 2 || f[e] == 1 && !a) {
            return 1;
          }
        }
        return 0;
      }, should_Insert_Query_Any:function() {
        var b = this, a;
        for (a = 0;a < b.allowed.length;a++) {
          if (b.should_Insert_Query(a)) {
            return 1;
          }
        }
        return 0;
      }, query:function(f) {
        var j, a = this, i = a.$, d = a.$$, k = null, l = null, b = a.results, c, h, g = a.HTML[f];
        if (!g || (!g.obj() || (b[f][0] || (d.bridgeDisabled || i.dbug && d.OTF < 3)))) {
          return;
        }
        c = g.obj(true);
        h = g.readyState();
        if (!i.isIE || h === 4) {
          try {
            k = i.getNum(c.getVersion() + "");
            l = c.getVendor() + "";
            c.statusbar(i.win.loaded ? " " : " ");
          } catch (j) {
          }
          if (k && i.isStrNum(k)) {
            b[f] = [k, l];
            a.active[f] = 2;
            if (Math.abs(d.info.getPlugin2Status()) < 3) {
              try {
                if (c.Packages.A.isPlugin2()) {
                  d.info.setPlugin2Status(3);
                }
              } catch (j) {
              }
              if (Math.abs(d.info.getPlugin2Status()) < 3) {
                d.info.setPlugin2Status(-3);
              }
            }
          }
        }
      }, isRange:function(a) {
        return/^[<>]/.test(a || "") ? a.charAt(0) == ">" ? 1 : -1 : 0;
      }, setRange:function(b, a) {
        return(b ? b > 0 ? ">" : "<" : "") + (this.$.isString(a) ? a : "");
      }, insert_Query_Any:function(n) {
        var e = this, c = e.$, k = e.$$, l = e.results, m = e.HTML, g = c.DOM.altHTML, r = "A.class", o, b = c.file.getValid(k);
        if (e.should_Insert_Query(0)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          l[0] = [0, 0];
          o = n ? e.codebase.isMin(n) : e.codebase.search();
          if (o) {
            l[0][0] = n ? e.setRange(o, n) : o;
          }
          e.active[0] = o ? 1.5 : -1;
        }
        if (!b) {
          return e.getResult();
        }
        var f = b.name + b.ext, q = b.path;
        var i = ["archive", f, "code", r], j = ["mayscript", "true"], p = ["scriptable", "true", "codebase_lookup", "false"].concat(j), a = k.navigator, d = !c.isIE && (a.mimeObj && a.mimeObj.type) ? a.mimeObj.type : k.mimeType[0];
        if (!e.DummySpanTagHTML) {
          e.DummySpanTagHTML = c.DOM.insert("", [], [], g);
        }
        if (e.should_Insert_Query(1)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[1] = c.isIE ? c.DOM.insert("object", ["type", d], ["codebase", q].concat(i).concat(p), g, k) : c.DOM.insert("object", ["type", d], ["codebase", q].concat(i).concat(p), g, k);
          l[1] = [0, 0];
          e.query(1);
        }
        if (e.should_Insert_Query(2)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[2] = c.isIE ? c.DOM.insert("applet", ["alt", g].concat(j).concat(i), ["codebase", q].concat(p), g, k) : c.DOM.insert("applet", ["codebase", q, "alt", g].concat(j).concat(i), [].concat(p), g, k);
          l[2] = [0, 0];
          e.query(2);
        }
        if (e.should_Insert_Query(3)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[3] = c.isIE ? c.DOM.insert("object", ["classid", k.classID], ["codebase", q].concat(i).concat(p), g, k) : c.DOM.insert();
          l[3] = [0, 0];
          e.query(3);
        }
        if (c.DOM.isEnabled.objectTag()) {
          if (!e.DummyObjTagHTML && (m[1] || m[2])) {
            e.DummyObjTagHTML = c.DOM.insert("object", ["type", k.mimeType_dummy], [], g);
          }
          if (!e.DummyObjTagHTML2 && m[3]) {
            e.DummyObjTagHTML2 = c.DOM.insert("object", ["classid", k.classID_dummy], [], g);
          }
        }
        var h = k.NOTF;
        if (k.OTF < 3 && h.shouldContinueQuery()) {
          k.OTF = 3;
          h.onIntervalQuery = c.handler(h.$$onIntervalQuery, h);
          if (!c.win.loaded) {
            c.win.funcs0.push([h.winOnLoadQuery, h]);
          }
          setTimeout(h.onIntervalQuery, h.intervalLength);
        }
        return e.getResult();
      }}, NOTF:{$:1, count:0, countMax:25, intervalLength:250, shouldContinueQuery:function() {
        var f = this, e = f.$, c = f.$$, b = c.applet, a, d = 0;
        if (e.win.loaded && f.count > f.countMax) {
          return 0;
        }
        for (a = 0;a < b.results.length;a++) {
          if (b.HTML[a]) {
            if (!e.win.loaded && (f.count > f.countMax && e.codebase.checkGarbage(b.HTML[a].span))) {
              d = 1;
              b.HTML[a].DELETE = 1;
            }
            if (!d && (!b.results[a][0] && ((b.allowed[a] >= 2 || b.allowed[a] == 1 && !b.getResult()[0]) && f.isAppletActive(a) >= 0))) {
              return 1;
            }
          }
        }
        return 0;
      }, isJavaActive:function(d) {
        var f = this, c = f.$$, a, b, e = -9;
        for (a = 0;a < c.applet.HTML.length;a++) {
          b = f.isAppletActive(a, d);
          if (b > e) {
            e = b;
          }
        }
        return e;
      }, isAppletActive:function(e, g) {
        var h = this, f = h.$, b = h.$$, l = b.navigator, a = b.applet, i = a.HTML[e], d = a.active, k, c = 0, j, m = d[e];
        if (g || (m >= 1.5 || (!i || !i.span))) {
          return m;
        }
        j = f.DOM.getTagStatus(i, a.DummySpanTagHTML, a.DummyObjTagHTML, a.DummyObjTagHTML2, h.count);
        for (k = 0;k < d.length;k++) {
          if (d[k] > 0) {
            c = 1;
          }
        }
        if (j != 1) {
          m = j;
        } else {
          if (f.isIE || (b.version0 && (l.javaEnabled() && (l.mimeObj && (i.tagName == "object" || c))) || b.lang.System.getProperty()[0])) {
            m = 1;
          } else {
            m = 0;
          }
        }
        d[e] = m;
        return m;
      }, winOnLoadQuery:function(c, d) {
        var b = d.$$, a;
        if (b.OTF == 3) {
          a = d.queryAllApplets();
          d.queryCompleted(a);
        }
      }, $$onIntervalQuery:function(d) {
        var c = d.$, b = d.$$, a;
        if (b.OTF == 3) {
          a = d.queryAllApplets();
          if (!d.shouldContinueQuery()) {
            d.queryCompleted(a);
          }
        }
        d.count++;
        if (b.OTF == 3) {
          setTimeout(d.onIntervalQuery, d.intervalLength);
        }
      }, queryAllApplets:function() {
        var f = this, e = f.$, d = f.$$, c = d.applet, b, a;
        for (b = 0;b < c.results.length;b++) {
          c.query(b);
        }
        a = c.getResult();
        return a;
      }, queryCompleted:function(c) {
        var g = this, f = g.$, e = g.$$, d = e.applet, b;
        if (e.OTF >= 4) {
          return;
        }
        e.OTF = 4;
        var a = g.isJavaActive();
        for (b = 0;b < d.HTML.length;b++) {
          if (d.HTML[b] && d.HTML[b].DELETE) {
            f.DOM.emptyNode(d.HTML[b].span);
            d.HTML[b].span = null;
          }
        }
        e.setPluginStatus(c[0], c[1], 0);
        if (e.funcs) {
          f.callArray(e.funcs);
        }
        if (f.DOM) {
          f.DOM.onDoneEmptyDiv();
        }
      }}, zz:0}, flash:{$:1, mimeType:"application/x-shockwave-flash", progID:"ShockwaveFlash.ShockwaveFlash", classID:"clsid:D27CDB6E-AE6D-11CF-96B8-444553540000", getVersion:function() {
        var b = function(i) {
          if (!i) {
            return null;
          }
          var e = /[\d][\d\,\.\s]*[rRdD]{0,1}[\d\,]*/.exec(i);
          return e ? e[0].replace(/[rRdD\.]/g, ",").replace(/\s/g, "") : null;
        };
        var j = this, g = j.$, k, h, l = null, c = null, a = null, f, m, d;
        if (!g.isIE) {
          m = g.hasMimeType(j.mimeType);
          if (m && g.DOM.isEnabled.objectTag()) {
            f = g.DOM.insert("object", ["type", j.mimeType], [], "", j).obj();
            try {
              l = g.getNum(f.GetVariable("$version"));
            } catch (k) {
            }
          }
          if (!l) {
            d = m ? m.enabledPlugin : null;
            if (d && d.description) {
              l = b(d.description);
            }
            if (l) {
              l = g.getPluginFileVersion(d, l);
            }
          }
        } else {
          for (h = 15;h > 2;h--) {
            c = g.getAXO(j.progID + "." + h);
            if (c) {
              a = h.toString();
              break;
            }
          }
          if (!c) {
            c = g.getAXO(j.progID);
          }
          if (a == "6") {
            try {
              c.AllowScriptAccess = "always";
            } catch (k) {
              return "6,0,21,0";
            }
          }
          try {
            l = b(c.GetVariable("$version"));
          } catch (k) {
          }
          if (!l && a) {
            l = a;
          }
        }
        j.installed = l ? 1 : -1;
        j.version = g.formatNum(l);
        return true;
      }}, windowsmediaplayer:{$:1, mimeType:["application/x-mplayer2", "application/asx", "application/x-ms-wmp"], navPluginObj:null, progID:"WMPlayer.OCX", classID:"clsid:6BF52A52-394A-11D3-B153-00C04F79FAA6", INSTALLED:{dfault:null, inputMime:{}}, getVersion:function(i, g) {
        var c = this, f = c.$, l, e = null, h = null, j = c.mimeType, k = "Totem|VLC", b, d, a;
        c.installed = -1;
        if (f.isString(g)) {
          g = g.replace(/\s/g, "");
          if (g) {
            j = g;
          }
        } else {
          g = null;
        }
        if (g) {
          d = c.INSTALLED.inputMime[g];
          if (f.isDefined(d)) {
            c.installed = d;
            return;
          }
        } else {
          d = c.INSTALLED.dfault;
          if (d !== null) {
            c.installed = d;
            return;
          }
        }
        if (!f.isIE) {
          if (f.OS < 20 && f.OS >= 3) {
            c.installed = -1;
            return;
          }
          a = {wmp:"Windows\\s*Media\\s*Player.*Plug-?in|Flip4Mac.*Windows\\s*Media.*Plug-?in", wmpFirefox:"Windows\\s*Media\\s*Player.*Firefox.*Plug-?in", avoidPlayers:"Totem|VLC|RealPlayer"};
          if (c.getVersionDone === null) {
            c.getVersionDone = 0;
            e = f.getMimeEnabledPlugin(c.mimeType, a.wmp, a.avoidPlayers);
            if (!g) {
              l = e;
            }
            if (!e && f.hasMimeType(c.mimeType)) {
              e = f.findNavPlugin(a.wmp, 0, a.avoidPlayers);
            }
            if (e) {
              c.navPluginObj = e;
              b = f.isGecko && f.compareNums(f.verGecko, f.formatNum("1.8")) < 0;
              b = b || f.isOpera && f.verOpera < 10;
              b = b || f.isChrome;
              if (f.DOM.isEnabled.objectTag() && (!b && f.getMimeEnabledPlugin(c.mimeType[2], a.wmpFirefox, a.avoidPlayers))) {
                h = f.getPROP(f.DOM.insert("object", ["type", c.mimeType[2], "data", ""], ["src", ""], "", c).obj(), "versionInfo") || h;
              }
            }
          } else {
            h = c.version;
          }
          if (!f.isDefined(l)) {
            l = f.getMimeEnabledPlugin(j, a.wmp, a.avoidPlayers);
          }
          c.installed = l && h ? 1 : l ? 0 : c.navPluginObj ? -0.2 : -1;
        } else {
          e = f.getAXO(c.progID);
          h = f.getPROP(e, "versionInfo") || h;
          c.installed = e && h ? 1 : e ? 0 : -1;
        }
        if (!c.version) {
          c.version = f.formatNum(h);
        }
        if (g) {
          c.INSTALLED.inputMime[g] = c.installed;
        } else {
          c.INSTALLED.dfault = c.installed;
        }
      }}, silverlight:{$:1, mimeType:"application/x-silverlight", progID:"AgControl.AgControl", digits:[20, 20, 9, 12, 31], getVersion:function() {
        var e = this, c = e.$, k = document, i = null, b = null, f = null, h = true, a = [1, 0, 1, 1, 1], r = [1, 0, 1, 1, 1], j = function(d) {
          return(d < 10 ? "0" : "") + d.toString();
        }, n = function(s, d, u, v, t) {
          return s + "." + d + "." + u + j(v) + j(t) + ".0";
        }, o = function(s, d, t) {
          return q(s, d == 0 ? t : r[0], d == 1 ? t : r[1], d == 2 ? t : r[2], d == 3 ? t : r[3], d == 4 ? t : r[4]);
        }, q = function(v, t, s, x, w, u) {
          var u;
          try {
            return v.IsVersionSupported(n(t, s, x, w, u));
          } catch (u) {
          }
          return false;
        };
        if (!c.isIE) {
          var g;
          if (c.hasMimeType(e.mimeType)) {
            g = c.isGecko && c.compareNums(c.verGecko, c.formatNum("1.6")) <= 0;
            if (c.isGecko && g) {
              h = false;
            }
            f = c.findNavPlugin("Silverlight.*Plug-?in", 0);
            if (f && f.description) {
              i = c.formatNum(f.description);
            }
            if (i) {
              r = i.split(c.splitNumRegx);
              if (parseInt(r[2], 10) >= 30226 && parseInt(r[0], 10) < 2) {
                r[0] = "2";
              }
              i = r.join(",");
            }
          }
          e.installed = f && (h && i) ? 1 : f && h ? 0 : f ? -0.2 : -1;
        } else {
          b = c.getAXO(e.progID);
          var m, l, p;
          if (b && q(b, a[0], a[1], a[2], a[3], a[4])) {
            for (m = 0;m < e.digits.length;m++) {
              p = r[m];
              for (l = p + (m == 0 ? 0 : 1);l <= e.digits[m];l++) {
                if (o(b, m, l)) {
                  h = true;
                  r[m] = l;
                } else {
                  break;
                }
              }
              if (!h) {
                break;
              }
            }
            if (h) {
              i = n(r[0], r[1], r[2], r[3], r[4]);
            }
          }
          e.installed = b && (h && i) ? 1 : b && h ? 0 : b ? -0.2 : -1;
        }
        e.version = c.formatNum(i);
      }}, adobereader:{$:1, setPluginStatus:function() {
        var d = this, b = d.$, a = d.navPlugin.detected, e = d.navPlugin.version, g = d.axo.detected, c = d.axo.version, i = d.doc.detected, h = d.doc.version, f = e || (c || (h || null));
        d.installed = f ? 1 : a > 0 || (g > 0 || i > 0) ? 0 : i == -0.5 ? -0.15 : b.isIE && (!b.ActiveXEnabled || b.ActiveXFilteringEnabled) ? -1.5 : -1;
        d.version = b.formatNum(f);
      }, getVersion:function(c, e) {
        var a = this, d = a.$, b = 0;
        if ((!b || d.dbug) && a.navPlugin.query().detected > 0) {
          b = 1;
        }
        if ((!b || d.dbug) && a.axo.query().detected > 0) {
          b = 1;
        }
        if ((!b || d.dbug) && (a.doc.query().detected > 0 || a.doc.detected == -0.5)) {
          b = 1;
        }
        a.setPluginStatus();
      }, navPlugin:{$:1, detected:0, version:null, mimeType:"application/pdf", isDisabled:function() {
        var c = this, b = c.$, a = c.$$;
        return b.isIE || (c.detected || !b.hasMimeType(c.mimeType)) ? 1 : 0;
      }, attempt3:function() {
        var c = this, b = c.$, a = null;
        if (b.OS == 1) {
          if (b.hasMimeType("application/vnd.adobe.pdfxml")) {
            a = "9";
          } else {
            if (b.hasMimeType("application/vnd.adobe.x-mars")) {
              a = "8";
            } else {
              if (b.hasMimeType("application/vnd.adobe.xfdf")) {
                a = "6";
              }
            }
          }
        }
        return a;
      }, query:function() {
        var d = this, c = d.$, a = d.$$, f, e, b = null;
        if (d.isDisabled()) {
          return d;
        }
        f = "Adobe.*PDF.*Plug-?in|Adobe.*Acrobat.*Plug-?in|Adobe.*Reader.*Plug-?in";
        e = c.findNavPlugin(f, 0);
        d.detected = e ? 1 : -1;
        if (e) {
          b = c.getNum(e.description) || c.getNum(e.name);
          b = c.getPluginFileVersion(e, b);
          if (!b) {
            b = d.attempt3();
          }
        }
        if (b) {
          d.version = b;
        }
        return d;
      }}, pluginQuery:function(j) {
        var f = this, d = f.$, b = "", h = null, g, a, i, c;
        try {
          if (j) {
            b = j.GetVersions();
          }
        } catch (g) {
        }
        if (b && d.isString(b)) {
          a = /=\s*([\d\.]+)/g;
          for (i = 0;i < 30;i++) {
            if (a.test(b)) {
              c = d.formatNum(RegExp.$1);
              if (!h || d.compareNums(c > h) > 0) {
                h = c;
              }
            } else {
              break;
            }
          }
        }
        return h;
      }, axo:{$:1, detected:0, version:null, progID:["AcroPDF.PDF", "AcroPDF.PDF.1", "PDF.PdfCtrl", "PDF.PdfCtrl.5", "PDF.PdfCtrl.1"], isDisabled:function() {
        var b = this, c = b.$, a = b.$$;
        return c.isIE && !b.detected ? 0 : 1;
      }, query:function() {
        var d = this, e = d.$, b = d.$$, f = 0, c = null, a;
        if (d.isDisabled()) {
          return d;
        }
        for (a = 0;a < d.progID.length;a++) {
          f = e.getAXO(d.progID[a]);
          if (f) {
            d.detected = 1;
            c = b.pluginQuery(f);
            if (!e.dbug && c) {
              break;
            }
          }
        }
        d.version = c ? c : null;
        if (d.detected === 0) {
          d.detected = -1;
        }
        return d;
      }}, doc:{$:1, detected:0, version:null, classID:"clsid:CA8A9780-280D-11CF-A24D-444553540000", classID_dummy:"clsid:CA8A9780-280D-11CF-A24D-BA9876543210", DummySpanTagHTML:0, HTML:0, DummyObjTagHTML1:0, DummyObjTagHTML2:0, isDisabled:function() {
        var c = this, b = c.$, a = 0;
        if (c.detected) {
          a = 1;
        } else {
          if (b.dbug) {
          } else {
            if (!b.isIE || !b.DOM.isEnabled.objectTag()) {
              a = 1;
            }
          }
        }
        return a;
      }, query:function() {
        var i = this, d = i.$, f = i.$$, h = null, a = d.DOM.altHTML, g = null, c = 1, e = 1, b;
        if (i.isDisabled()) {
          return i;
        }
        if (!i.DummySpanTagHTML) {
          i.DummySpanTagHTML = d.DOM.insert("", [], [], a, f, e);
        }
        if (!i.HTML) {
          i.HTML = d.DOM.insert("object", ["classid", i.classID], [], a, f, e);
        }
        if (!i.DummyObjTagHTML2) {
          i.DummyObjTagHTML2 = d.DOM.insert("object", ["classid", i.classID_dummy], [], a, f, e);
        }
        b = d.DOM.getTagStatus(i.HTML, i.DummySpanTagHTML, i.DummyObjTagHTML1, i.DummyObjTagHTML2, g, c);
        h = f.pluginQuery(i.HTML.obj());
        i.detected = b > 0 || h ? 1 : b == -0.1 || b == -0.5 ? -0.5 : -1;
        i.version = h ? h : null;
        return i;
      }}}, realplayer:{$:1, mimeType:["audio/x-pn-realaudio-plugin"], progID:["rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "RealPlayer"], classID:"clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA", INSTALLED:{}, q1:[[11, 0, 0], [999], [663], [663], [663], [660], [468], [468], [468], [468], [468], [468], [431], [431], [431], [372], [180], [180], [172], [172], [167], [114], [0]], q3:[[6, 
      0], [12, 99], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 46], [12, 46], [12, 46], [11, 3006], [11, 2806], [11, 2806], [11, 2804], [11, 2804], [11, 2799], [11, 2749], [11, 2700]], compare:function(g, f) {
        var e, d = g.length, i = f.length, c, h;
        for (e = 0;e < Math.max(d, i);e++) {
          c = e < d ? g[e] : 0;
          h = e < i ? f[e] : 0;
          if (c > h) {
            return 1;
          }
          if (c < h) {
            return-1;
          }
        }
        return 0;
      }, convertNum:function(a, f, e) {
        var g = this, c = g.$, d, b, h, i = null;
        if (!a || !(d = c.formatNum(a))) {
          return i;
        }
        d = d.split(c.splitNumRegx);
        for (h = 0;h < d.length;h++) {
          d[h] = parseInt(d[h], 10);
        }
        if (g.compare(d.slice(0, Math.min(f[0].length, d.length)), f[0]) != 0) {
          return i;
        }
        b = d.length > f[0].length ? d.slice(f[0].length) : [];
        if (g.compare(b, f[1]) > 0 || g.compare(b, f[f.length - 1]) < 0) {
          return i;
        }
        for (h = f.length - 1;h >= 1;h--) {
          if (h == 1) {
            break;
          }
          if (g.compare(f[h], b) == 0 && g.compare(f[h], f[h - 1]) == 0) {
            break;
          }
          if (g.compare(b, f[h]) >= 0 && g.compare(b, f[h - 1]) < 0) {
            break;
          }
        }
        return e[0].join(".") + "." + e[h].join(".");
      }, getVersion:function(m, n) {
        var j = this, k = null, c = 0, g = 0, d = j.$, q, i, s, a = j.mimeType[0];
        if (d.isString(n)) {
          n = n.replace(/\s/g, "");
          if (n) {
            a = n;
          }
        } else {
          n = null;
        }
        if (d.isDefined(j.INSTALLED[a])) {
          j.installed = j.INSTALLED[a];
          return;
        }
        if (!d.isIE) {
          var l = "RealPlayer.*Plug-?in", h = d.hasMimeType(j.mimeType), o = d.findNavPlugin(l, 0);
          if (h && o) {
            c = 1;
            if (n) {
              if (d.getMimeEnabledPlugin(n, l)) {
                g = 1;
              } else {
                g = 0;
              }
            } else {
              g = 1;
            }
          }
          if (j.getVersionDone !== 0) {
            j.getVersionDone = 0;
            if (h) {
              var p = 1, b = null, r = null;
              s = d.hasMimeType("application/vnd.rn-realplayer-javascript");
              if (s) {
                b = d.formatNum(d.getNum(s.enabledPlugin.description));
              }
              if (d.OS == 1 && b) {
                var f = b.split(d.splitNumRegx);
                r = true;
                if (j.compare(f, [6, 0, 12, 200]) < 0) {
                  r = false;
                } else {
                  if (j.compare(f, [6, 0, 12, 1739]) <= 0 && j.compare(f, [6, 0, 12, 857]) >= 0) {
                    r = false;
                  }
                }
              }
              if (r === false) {
                p = 0;
              }
              if (d.OS <= 2) {
                if (d.isGecko && d.compareNums(d.verGecko, d.formatNum("1,8")) < 0) {
                  p = 0;
                }
                if (d.isChrome) {
                  p = 0;
                }
                if (d.isOpera && d.verOpera < 10) {
                  p = 0;
                }
              } else {
                p = 0;
              }
              if (p && d.DOM.isEnabled.objectTag()) {
                s = d.DOM.insert("object", ["type", j.mimeType[0]], ["src", "", "autostart", "false", "imagestatus", "false", "controls", "stopbutton"], "", j).obj();
                try {
                  k = d.getNum(s.GetVersionInfo());
                } catch (q) {
                }
                d.DOM.setStyle(s, ["display", "none"]);
              }
              if (!k && (b && r === false)) {
                s = j.convertNum(b, j.q3, j.q1);
                k = s ? s : b;
              }
            }
          } else {
            k = j.version;
          }
          j.installed = c && (g && k) ? 1 : c && g ? 0 : c ? -0.2 : -1;
        } else {
          s = null;
          for (i = 0;i < j.progID.length;i++) {
            s = d.getAXO(j.progID[i]);
            if (s) {
              try {
                k = d.getNum(s.GetVersionInfo());
                break;
              } catch (q) {
              }
            }
          }
          j.installed = k ? 1 : -1;
        }
        if (!j.version) {
          j.version = d.formatNum(k);
        }
        j.INSTALLED[a] = j.installed;
      }}, zz:0}};
    })();
  })();
  (function() {
    (function() {
      var dateFormat = {}, dateParse = Date.parse;
      dateFormat.parsers = [function(date) {
        var found = date.match(/^(\d{4})-(\d{2})-(\d{2})(?:[\sT](\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[1], found[2] - 1, found[3], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{4})\/(\d{2})\/(\d{2})(?: (\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[1], found[2] - 1, found[3], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{2})\.(\d{2})\.(\d{4})(?: (\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[3], found[2] - 1, found[1], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{1,2}):(\d{2})(?::(\d{2}))? (\d{2})\.(\d{2})\.(\d{4})$/);
        if (found !== null) {
          return new Date(found[6], found[5] - 1, found[4], found[1], found[2], found[3] || 0);
        }
        return null;
      }];
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, timezoneClip = /[^-+\dA-Z]/g, pad = function(val, len) {
        val = String(val);
        len = len || 2;
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      };
      HM.define("hm.core.Date", {});
      hm.core.Date.getServerTime = function(dt) {
        return new Date(dt - HM.clientInitTime + HM.serverInitTime);
      };
      hm.core.Date.parse = function(date) {
        if (date instanceof Date) {
          return date;
        }
        if (typeof date === "number") {
          return new Date(date * 1E3);
        }
        if (date instanceof String) {
          date = date.toString();
        }
        if (typeof date !== "string") {
          return NaN;
        }
        var parsers = dateFormat.parsers, dtTest = null;
        for (var i = 0, ln = parsers.length;i < ln;i++) {
          dtTest = parsers[i](date);
          if (dtTest !== null) {
            break;
          }
        }
        if (!dtTest) {
          return new Date(dateParse.call(Date, date));
        }
        return dtTest || NaN;
      };
      hm.core.Date.format = function(date, mask, utc) {
        var dF = dateFormat;
        if (arguments.length == 1 && (date instanceof String && !/\d/.test(date))) {
          mask = date;
          date = undefined;
        }
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) {
          return "Invalid Date";
        }
        mask = String(dF.masks[mask] || (mask || dF.masks["default"]));
        if (mask.slice(0, 4) == "UTC:") {
          mask = mask.slice(4);
          utc = true;
        }
        var _ = utc ? "getUTC" : "get", d = date[_ + "Date"](), D = date[_ + "Day"](), m = date[_ + "Month"](), y = date[_ + "FullYear"](), H = date[_ + "Hours"](), M = date[_ + "Minutes"](), s = date[_ + "Seconds"](), L = date[_ + "Milliseconds"](), o = utc ? 0 : date.getTimezoneOffset(), flags = {d:d, dd:pad(d), ddd:dF.i18n.dayNames[D], dddd:dF.i18n.dayNames[D + 7], m:m + 1, mm:pad(m + 1), mmm:dF.i18n.monthNames[m], mmmm:dF.i18n.monthNames[m + 12], yy:String(y).slice(2), yyyy:y, h:H % 12 || 12, 
        hh:pad(H % 12 || 12), H:H, HH:pad(H), M:M, MM:pad(M), s:s, ss:pad(s), l:pad(L, 3), L:pad(L > 99 ? Math.round(L / 10) : L), t:H < 12 ? "a" : "p", tt:H < 12 ? "am" : "pm", T:H < 12 ? "A" : "P", TT:H < 12 ? "AM" : "PM", Z:utc ? "UTC" : (dateFormat.toString.call(date).match(timezone) || [""]).pop().replace(timezoneClip, ""), o:(o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4), S:["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]};
        return mask.replace(token, function($0) {
          return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
      };
      hm.core.Date.getToday = function() {
        var today = new Date;
        today.setHours(0, 0, 0, 0);
        return today;
      };
      hm.core.Date.getTomorrow = function() {
        var tomorrow = this.getToday();
        tomorrow.setDate(tomorrow.getDate() + 1);
        return tomorrow;
      };
      dateFormat.masks = {"default":"yyyy-mm-dd HH:MM:ss.l", shortDate:"m/d/yy", mediumDate:"mmm d, yyyy", longDate:"mmmm d, yyyy", fullDate:"dddd, mmmm d, yyyy", shortTime:"h:MM TT", mediumTime:"h:MM:ss TT", longTime:"h:MM:ss TT Z", isoDate:"yyyy-mm-dd", isoTime:"HH:MM:ss", isoDateTime:"yyyy-mm-dd'T'HH:MM:ss", isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};
      dateFormat.i18n = {dayNames:["\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431", "\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435", "\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", "\u0412\u0442\u043e\u0440\u043d\u0438\u043a", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043e\u0442\u0430"], 
      monthNames:["\u042f\u043d\u0432", "\u0424\u0435\u0432", "\u041c\u0430\u0440", "\u0410\u043f\u0440", "\u041c\u0430\u0439", "\u0418\u044e\u043d", "\u0418\u044e\u043b", "\u0410\u0432\u0433", "\u0421\u0435\u043d", "\u041e\u043a\u0442", "\u041d\u043e\u044f", "\u0414\u0435\u043a", "\u042f\u043d\u0432\u0430\u0440\u044c", "\u0424\u0435\u0432\u0440\u0430\u043b\u044c", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0435\u043b\u044c", "\u041c\u0430\u0439", "\u0418\u044e\u043d\u044c", "\u0418\u044e\u043b\u044c", 
      "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u041e\u043a\u0442\u044f\u0431\u0440\u044c", "\u041d\u043e\u044f\u0431\u0440\u044c", "\u0414\u0435\u043a\u0430\u0431\u0440\u044c"]};
      hm.core.Date.getMonthNames = function() {
        var rusMonthNames = dateFormat.i18n.monthNames.slice(12, 24), result = [];
        for (var i = 0, ln = rusMonthNames.length;i < ln;i++) {
          result.push(HM._(rusMonthNames[i]));
        }
        return result;
      };
    })();
  })();
  (function() {
    HM.define("hm.core.Url", {url:function(cfg) {
      if (!cfg.module) {
        throw Error("\u0414\u043b\u044f url \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u043c\u043e\u0434\u0443\u043b\u044c");
      }
      if (!cfg.controller) {
        cfg.controller = "index";
      }
      if (!cfg.action) {
        cfg.action = "index";
      }
      var module = cfg.module, controller = cfg.controller, action = cfg.action, app = cfg.app;
      var url = "", additionalParams = "";
      for (var i in cfg) {
        if (!cfg.hasOwnProperty(i) || (i == "app" || (i == "module" || (i == "controller" || i == "action")))) {
          continue;
        }
        additionalParams += "/" + encodeURI(i) + "/" + encodeURI(cfg[i]);
      }
      if (app) {
        url += "/" + app;
      }
      if (controller === "index" && (action === "index" && (module && additionalParams === ""))) {
        url += "/" + encodeURI(module);
      } else {
        url += "/" + encodeURI(module) + "/" + encodeURI(controller) + "/" + encodeURI(action);
      }
      url += additionalParams;
      return url;
    }});
    HM.singleton(hm.core.Url);
  })();
  (function() {
    HM.define("hm.core.BaseService", {});
    (function() {
      var serviceList = {}, services = {};
      hm.core.BaseService.get = function(serviceName) {
        if (!serviceList.hasOwnProperty(serviceName)) {
          serviceList[serviceName] = "hm.module." + serviceName.toLowerCase() + ".service." + serviceName + "Service";
        }
        if (!services.hasOwnProperty(serviceName)) {
          services[serviceName] = HM.create(serviceList[serviceName]);
        }
        return services[serviceName];
      };
      hm.core.BaseService.registerServices = function(services) {
        for (var serviceCode in services) {
          if (!services.hasOwnProperty(serviceCode)) {
            continue;
          }
          serviceList[serviceCode] = services[serviceCode];
        }
      };
    })();
  })();
  (function() {
    HM.define("hm.core.Application", {CORE_DISABLE_AJAX_SPINNER:false, CORE_DISABLE_DEBUG_PANEL:false, CORE_DISABLE_NEW_GRID:true, ES_DISABLE_EVENT_TOOLBAR:false, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._registerServices();
      this._initNow();
      $(this._initOnReady.bind(this));
    }, _registerServices:function() {
      hm.core.BaseService.registerServices({EventService:"hm.module.es.service.EventServiceService", CourseLesson:"hm.module.course.service.lesson.LessonService", CourseMaterialService:"hm.module.course.service.material.MaterialService"});
    }, _initNow:function() {
      this._initAjaxSpinner();
    }, _initOnReady:function() {
      this._initEventToolbar();
      this._initDebugPanel();
      this._initGrid();
    }, _initAjaxSpinner:function() {
      if (this.CORE_DISABLE_AJAX_SPINNER) {
        return;
      }
      hm.module.base.ui.ajax.AjaxSpinner.getInstance();
    }, _initEventToolbar:function() {
      if (this.ES_DISABLE_EVENT_TOOLBAR) {
        return;
      }
      if (HM.getService("User").isGuest()) {
        return;
      }
      HM.create("hm.module.es.ui.event.toolbar.EventToolbar");
    }, _initDebugPanel:function() {
      if (this.CORE_DISABLE_DEBUG_PANEL) {
        return;
      }
      if (!hm.debugAllowed) {
        return;
      }
      HM.$document().on("keydown", function(e) {
        if (!(e.altKey && (e.ctrlKey && (e.shiftKey && e.keyCode === 68)))) {
          return;
        }
        HM.require("hm.module.develop.ui.panel.DevPanel").getInstance().show();
      });
    }, _initGrid:function() {
      if (this.CORE_DISABLE_NEW_GRID) {
        return;
      }
      HM.create("hm.core.ui.grid.Grid");
    }});
  })();
  (function() {
    HM.define("hm.module.blog.service.BlogService", {extend:"hm.core.BaseService", viewBlog:function(blog_id, subject_id) {
      location.href = this.getViewBlogUrl(blog_id, subject_id);
    }, getViewBlogUrl:function(blog_id, subject_id) {
      return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"view", subject_id:subject_id ? subject_id : 0, blog_id:blog_id});
    }, getBlogListUrl:function(subject_id, subject) {
      if (arguments.length === 0) {
        return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"index"});
      }
      return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"index", subject_id:subject_id, subject:subject || "subject"});
    }});
  })();
  (function() {
    HM.define("hm.module.course.service.CourseService", {extend:"hm.core.BaseService", getListOfGraduatedCoursesUrl:function() {
      return hm.core.Url.getInstance().url({module:"subject", controller:"list", action:"list", "list-switcher":"past"});
    }, showGraduatedCourses:function() {
      location.href = this.getListOfGraduatedCoursesUrl();
    }});
  })();
  (function() {
    HM.define("hm.module.course.service.lesson.LessonService", {extend:"hm.core.BaseService", viewLesson:function(lesson_id, subject_id) {
      location.href = this.getLessonUrl(lesson_id, subject_id);
    }, getLessonUrl:function(lesson_id, subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"execute", action:"index", subject_id:subject_id, lesson_id:lesson_id});
    }, getLessonListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"list", action:"index", subject_id:subject_id});
    }, getMyLessonsListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"list", action:"my", subject_id:subject_id});
    }});
  })();
  (function() {
	HM.define("hm.module.course.service.material.MaterialService", {extend:"hm.core.BaseService", getListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"subject", controller:"materials", action:"index", subject_id:subject_id});
    }});
  })();
  (function() {    
    HM.define("hm.module.motivationmessage.service.MotivationMessageService", {extend:"hm.core.BaseService", getListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"subject", controller:"message", action:"motivation", subject_id:subject_id});
    }});
  })();
  (function() {    
    HM.define("hm.module.courseaddmessage.service.CourseAddMessageService", {extend:"hm.core.BaseService", getListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"subject", controller:"interview", action:"list", subject_id:subject_id});
    }});
  })();
  (function() {
    HM.define("hm.module.forum.service.ForumService", {extend:"hm.core.BaseService", viewForum:function(section_id, forum_id) {
      location.href = this.getViewForumUrl(section_id, forum_id);
    }, viewInternalForumUrl:function(subject_id, section_id) {
      location.href = this.getViewInternalForumUrl(subject_id, section_id);
    }, getViewForumUrl:function(section_id, forum_id) {
      var url = hm.core.Url.getInstance().url({module:"forum"});
      url += "/" + forum_id + "/" + section_id;
      return url;
    }, getViewInternalForumUrl:function(subject_id, section_id) {
      var url = hm.core.Url.getInstance().url({module:"forum"});
      url += "/subject/subject/" + subject_id + "/" + section_id;
      return url;
    }});
  })();
  (function() {
    HM.define("hm.module.message.service.MessageService", {extend:"hm.core.BaseService", viewMessage:function(message_id) {
      HM.create("hm.ui.message.ViewMessageDialog", {message_id:message_id});
    }, viewMessageList:function() {
      location.href = this.getMessageListUrl();
    }, getMessageListUrl:function() {
      return hm.core.Url.getInstance().url({module:"message", controller:"view", action:"index"});
    }, getViewMessageUrl:function(message_id) {
      return hm.core.Url.getInstance().url({module:"message", controller:"view", action:"one", message_id:message_id});
    }});
  })();
  (function() {
    HM.define("hm.module.user.service.UserService", {extend:"hm.core.BaseService", __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._data = $("html").data("user") || {};
    }, getUserId:function() {
      if (this._data.id) {
        return this._data.id - 0;
      }
      return false;
    }, isGuest:function() {
      return this.getUserId() === false;
    }, isBaseUser:function() {
      return this._data.permission === 1;
    }, getUserUrl:function(userId) {
      return hm.core.Url.getInstance().url({module:"user", controller:"list", action:"view", user_id:userId});
    }});
  })();
  (function() {
    HM.define("hm.module.wiki.service.WikiService", {extend:"hm.core.BaseService", viewPage:function(page_id, subject_id, subject) {
      location.href = this.getPageUrl(page_id, subject_id, subject);
    }, getPageUrl:function(page_id, subject_id, subject) {
      var urlData = {module:"wiki", controller:"index", action:"view", id:page_id};
      if (subject_id) {
        urlData["subject_id"] = subject_id;
        urlData["subject"] = subject || "subject";
      }
      return hm.core.Url.getInstance().url(urlData);
    }});
  })();
  (function() {
    HM.define("hm.core.Cookie", {statics:{get:function(name) {
      var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
      return matches ? decodeURIComponent(matches[1]) : undefined;
    }, set:function(name, value, options) {
      options = options || {};
      var expires = options.expires;
      if (typeof expires == "number" && expires) {
        var d = new Date;
        d.setTime(d.getTime() + expires * 1E3);
        expires = options.expires = d;
      }
      if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
      }
      value = encodeURIComponent(value);
      var updatedCookie = name + "=" + value;
      for (var propName in options) {
        updatedCookie += "; " + propName;
        var propValue = options[propName];
        if (propValue !== true) {
          updatedCookie += "=" + propValue;
        }
      }
      document.cookie = updatedCookie;
    }, "delete":function(name) {
      this.set(name, "", {expires:-1});
    }}});
  })();
  (function() {
    HM.define("hm.core.Event", {config:{target:null, name:"", listeners:{}, args:[]}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._prevented = false;
    }, fire:function() {
      var listeners = this.config.listeners, args = this.config.args, lastIndex = args.length;
      args.unshift(this);
      for (var i = 0, len = listeners.length;i < len;i++) {
        var listener = listeners[i];
        args[lastIndex + 1] = listener.cfg;
        listener.fn.apply(listener.scope, args);
      }
      return this;
    }, preventDefault:function() {
      this._prevented = true;
    }, isPrevented:function() {
      return this._prevented;
    }});
  })();
  (function() {
    HM.define("hm.core.ObservableClass", {config:{listeners:null}, constructor:function(cfg) {
      var constructor = arguments.callee;
      this.__events = {};
      if (cfg && (cfg.listeners && typeof cfg.listeners === "object")) {
        this.__initListeners(cfg.listeners);
      }
      this.callParent(constructor, arguments);
    }, __destruct:function() {
      var __destruct = arguments.callee;
      this.clearEvents();
      this.callParent(__destruct, arguments);
    }, __initListeners:function(listeners) {
      var listener, scope = listeners.scope || this;
      for (var i in listeners) {
        if (!listeners.hasOwnProperty(i)) {
          continue;
        }
        if (i === "scope") {
          continue;
        }
        listener = listeners[i];
        if (typeof listener === "function") {
          this.on(i, listener, scope);
        } else {
          if (HM.isObject(listener) && typeof listener.fn === "function") {
            this.on(i, listener.fn, listener.scope || scope, listener.data);
          }
        }
      }
    }, fireEvent:function(eventName) {
      var events = this.__events, eventListeners, event;
      if (!events) {
        return null;
      }
      eventListeners = events[eventName];
      if (!eventListeners) {
        return null;
      }
      event = HM.create("hm.core.Event", {target:this, name:eventName, listeners:eventListeners, args:[].slice.call(arguments, 1)});
      return event.fire();
    }, on:function(eventName, fn, scope, cfg) {
      var events = this.__events;
      scope = scope || this;
      if (!events[eventName]) {
        events[eventName] = [];
      }
      events[eventName].push({fn:fn, scope:scope, cfg:cfg});
    }, un:function(eventName, fn, scope) {
      var events = this.__events;
      if (!events[eventName]) {
        return;
      }
      var eventListeners = events[eventName], listener;
      scope = scope || this;
      for (var i = eventListeners.length - 1;i >= 0;i--) {
        listener = eventListeners[i];
        if (listener.fn === fn && listener.scope === scope) {
          eventListeners.splice(i, 1);
        }
      }
    }, hasListeners:function() {
      return!!Object.getOwnPropertyNames(this.__events).length;
    }, clearEvents:function() {
      this.__events = {};
    }});
  })();
  (function() {
    HM.define("hm.core.Collection", {extend:"hm.core.ObservableClass", config:{data:null}, __construct:function() {
      this.models = [];
      if (this.config.data) {
        var data = this.config.data;
        for (var i = 0, ln = data.length;i < ln;i++) {
          this.add(data[i]);
        }
      }
    }, add:function(data) {
      this.models.push(HM.create("hm.core.data.Model", {data:data}));
    }, length:function() {
      return this.models.length;
    }, find:function(fieldName, value) {
      var models = this.models, ln = models.length;
      for (var i = 0;i < ln;i++) {
        if (models[i].get(fieldName) === value) {
          return models[i];
        }
      }
      return null;
    }});
  })();
  (function() {
    HM.define("hm.core.data.Model", {extend:"hm.core.ObservableClass", config:{data:null, hasMany:null, hasOne:null}, __construct:function() {
      var __construct = arguments.callee;
      this._data = this.config.data || {};
      this.callParent(__construct, arguments);
      if (this.config.hasMany) {
        var hasMany = this.config.hasMany;
        if (!(hasMany instanceof Array)) {
          hasMany = [hasMany];
        }
        for (var i = 0, ln = hasMany.length;i < ln;i++) {
          var manyCfg = hasMany[i], propertyName = manyCfg.propertyName, proxy = {type:"memory", async:false, model:manyCfg.model || "hm.core.data.Model", reader:{type:"json", dataProperty:""}};
          this._data[propertyName] = HM.create("hm.core.data.Store", {proxy:proxy, data:this._data[propertyName]});
          this._data[propertyName].on("item_changed", this._onManyChanged, this, propertyName);
        }
      }
      if (this.config.hasOne) {
        var hasOne = this.config.hasOne;
        if (!(hasOne instanceof Array)) {
          hasOne = [hasOne];
        }
        for (var i = 0, ln = hasOne.length;i < ln;i++) {
          var oneCfg = hasOne[i], propertyName = oneCfg.propertyName, modelClass = oneCfg.model || "hm.core.data.Model";
          this._data[propertyName] = HM.create(modelClass, {data:this._data[propertyName]});
          this._data[propertyName].on("change", this._onOneChanged, this, propertyName);
        }
      }
    }, get:function(name) {
      return this._data[name];
    }, set:function(name, value) {
      this._data[name] = value;
      this.fireEvent("change", name, value);
    }, getData:function() {
      return $.extend({}, this._data);
    }, _onManyChanged:function(e, store, item, name, value, propertyName) {
      this.fireEvent("change", this, propertyName, this._data[propertyName]);
    }, _onOneChanged:function(e, name, value, propertyName) {
      this.fireEvent("change", propertyName, this._data[propertyName]);
    }});
  })();
  (function() {
    HM.define("hm.module.es.data.model.EventGroupModel", {extend:"hm.core.data.Model", config:{hasMany:{model:"hm.module.es.data.model.EventModel", propertyName:"events"}}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var eventStore = this.get("events"), eventCount = eventStore.getItemsCount();
      for (var i = 0;i < eventCount;i++) {
        eventStore.getItem(i).on("change_view_state", this._onEventViewStateChange, this);
      }
    }, _onEventViewStateChange:function(e, value) {
      this.fireEvent("event_change_view_state", e.target, value);
    }});
  })();
  (function() {
    var eventModels = {};
    HM.define("hm.module.es.data.model.EventModel", {extend:"hm.core.data.Model", config:{hasOne:{model:"hm.core.data.Model", propertyName:"description", reader:{type:"json", dataProperty:""}}}, es_event_types:[{event_type_id:1, name:"forumAddMessage", event_group_type_id:2}, {event_type_id:2, name:"blogAddMessage", event_group_type_id:2}, {event_type_id:3, name:"wikiAddPage", event_group_type_id:2}, {event_type_id:4, name:"wikiModifyPage", event_group_type_id:2}, {event_type_id:5, name:"forumInternalAddMessage", 
    event_group_type_id:2}, {event_type_id:6, name:"blogInternalAddMessage", event_group_type_id:2}, {event_type_id:7, name:"wikiInternalAddPage", event_group_type_id:2}, {event_type_id:8, name:"wikiInternalModifyPage", event_group_type_id:2}, {event_type_id:9, name:"courseAddMaterial", event_group_type_id:3}, {event_type_id:10, name:"courseAttachLesson", event_group_type_id:3}, {event_type_id:11, name:"courseScoreTriggered", event_group_type_id:3}, {event_type_id:12, name:"courseTaskComplete", event_group_type_id:3}, 
    {event_type_id:13, name:"commentAdd", event_group_type_id:2}, {event_type_id:14, name:"commentInternalAdd", event_group_type_id:2}, {event_type_id:15, name:"courseTaskScoreTriggered", event_group_type_id:3}, {event_type_id:16, name:"personalMessageSend", event_group_type_id:1}], constructor:function(config) {
      var constructor = arguments.callee;
      var eventId = config.data.eventId;
      if (!eventModels.hasOwnProperty(eventId)) {
        eventModels[eventId] = this;
      } else {
        return eventModels[eventId];
      }
      return this.callParent(constructor, arguments);
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this.get("description").on("change", this._onDescriptionChange, this);
    }, getEventId:function() {
      return this.get("eventId");
    }, getEventTypeStr:function() {
      return this.get("eventTypeStr");
    }, getEventGroupId:function() {
      var eventTypeStr = this.get("eventTypeStr");
      for (var i = 0;i < this.es_event_types.length;i++) {
        var eventType = this.es_event_types[i];
        if (eventType.name === eventTypeStr) {
          return eventType.event_group_type_id;
        }
      }
    }, getEventGroup:function() {
      switch(this.getEventGroupId()) {
        case 1:
          return "personalMessages";
        case 2:
          return "discussions";
        default:
          return "notifications";
      }
    }, _onDescriptionChange:function(e, name, value) {
      if (name !== "views") {
        return;
      }
      var me = this;
      HM.getService("EventService").markEventAsViewed(this.getEventId(), function(success) {
        if (success) {
          me.fireEvent("change_view_state", value);
        }
      });
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.GraphElement", {extend:"hm.core.ObservableClass", config:{board:null, drawDelayed:true, jsxElementOptions:null, sourceData:null}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._board = this.config.board;
    }, _initEvents:function() {
    }, _onMouseOver:function(jsxElement) {
      this.on("mouseout", function(e, jsxElement) {
      });
    }, draw:function(elementCallBack) {
      if (this.config.drawDelayed) {
        var me = this;
        setTimeout(function() {
          me._draw();
          if (elementCallBack) {
            elementCallBack();
          }
        }, 0);
      } else {
        this._draw();
        if (elementCallBack) {
          elementCallBack();
        }
      }
    }, _draw:function() {
    }, addTooltip:function(tip, data) {
      this._tip = tip;
      this._tipData = data;
    }, _mouseover:function(jsxElement) {
      var tip = this._tip;
      if (tip) {
        if (!this._tooltipData) {
          this._tooltipData = tip.renderContent(this._tipData);
        } else {
          tip.setContent(this._tooltipData);
        }
        tip.show();
      }
      this.fireEvent("mouseover", jsxElement);
    }, _mouseout:function(jsxElement) {
      jsxElement.triggerEventHandlers(["mouseout", "out"]);
      jsxElement.mouseover = false;
      jsxElement.noHighlight();
      var tip = this._tip;
      if (tip) {
        setTimeout(function() {
          if (tip === hm.core.ui.tooltip.Tooltip.mouseOverTooltip) {
            return;
          }
          tip.hide();
        }, 0);
      }
      this.fireEvent("mouseout", jsxElement);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.GraphValueItem", {extend:"hm.core.ui.graph.GraphElement", config:{points:null, value:10, maxValue:null, title:"", color:"#0000ff", opacity:1, labelColor:null}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var config = this.config;
      if (config.maxValue === null) {
        config.maxValue = config.value;
      }
    }, getTitle:function() {
      return this.config.title;
    }, getValue:function() {
      return this.config.value;
    }, getPercentValue:function() {
      return Math.round(this.config.value / this.config.maxValue * 100);
    }, getAnchorPoint:function(anchorPointIndex, offset) {
      var anchorPointName = "anchorPoint_" + anchorPointIndex + "_" + offset;
      if (this._anchorPoints === undefined) {
        this._anchorPoints = {};
      }
      if (this._anchorPoints[anchorPointName] === undefined) {
        this._anchorPoints[anchorPointName] = this._getAnchorPoint(anchorPointIndex, offset);
      }
      return this._anchorPoints[anchorPointName];
    }, _getAnchorPoint:function(anchorPointIndex, offset) {
      var board = this._board, points = this.config.points;
      var sumX = 0, sumY = 0, midX = 0, midY = 0, ln = points.length;
      for (var i = 0;i < ln;i++) {
        sumX += points[i].X();
        sumY += points[i].Y();
      }
      if (sumX) {
        midX = sumX / ln;
      }
      if (sumY) {
        midY = sumY / ln;
      }
      return board.create("point", [midX, midY]);
    }, _getTextFnX:function(anchorPoint) {
      return this._getTextFn(anchorPoint, "X");
    }, _getTextFnY:function(anchorPoint) {
      return this._getTextFn(anchorPoint, "Y");
    }, _getTextFn:function(anchorPoint, axis) {
      return function() {
        if (anchorPoint[axis]()) {
          return anchorPoint[axis]();
        } else {
          if (this.visProp.visible) {
            this.hideElement();
          }
          return 0;
        }
      };
    }, _createText:function(anchorPoint, text, jsxTextOptions) {
      return this._board.create("text", [this._getTextFnX(anchorPoint), this._getTextFnY(anchorPoint), text], jsxTextOptions);
    }, _convertToMultiline:function(label, anchorPoint, text, jsxTextOptions) {
      var bbox = label.rendNode.getBBox();
      var board = this._board, words = text.split(" "), maxW = jsxTextOptions.maxBoundWidth, partsCount = bbox.width / maxW, maxLettersInRow = Math.ceil(text.length / partsCount), textRows = [], textRow = words[0];
      for (var i = 1, ln = words.length;i < ln;i++) {
        var word = words[i];
        var tempStr = textRow + " " + word;
        var isLastWord = i == ln - 1;
        if (tempStr.length >= maxLettersInRow) {
          textRows.push(textRow);
          if (isLastWord) {
            textRows.push(word);
          }
          textRow = word;
        } else {
          if (isLastWord) {
            textRows.push(tempStr);
          } else {
            textRow = tempStr;
          }
        }
      }
      var rot = board.create("transform", [function() {
        return 45 * Math.PI / 180;
      }, anchorPoint], {type:"rotate"});
      var lineHeight = jsxTextOptions.lineHeight || 10, startOffset = textRows.length / 2 * lineHeight - lineHeight / 2;
      var me = this;
      $.each(textRows, function(index) {
        var rowText = this;
        var yOffset = startOffset - lineHeight * index;
        var t = board.create("transform", [0, yOffset], {type:"translate"});
        var p = board.create("point", [anchorPoint, t]);
        rot.bindTo(p);
        rot.applyOnce(p);
        if (index == 0) {
          label.X = me._getTextFnX(p);
          label.Y = me._getTextFnY(p);
          label.setText(rowText);
        } else {
          me._createText(p, rowText, jsxTextOptions);
        }
      });
    }, addLabel:function(anchorPointIndex, offset, text, jsxTextOptions, testBounds) {
      jsxTextOptions = $.extend({anchorX:"middle", anchorY:"middle", visible:true}, jsxTextOptions);
      if (jsxTextOptions.rotate) {
        jsxTextOptions.display = "internal";
      }
      var anchorPoint = this.getAnchorPoint(anchorPointIndex, offset), label = this._createText(anchorPoint, text, jsxTextOptions), multiline = false;
      if (jsxTextOptions.display == "internal") {
        var bbox = label.rendNode.getBBox();
        if (bbox.width > jsxTextOptions.maxBoundWidth) {
          multiline = true;
          this._convertToMultiline(label, anchorPoint, text, jsxTextOptions);
        }
      }
      if (testBounds && (this._testBounds && !multiline)) {
        this._testBounds(label);
      }
      return label;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.Bar", {extend:"hm.core.ui.graph.element.GraphValueItem", config:{testBounds:false}, _draw:function() {
      var board = this._board, config = this.config;
      var polygonOptions = {borders:{strokeWidth:0, highlightStrokeWidth:0}, fillColor:config.color, highlightFillColor:config.color, fillOpacity:config.opacity, highlightFillOpacity:config.opacity, hasInnerPoints:true};
      var polygon = this._polygon = board.create("polygon", this._getBarValuePoints(), polygonOptions);
      polygon.on("mouseover", this._mouseover.bind(this, polygon));
      polygon.on("mouseout", this._mouseout.bind(this, polygon));
    }, _getPolygonBounds:function() {
      var minX, minY, maxX, maxY;
      $.each(this._polygon.vertices, function() {
        var point = this;
        if (minX > point.X() || minX === undefined) {
          minX = point.X();
        }
        if (minY > point.Y() || minY === undefined) {
          minY = point.Y();
        }
        if (point.X() > maxX || maxX === undefined) {
          maxX = point.X();
        }
        if (point.Y() > maxY || maxY === undefined) {
          maxY = point.Y();
        }
      });
      return[minX, maxY, maxX, minY];
    }, _getBarLines:function() {
      if (this._barLineTop === undefined || this._barLineBottom === undefined) {
        var points = this.config.points, board = this._board;
        this._barLineTop = board.create("line", [points[0], points[1]]);
        this._barLineBottom = board.create("line", [points[3], points[2]]);
      }
      return[this._barLineTop, this._barLineBottom];
    }, _getBarValuePoints:function() {
      if (this._barValuePoints === undefined) {
        var points = this.config.points, board = this._board, barLines = this._getBarLines(), value = this.config.value, maxValue = this.config.maxValue;
        var vectorTop = board.getVector(points[0], points[1]), vectorBottom = board.getVector(points[3], points[2]);
        var barValuePercent = value / maxValue;
        var endPointTop = board.create("glider", [points[0].X() + vectorTop.x * barValuePercent, points[0].Y() + vectorTop.y * barValuePercent, barLines[0]]), endPointBottom = board.create("glider", [points[3].X() + vectorBottom.x * barValuePercent, points[3].Y() + vectorBottom.y * barValuePercent, barLines[1]]);
        this._barValuePoints = [points[0], endPointTop, endPointBottom, points[3]];
      }
      return this._barValuePoints;
    }, _getAnchorPoint:function(anchorPointIndex, offset) {
      var board = this._board, barValuePoints = this._getBarValuePoints(), points = this.config.points, startPoint, endPoint;
      switch(anchorPointIndex) {
        case 0:
        ;
        case 2:
        ;
        case 4:
        ;
        case 6:
          startPoint = this._getMidpoint(barValuePoints);
          endPoint = barValuePoints[anchorPointIndex / 2];
          break;
        case 1:
          startPoint = this._getMidpoint(points, "bottom");
          endPoint = this._getMidpoint(barValuePoints, "top");
          break;
        case 3:
          startPoint = this._getMidpoint(points, "left");
          endPoint = this._getMidpoint(barValuePoints, "right");
          break;
        case 5:
          startPoint = this._getMidpoint(points, "top");
          endPoint = this._getMidpoint(barValuePoints, "bottom");
          break;
        case 7:
          startPoint = this._getMidpoint(points, "right");
          endPoint = this._getMidpoint(barValuePoints, "left");
          break;
        case 8:
          startPoint = this._getMidpoint(barValuePoints);
          endPoint = this._getMidpoint(barValuePoints);
          break;
      }
      return board.create("point", [function() {
        var vector = board.getVector(startPoint, endPoint);
        return endPoint.X() + vector.normalized.x * offset;
      }, function() {
        var vector = board.getVector(startPoint, endPoint);
        return endPoint.Y() + vector.normalized.y * offset;
      }]);
    }, _testBounds:function(element) {
      if (!this.config.testBounds) {
        return;
      }
      var labelBounds = element.bounds();
      var polyBounds = this._getPolygonBounds();
      if (labelBounds[2] - labelBounds[0] > polyBounds[2] - polyBounds[0]) {
        element.hideElement();
      }
      if (labelBounds[3] - labelBounds[1] < polyBounds[3] - polyBounds[1]) {
        element.hideElement();
      }
    }, _getMidpoint:function(points, edge) {
      edge = edge || "center";
      if (this._midpoints === undefined) {
        this._midpoints = {};
      }
      var midpointName = edge + "_" + points[0].name + points[1].name + points[2].name + points[3].name;
      if (this._midpoints[midpointName] === undefined) {
        var board = this._board;
        switch(edge) {
          case "top":
            this._midpoints[midpointName] = board.create("midpoint", [points[0], points[1]]);
            break;
          case "right":
            this._midpoints[midpointName] = board.create("midpoint", [points[1], points[2]]);
            break;
          case "bottom":
            this._midpoints[midpointName] = board.create("midpoint", [points[2], points[3]]);
            break;
          case "left":
            this._midpoints[midpointName] = board.create("midpoint", [points[3], points[0]]);
            break;
          case "center":
            this._midpoints[midpointName] = board.create("midpoint", [points[0], points[2]]);
            break;
        }
      }
      return this._midpoints[midpointName];
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.LinePoint", {extend:"hm.core.ui.graph.element.Bar", config:{}, _draw:function() {
      var _draw = arguments.callee;
      var board = this._board, config = this.config;
      var pointOptions = {visible:true, size:3, strokeWidth:1, highlightStrokeWidth:1, strokeColor:config.color, strokeOpacity:1, highlightStrokeColor:config.color, highlightStrokeOpacity:1, fillColor:"white", highlightFillColor:config.color, fillOpacity:1, showInfobox:false};
      var targetPoint = this._getMidpoint(this._getBarValuePoints(), "right");
      var linePoint = this._linePoint = board.create("point", [function() {
        return targetPoint.X();
      }, function() {
        return targetPoint.Y();
      }], pointOptions);
      linePoint.on("mouseover", this._mouseover.bind(this, linePoint));
      linePoint.on("mouseout", this._mouseout.bind(this, linePoint));
    }, connectWithPoint:function(linePoint) {
      var board = this._board, config = this.config;
      board.create("line", [this._linePoint, linePoint._linePoint], {visible:true, strokeWidth:2, strokeColor:config.color, highlightStrokeColor:config.color, straightFirst:false, straightLast:false});
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.MultiBar", {extend:"hm.core.ui.graph.element.Bar", config:{parts:[{title:"yes", color:"#ff0", value:4}, {title:"no", color:"#f0f", value:8}, {title:"n/a", color:"#0ff", value:10}]}, _draw:function() {
      var draw = arguments.callee;
      this.callParent(draw, arguments);
      var me = this, config = this.config, points = this._getBarValuePoints(), parts = config.parts, partsSumValue = 0, board = this._board, vector = board.getVector(points[0], points[1]);
      for (var i = 0, ln = parts.length;i < ln;i++) {
        partsSumValue += parts[i].value;
      }
      this._subBarsValue = partsSumValue;
      var pointLeftTop = points[0], pointLeftBottom = points[3], pointRightTop, pointRightBottom, subBars = [], barLines = this._getBarLines();
      for (var i = 0, ln = parts.length;i < ln;i++) {
        var part = parts[i];
        pointRightTop = board.create("glider", [pointLeftTop.X() + vector.x * (part.value / partsSumValue), pointLeftTop.Y() + vector.y * (part.value / partsSumValue), barLines[0]]);
        pointRightBottom = board.create("glider", [pointLeftBottom.X() + vector.x * (part.value / partsSumValue), pointLeftBottom.Y() + vector.y * (part.value / partsSumValue), barLines[1]]);
        var barConfig = $.extend({}, part, {points:[pointLeftTop, pointRightTop, pointRightBottom, pointLeftBottom], board:board, drawDelayed:false, testBounds:true});
        var subBar = HM.create("hm.core.ui.graph.element.Bar", barConfig);
        subBar.getPercentValue = function() {
          return Math.round(this.config.value / me.getSubBarsValue() * 100);
        };
        subBar.draw();
        subBars.push(subBar);
        pointLeftTop = pointRightTop;
        pointLeftBottom = pointRightBottom;
      }
      this._subBars = subBars;
    }, getSubBars:function() {
      return this._subBars;
    }, getSubBarsValue:function() {
      return this._subBarsValue;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.CircleSector", {extend:"hm.core.ui.graph.element.GraphValueItem", config:{strokeWidth:0.05, color:"yellow", opacity:0, highlightColor:"green", highlightOpacity:0, midPoint:null}, _draw:function() {
      var board = this._board, config = this.config, points = config.points;
      var baseArcs = this._getBaseArcs(), arcMax = baseArcs[0], arcMin = baseArcs[1];
      var options = {strokeWidth:config.strokeWidth, highlightStrokeWidth:config.strokeWidth, strokeColor:config.color, strokeOpacity:config.opacity, highlightStrokeColor:config.highlightColor, highlightStrokeOpacity:config.highlightOpacity, fillColor:config.color, fillOpacity:config.opacity, highlightFillColor:config.highlightColor, highlightFillOpacity:config.highlightOpacity};
      if (config.jsxElementOptions !== null) {
        options = $.extend({}, options, config.jsxElementOptions);
      }
      var sector = this._sector = board.joinArcs(arcMax, arcMin, options);
      var maxRadius = points[4].Dist(points[0]);
      sector.point1 = points[4];
      sector.point2 = points[1];
      sector.point3 = points[0];
      sector.closestPoint = points[3];
      sector.hasPoint = function(x, y, coordsType) {
        if (!coordsType) {
          coordsType = JXG.COORDS_BY_SCREEN;
        }
        var angle, checkPoint = new JXG.Coords(coordsType, [x, y], sector.board), minRadius = sector.point1.Dist(sector.closestPoint), dist = sector.point1.coords.distance(coordsType, checkPoint), has = dist < maxRadius;
        if (has) {
          has = dist > minRadius;
        }
        if (has) {
          angle = JXG.Math.Geometry.rad(sector.point2, sector.point1, checkPoint.usrCoords.slice(1));
          if (angle >= JXG.Math.Geometry.rad(sector.point2, sector.point1, sector.point3)) {
            has = false;
          }
        }
        return has;
      };
      sector.on("mouseover", this._mouseover.bind(this, sector));
      sector.on("mouseout", this._mouseout.bind(this, sector));
    }, _getMidPoint:function() {
      return this.config.midPoint;
    }, getMidPointOffset:function() {
      var mp = this._getMidPoint();
      if (mp) {
        var board = this._board;
        var boardCoords = board.getCoordsTopLeftCorner();
        return{left:boardCoords[0] + mp.coords.scrCoords[1], top:boardCoords[1] + mp.coords.scrCoords[2]};
      } else {
        return false;
      }
    }, _getValuePoints:function() {
      if (this._valuePoints === undefined) {
        var board = this._board, config = this.config, points = config.points, baseLines = this._getBaseLines();
        var startPoint1 = points[0], startPoint2 = points[1], endPoint1 = points[2], endPoint2 = points[3];
        var vector1 = board.getVector(startPoint1, endPoint1);
        var vector2 = board.getVector(startPoint2, endPoint2);
        endPoint1 = board.create("glider", [startPoint1.X() + vector1.x * config.value / config.maxValue, startPoint1.Y() + vector1.y * config.value / config.maxValue, baseLines[0]]);
        endPoint2 = board.create("glider", [startPoint2.X() + vector2.x * config.value / config.maxValue, startPoint2.Y() + vector2.y * config.value / config.maxValue, baseLines[1]]);
        this._valuePoints = [startPoint1, startPoint2, endPoint1, endPoint2, points[4]];
      }
      return this._valuePoints;
    }, _getBaseLines:function() {
      if (this._baseLines === undefined) {
        var board = this._board, points = this.config.points;
        this._baseLines = [board.create("line", [points[0], points[2]], {straightFirst:false, straightLast:false}), board.create("line", [points[1], points[3]], {straightFirst:false, straightLast:false})];
      }
      return this._baseLines;
    }, _getBaseArcs:function() {
      if (this._baseArcs === undefined) {
        var board = this._board, points = this.config.points;
        this._baseArcs = [board.create("arc", [points[4], points[1], points[0]], {visible:false}), board.create("arc", [points[4], points[3], points[2]], {visible:false})];
      }
      return this._baseArcs;
    }, _getAnchorPoint:function(anchorPointIndex, offset) {
      var board = this._board, points = this.config.points, startPoint, endPoint, centerPoint = points[4], midPoint = this._getMidPoint(), baseArcs = this._getBaseArcs();
      switch(anchorPointIndex) {
        case 0:
        ;
        case 1:
          endPoint = points[anchorPointIndex];
          startPoint = points[anchorPointIndex + 2];
          break;
        case 2:
        ;
        case 3:
          endPoint = points[anchorPointIndex];
          startPoint = points[anchorPointIndex - 2];
          break;
        case 4:
          endPoint = board.create("midpoint", [points[0], points[2]]);
          startPoint = centerPoint;
          break;
        case 5:
          endPoint = board.create("midpoint", [points[1], points[3]]);
          startPoint = centerPoint;
          break;
        case 6:
          var line = board.create("line", [centerPoint, midPoint]);
          endPoint = board.create("intersection", [baseArcs[1], line, 0]);
          startPoint = midPoint;
          break;
        case 7:
          var line = board.create("line", [centerPoint, midPoint]);
          endPoint = board.create("intersection", [baseArcs[0], line, 0]);
          startPoint = midPoint;
          break;
        case 8:
          endPoint = this._getMidPoint();
          startPoint = centerPoint;
          break;
      }
      return board.create("point", [function() {
        var vector = board.getVector(startPoint, endPoint);
        return endPoint.X() + vector.normalized.x * offset;
      }, function() {
        var vector = board.getVector(startPoint, endPoint);
        return endPoint.Y() + vector.normalized.y * offset;
      }]);
    }, _testBounds:function(label) {
      var board = this._board;
      board.update();
      var bounds = label.bounds();
      var w = bounds[2] - bounds[0];
      var h = bounds[3] - bounds[1];
      bounds[0] -= w / 2;
      bounds[2] -= w / 2;
      bounds[1] += h / 2;
      bounds[3] += h / 2;
      var sector = this._sector;
      if (!sector.hasPoint(bounds[0], bounds[1], JXG.COORDS_BY_USER)) {
        label.hideElement();
      }
      if (!sector.hasPoint(bounds[2], bounds[3], JXG.COORDS_BY_USER)) {
        label.hideElement();
      }
      if (!sector.hasPoint(bounds[2], bounds[1], JXG.COORDS_BY_USER)) {
        label.hideElement();
      }
      if (!sector.hasPoint(bounds[0], bounds[3], JXG.COORDS_BY_USER)) {
        label.hideElement();
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.CircleSectorParts", {extend:"hm.core.ui.graph.element.CircleSector", config:{arcStrokeWidth:2, arcCount:18, parts:[{title:"yes", color:"#ff0", value:4}, {title:"no", color:"#f0f", value:8}, {title:"n/a", color:"#0ff", value:10}]}, _draw:function() {
      var me = this, board = this._board, config = this.config, points = config.points;
      var startPoints = board.getDistributedPoints(points[3], points[1], config.arcCount), endPoints = board.getDistributedPoints(points[2], points[0], config.arcCount);
      board.options.layer.arc = 4;
      for (var i = 0, ln = startPoints.length;i < ln;i++) {
        var percent = (i + 1) / ln, color = me._getColor(percent);
        board.create("arc", [points[4], startPoints[i], endPoints[i]], {strokeWidth:config.arcStrokeWidth, strokeColor:color, highlightStrokeColor:color});
      }
    }, _getColor:function(percent) {
      var arr = this._getPartsPercents(), closestIndex = null, closestValue = null;
      $.each(arr, function(index) {
        var arrValue = arr[index];
        if (percent <= arrValue) {
          if (closestValue == null || arrValue < closestValue) {
            closestValue = arrValue;
            closestIndex = index;
          }
        }
      });
      if (closestIndex === null) {
        closestIndex = 2;
      }
      return this.config.parts[closestIndex].color;
    }, _getPartsPercents:function() {
      if (this._partsPercents === undefined) {
        this._partsPercents = [];
        var me = this, config = this.config, partsSumValue = 0;
        $.each(config.parts, function() {
          partsSumValue += this.value;
        });
        var val = 0;
        $.each(config.parts, function() {
          val += this.value;
          if (this.value == 0) {
            me._partsPercents.push(0);
          } else {
            me._partsPercents.push(val / partsSumValue);
          }
        });
      }
      return this._partsPercents;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.element.Grid", {extend:"hm.core.ui.graph.GraphElement", config:{points:null, color:"#dfdfdf", vertical:false, labelsOffset:[10, 10], lineEndingsOffset:[null, null], labelFormat:"{value}", labelColor:"#929292", baseLineVisibility:[true, true], fontSize:12, maxValue:10, minIntervalWidth:18, specificValues:null}, _initOptions:function() {
      var config = this.config, color = config.color;
      this._lineOptions = {visible:true, strokeWidth:1, highlightStrokeWidth:1, strokeColor:color, highlightStrokeColor:color, fixed:true};
      this._offsetLineOptions = $.extend({}, this._lineOptions, {straightFirst:false, straightLast:false});
      this._textOptions = {anchorX:"middle", fontSize:config.fontSize, strokeColor:config.labelColor, highlightStrokeColor:config.labelColor};
    }, _draw:function() {
      this._initOptions();
      var me = this, board = this._board, config = this.config, points = config.points, barLinesMaxVal = config.maxValue, lineOptions = this._lineOptions;
      board.options.layer["line"] = 1;
      var gridBaseLine1, gridBaseLine2;
      if (config.vertical === true) {
        gridBaseLine1 = board.create("line", [points[0], points[1]], lineOptions);
        gridBaseLine2 = board.create("line", [points[3], points[2]], lineOptions);
      } else {
        gridBaseLine1 = board.create("line", [points[3], points[0]], lineOptions);
        gridBaseLine2 = board.create("line", [points[2], points[1]], lineOptions);
      }
      if (config.baseLineVisibility[0] == false) {
        gridBaseLine1.hideElement();
      }
      if (config.baseLineVisibility[1] == false) {
        gridBaseLine2.hideElement();
      }
      if (config.lineEndingsOffset[0] !== null) {
        lineOptions.straightFirst = false;
      }
      if (config.lineEndingsOffset[1] !== null) {
        lineOptions.straightLast = false;
      }
      if (config.specificValues !== null) {
        var specificValues = config.specificValues;
        for (var i = 0, ln = specificValues.length;i < ln;i++) {
          this.drawValueLine(specificValues[i]);
        }
        return;
      } else {
        var gridInterval = 0, tempGridInterval = 0, gridStep = 0, tempGridStep = 0, minGridInterval = config.minIntervalWidth;
        do {
          gridInterval = tempGridInterval;
          gridStep = tempGridStep;
          tempGridStep++;
          tempGridInterval = gridBaseLine1.point1.Dist(gridBaseLine1.point2) * tempGridStep / barLinesMaxVal;
        } while (tempGridInterval <= minGridInterval);
        if (tempGridStep === 1) {
          gridInterval = tempGridInterval;
          gridStep = tempGridStep;
        }
        var gridLinesCount = Math.floor(barLinesMaxVal / gridStep) + 1, gridPoints1 = board.getDistributedPoints(gridBaseLine1.point1, gridBaseLine1.point2, gridLinesCount, gridInterval), gridPoints2 = board.getDistributedPoints(gridBaseLine2.point1, gridBaseLine2.point2, gridLinesCount, gridInterval);
        $.each(gridPoints1, function(index) {
          gridPoints1[index].makeGlider(gridBaseLine1);
          gridPoints2[index].makeGlider(gridBaseLine2);
          me._drawGridLine(gridPoints1[index], gridPoints2[index], index * gridStep);
        });
      }
      board.options.layer["line"] = 7;
    }, drawValueLine:function(value, labelColor, jsxLineOptions) {
      var me = this, board = this._board, config = this.config, points = config.points, maxValue = config.maxValue, lineOptions = this._lineOptions;
      var vectorLeft = board.getVector(points[3], points[0]);
      var vectorRight = board.getVector(points[2], points[1]);
      var percent = value / maxValue;
      var pointLeft = board.create("point", [points[3].X() + vectorLeft.normalized.x * vectorLeft.length * percent, points[3].Y() + vectorLeft.normalized.y * vectorLeft.length * percent]);
      var pointRight = board.create("point", [points[2].X() + vectorRight.normalized.x * vectorRight.length * percent, points[2].Y() + vectorRight.normalized.y * vectorRight.length * percent]);
      var temp_lineOptions = this._lineOptions;
      var temp_offsetLineOptions = this._offsetLineOptions;
      var temp_color = config.labelColor;
      if (labelColor) {
        config.labelColor = labelColor;
      }
      if (jsxLineOptions) {
        this._lineOptions = $.extend({}, this._lineOptions, jsxLineOptions);
        this._offsetLineOptions = $.extend({}, this._offsetLineOptions, jsxLineOptions);
      }
      this._drawGridLine(pointLeft, pointRight, value);
      config.labelColor = temp_color;
      this._lineOptions = temp_lineOptions;
      this._offsetLineOptions = temp_offsetLineOptions;
    }, _drawGridLine:function(p1, p2, index) {
      var board = this._board, config = this.config;
      var gridLine = board.create("line", [p1, p2], this._lineOptions);
      if (config.lineEndingsOffset[0] !== null) {
        this._drawOffsetLine(gridLine.point2, gridLine.point1, config.lineEndingsOffset[0]);
      }
      if (config.lineEndingsOffset[1] !== null) {
        this._drawOffsetLine(gridLine.point1, gridLine.point2, config.lineEndingsOffset[1]);
      }
      if (config.labelsOffset[0] !== null) {
        this._drawOffsetLabel(gridLine.point2, gridLine.point1, config.labelsOffset[0], index);
      }
      if (config.labelsOffset[1] !== null) {
        this._drawOffsetLabel(gridLine.point1, gridLine.point2, config.labelsOffset[1], index);
      }
    }, _drawOffsetLine:function(p1, p2, offset) {
      var me = this, board = this._board;
      var offsetPoint = board.create("point", [function() {
        var gridLineVector = board.getVector(p1, p2);
        return p2.X() + gridLineVector.normalized.x * offset;
      }, function() {
        var gridLineVector = board.getVector(p1, p2);
        return p2.Y() + gridLineVector.normalized.y * offset;
      }]);
      board.create("line", [p2, offsetPoint], me._offsetLineOptions);
    }, _drawOffsetLabel:function(p1, p2, offset, text) {
      var me = this, board = this._board, config = this.config;
      text = hm.core.String.printf(config.labelFormat, {value:text});
      board.create("text", [function() {
        var gridLineVector = board.getVector(p1, p2);
        return p2.X() + gridLineVector.normalized.x * offset;
      }, function() {
        var gridLineVector = board.getVector(p1, p2);
        return p2.Y() + gridLineVector.normalized.y * offset;
      }, text], me._textOptions);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.GraphPainter", {extend:"hm.core.ObservableClass", config:{canvas:null, data:null, label:{visible:true, anchorPointIndex:7, offset:15, format:"{index}", fontSize:12, testBounds:false}, subLabel:{visible:false, anchorPointIndex:8, offset:0, format:"{index}", fontSize:12, testBounds:false}, jsxElementOptions:null}, __construct:function() {
      var __construct = arguments.callee;
      var config = this.config, protoConfig = hm.core.ui.graph.GraphPainter.prototype.config;
      config.label = $.extend({}, protoConfig.label, config.label);
      config.subLabel = $.extend({}, protoConfig.subLabel, config.subLabel);
      this._canvas = config.canvas;
      this._canvas.needToDestroy(this);
      this.callParent(__construct, arguments);
      this._graphElements = [];
      this._graphElementsDrawn = 0;
    }, _initCustomBoardMethods:function(board) {
      board.getDistributedPoints = function(fromPoint, toPoint, pointsCount, interval) {
        var vector = this.getVector(fromPoint, toPoint), points = [], vectorNormalizedX = vector.normalized.x, vectorNormalizedY = vector.normalized.y, vectorLength = vector.length, fromX = fromPoint.X(), fromY = fromPoint.Y();
        if (interval === undefined) {
          interval = vectorLength / (pointsCount - 1);
        }
        for (var i = 0;i < pointsCount;i++) {
          var x = fromX + vectorNormalizedX * interval * i, y = fromY + vectorNormalizedY * interval * i;
          points.push(board.create("point", [x, y]));
        }
        return points;
      };
      board.getVector = function(p1, p2) {
        var vectorX = p2.X() - p1.X(), vectorY = p2.Y() - p1.Y();
        var vectorLength = Math.sqrt(vectorX * vectorX + vectorY * vectorY), vectorNormalized;
        if (vectorLength != 0) {
          vectorNormalized = {x:vectorX / vectorLength, y:vectorY / vectorLength};
        } else {
          vectorNormalized = {x:0, y:0};
        }
        return{x:vectorX, y:vectorY, length:vectorLength, normalized:vectorNormalized};
      };
      board.joinArcs = function(arc1, arc2, attributes) {
        var board = this, attr = JXG.copyAttributes(attributes, board.options, "curve"), c = board.create("curve", [[0], [0]], attr);
        c.updateDataArray = function() {
          var arc1dataX = arc1.dataX, arc1dataY = arc1.dataY, arc2dataX = arc2.dataX, arc2dataY = arc2.dataY;
          arc2dataX = arc2dataX.reverse();
          arc2dataY = arc2dataY.reverse();
          var last1 = arc1dataX.length - 1, last2 = arc2dataX.length - 1;
          this.dataX = arc1dataX.concat(arc1dataX[last1]).concat(arc2dataX[0]).concat(arc2dataX).concat(arc2dataX[last2]).concat(arc1dataX[0]).concat(arc1dataX[0]);
          this.dataY = arc1dataY.concat(arc1dataY[last1]).concat(arc2dataY[0]).concat(arc2dataY).concat(arc2dataY[last2]).concat(arc1dataY[0]).concat(arc1dataY[0]);
          this.bezierDegree = arc2.bezierDegree;
        };
        return c;
      };
    }, drawElement:function(el, elementCallBack) {
      var me = this;
      this.needToDestroy(el);
      if (el.config.drawDelayed === true) {
        this._graphElements.push(el);
        el.draw(function() {
          if (elementCallBack) {
            elementCallBack();
          }
          me._elementDrawn();
        });
      } else {
        el.draw(elementCallBack);
      }
    }, _elementDrawn:function() {
      this._graphElementsDrawn += 1;
      if (!this._painterCallBack) {
        return;
      }
      if (this._graphElements.length == this._graphElementsDrawn) {
        this._painterCallBack();
      }
    }, draw:function(painterCallBack) {
      var me = this;
      this._draw();
      if (!painterCallBack) {
        return;
      }
      if (me._graphElements.length == 0) {
        setTimeout(function() {
          painterCallBack();
        }, 0);
      } else {
        this._painterCallBack = painterCallBack;
      }
    }, _draw:function() {
      var config = this.config;
      if (!config.data) {
        throw new Error("\u041d\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430");
      } else {
        console.log("\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430", config.data);
      }
      this._board = config.canvas.getBoard();
      this._chartData = config.data;
      this._initCustomBoardMethods(this._board);
    }, _getItemsCount:function() {
      return this._chartData.data.length;
    }, _getItemsMaxValue:function() {
      if (this._maxValue === undefined) {
        if (this._chartData.max_value) {
          this._maxValue = this._chartData.max_value;
        } else {
          var barLinesTotalValues = [0];
          $.each(this._chartData.data, function() {
            barLinesTotalValues.push(this.value);
          });
          this._maxValue = Math.max.apply(Math, barLinesTotalValues);
        }
      }
      return this._maxValue;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.CommonGraphPainter", {extend:"hm.core.ui.graph.GraphPainter", config:{padding:[0, 0, 0, 0], grid:{visible:true, labelsOffset:[10, 10], lineEndingsOffset:[null, null], minIntervalWidth:22, fontSize:12}, color:"red", forceColor:false, barWidth:10, barOpacity:1, barInterval:null, vertical:true, invertAlong:false, invertAcross:false, showBoundPoints:false, justify:false}, __construct:function() {
      var __construct = arguments.callee;
      this.config.grid = $.extend({}, hm.core.ui.graph.painter.CommonGraphPainter.prototype.config.grid, this.config.grid);
      this.callParent(__construct, arguments);
    }, _draw:function() {
      var _draw = arguments.callee;
      this.callParent(_draw, arguments);
      this._drawGrid();
    }, _drawGrid:function() {
      var config = this.config, gridConfig = config.grid, me = this;
      if (gridConfig.visible) {
        gridConfig = $.extend({}, {points:this._getBoundPoints(), board:this._board, vertical:!config.vertical, maxValue:this._getItemsMaxValue()}, gridConfig);
        delete gridConfig.visible;
        var grid = this._grid = HM.create("hm.core.ui.graph.element.Grid", gridConfig);
        this.drawElement(grid);
      }
    }, getGrid:function() {
      if (!this._grid) {
        this._drawGrid();
      }
      return this._grid;
    }, _createBoundPoint:function(config) {
      var parents = [config.x, config.y];
      return this._board.create("point", parents, {visible:this.config.showBoundPoints});
    }, _getBoundPoints:function() {
      if (this._boundPoints === undefined) {
        var board = this._board, canvasHeight = board.canvasHeight, canvasWidth = board.canvasWidth, padding = this.config.padding, topLeft, topRight, bottomLeft, bottomRight;
        topLeft = this._createBoundPoint({x:padding[3], y:canvasHeight - padding[0]});
        topRight = this._createBoundPoint({x:canvasWidth - padding[1], y:canvasHeight - padding[0]});
        bottomLeft = this._createBoundPoint({x:padding[3], y:padding[2]});
        bottomRight = this._createBoundPoint({x:canvasWidth - padding[1], y:padding[2]});
        this._boundPoints = [topLeft, topRight, bottomRight, bottomLeft];
      }
      return this._boundPoints;
    }, _getItemsBaseLines:function() {
      if (this._baseLines === undefined) {
        var baseLine1, baseLine2, board = this._board, boundPoints = this._getBoundPoints();
        if (this.config.vertical) {
          baseLine1 = board.create("line", [boundPoints[3], boundPoints[2]]);
          baseLine2 = board.create("line", [boundPoints[0], boundPoints[1]]);
        } else {
          baseLine1 = board.create("line", [boundPoints[0], boundPoints[3]]);
          baseLine2 = board.create("line", [boundPoints[1], boundPoints[2]]);
        }
        this._baseLines = [baseLine1, baseLine2];
      }
      return this._baseLines;
    }, _getItemsBoundPoints:function() {
      if (this._barsPoints === undefined) {
        var board = this._board, config = this.config, baseLines = this._getItemsBaseLines(), baseLine1 = baseLines[0], baseLine2 = baseLines[1], barsCount = this._getItemsCount(), result = [], distance = baseLine1.point1.Dist(baseLine1.point2), barWidth = config.barWidth, interval = barWidth + (distance - barWidth * barsCount) / (barsCount - 1), maxInterval = barWidth * 2, topLeftCorner = baseLine1.point1, topRightCorner = baseLine1.point2, bottomLeftCorner = baseLine2.point1, bottomRightCorner = 
        baseLine2.point2, padding = 0;
        if (!config.justify && interval > maxInterval) {
          interval = maxInterval;
        }
        var offset;
        if (config.vertical) {
          offset = board.create("transform", [barWidth, 0], {type:"translate"});
        } else {
          offset = board.create("transform", [0, -barWidth], {type:"translate"});
        }
        var points1 = board.getDistributedPoints(topLeftCorner, topRightCorner, barsCount, interval);
        var points2 = board.getDistributedPoints(bottomLeftCorner, bottomRightCorner, barsCount, interval);
        var offsetPoints1 = board.getDistributedPoints(topLeftCorner, topRightCorner, barsCount, interval);
        var offsetPoints2 = board.getDistributedPoints(bottomLeftCorner, bottomRightCorner, barsCount, interval);
        for (var i = 0, ln = points1.length;i < ln;i++) {
          var topLeft = points1[i], topRight = points2[i], bottomLeft = offsetPoints1[i], bottomRight = offsetPoints2[i];
          offset.applyOnce(bottomLeft);
          offset.applyOnce(bottomRight);
          topLeft.makeGlider(baseLine1);
          bottomLeft.makeGlider(baseLine1);
          topRight.makeGlider(baseLine2);
          bottomRight.makeGlider(baseLine2);
          result.push([topLeft, topRight, bottomRight, bottomLeft]);
        }
        this._barsPoints = result;
      }
      return this._barsPoints;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.BarGraphPainter", {extend:"hm.core.ui.graph.painter.CommonGraphPainter", config:{}, _draw:function() {
      var _draw = arguments.callee;
      this.callParent(_draw, arguments);
      var board = this._board, chartData = this._chartData, config = this.config, me = this;
      var boundPoints = this._getBoundPoints();
      var maxVal = this._getItemsMaxValue();
      var barsPoints = this._getItemsBoundPoints();
      this._bars = [];
      $.each(chartData.data, function(index) {
        var barClass = "hm.core.ui.graph.element.Bar";
        var color;
        if (this.color && !config.forceColor) {
          color = this.color;
        } else {
          color = config.color;
        }
        var barOptions = {points:barsPoints[index], value:this.value, color:color, maxValue:maxVal, opacity:config.barOpacity, board:board};
        if (this.title) {
          barOptions.title = this.title;
        }
        if (this.parts) {
          barClass = "hm.core.ui.graph.element.MultiBar";
          barOptions.parts = this.parts;
        }
        var bar = HM.create(barClass, barOptions);
        me._bars.push(bar);
        me.drawElement(bar, function() {
          me._drawLabels(bar, index);
        });
      });
    }, getBars:function() {
      return this._bars;
    }, _drawLabels:function(multiBar, index) {
      var config = this.config;
      if (config.label.visible === true) {
        var labelText = hm.core.String.printf(config.label.format, {index:index + 1, title:multiBar.getTitle(), value:multiBar.getValue(), percent:multiBar.getPercentValue()});
        multiBar.addLabel(config.label.anchorPointIndex, config.label.offset, labelText, {fontSize:config.label.fontSize}, config.label.testBounds);
      }
      if (config.subLabel.visible === true) {
        if (multiBar.getSubBars) {
          $.each(multiBar.getSubBars(), function(index) {
            var labelText = hm.core.String.printf(config.subLabel.format, {index:index + 1, title:this.getTitle(), value:this.getValue(), percent:this.getPercentValue()});
            this.addLabel(config.subLabel.anchorPointIndex, config.subLabel.offset, labelText, {fontSize:config.subLabel.fontSize}, config.subLabel.testBounds);
          });
        }
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.custom.YearDynamic", {extend:"hm.core.ui.graph.painter.BarGraphPainter", config:{}, _draw:function() {
      var _draw = arguments.callee;
      var config = this.config;
      var frontPainterData = hm.core.Object.clone(config.data);
      for (var j = 0;j < config.data.data.length;j++) {
        config.data.data[j].value = config.data.max_value;
      }
      this.callParent(_draw, arguments);
      var bars = this.getBars();
      var backTip = HM.create("hm.core.ui.tooltip.Tooltip", {contentTpl:"hm/pm/ui/report/chart/yeardynamic/tip/Results", followPointer:true, arrowDirection:"up", showDelay:200});
      this.needToDestroy(backTip);
      this._initTips(backTip, bars);
      var frontPainterOptions = {canvas:config.canvas, data:frontPainterData, color:"#636363", padding:config.padding, barWidth:config.barWidth, barOpacity:config.barWidth, grid:{visible:false}, label:{visible:false}};
      var frontPainter = HM.create("hm.core.ui.graph.painter.LineGraphPainter", frontPainterOptions);
      frontPainter.draw();
      var points = frontPainter.getLinePoints();
      var frontTip = HM.create("hm.core.ui.tooltip.Tooltip", {contentTpl:"hm/pm/ui/report/chart/yeardynamic/tip/Towork", followPointer:true, arrowDirection:"down", showDelay:200, width:44});
      this.needToDestroy(frontTip);
      this._initTips(frontTip, points);
    }, _initTips:function(tip, elements) {
      for (var i = 0, ln = elements.length;i < ln;i++) {
        var el = elements[i];
        el.addTooltip(tip, el.config);
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.LineGraphPainter", {extend:"hm.core.ui.graph.painter.CommonGraphPainter", config:{}, _draw:function() {
      var _draw = arguments.callee;
      this.callParent(_draw, arguments);
      var board = this._board, chartData = this._chartData.data, config = this.config, me = this;
      var maxVal = this._getItemsMaxValue();
      var barsPoints = this._getItemsBoundPoints();
      var prevLinePoint;
      this._linePoints = [];
      $.each(chartData, function(index) {
        var linePoint = HM.create("hm.core.ui.graph.element.LinePoint", {points:barsPoints[index], value:this.value, color:this.color, maxValue:maxVal, opacity:config.barOpacity, board:board});
        me._linePoints.push(linePoint);
        me.drawElement(linePoint, function() {
          if (prevLinePoint) {
            linePoint.connectWithPoint(prevLinePoint);
          }
          prevLinePoint = linePoint;
        });
      });
    }, getLinePoints:function() {
      return this._linePoints;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.MultiBarsGraphPainter", {extend:"hm.core.ui.graph.painter.CommonGraphPainter", config:{data:[], barsGap:0, singleBarLabel:true}, _draw:function() {
      var _draw = arguments.callee;
      var config = this.config, canvas = config.canvas, dataArray = config.data, me = this, singleBarLabel = config.singleBarLabel;
      var basicPaddingLeft = config.padding[3];
      var basicBarWidth = config.barWidth + config.barsGap;
      delete config.barsGap;
      delete config.singleBarLabel;
      config.data = dataArray[0];
      this.callParent(_draw, arguments);
      config.padding[1] += dataArray.length * basicBarWidth;
      config.grid.visible = false;
      if (singleBarLabel) {
        config.label.visible = false;
      }
      this._bars = [];
      for (var i = 0, ln = dataArray.length;i < ln;i++) {
        config.data = dataArray[i];
        config.padding[3] = basicBarWidth * i + basicPaddingLeft;
        config.padding[1] -= basicBarWidth;
        var painter = me._painter = HM.create("hm.core.ui.graph.painter.BarGraphPainter", config);
        painter.draw();
        this._bars.concat(painter.getBars());
        if (i == 0) {
          this._firstItemsBoundPoints = painter._getItemsBoundPoints();
        }
        if (i == ln - 1) {
          this._lastItemsBoundPoints = painter._getItemsBoundPoints();
        }
      }
      if (singleBarLabel) {
        var barsPoints = this._getItemsBoundPoints();
        $.each(config.data.data, function(index) {
          var maxValue = me._painter._getItemsMaxValue();
          var barOptions = {points:barsPoints[index], value:maxValue, color:"transparent", maxValue:maxValue, opacity:0, board:config.canvas.getBoard()};
          var bar = HM.create("hm.core.ui.graph.element.Bar", barOptions);
          me.drawElement(bar, function() {
            var labelText = hm.core.String.printf(config.label.format, {index:index + 1, title:bar.getTitle(), value:bar.getValue(), percent:bar.getPercentValue()});
            bar.addLabel(config.label.anchorPointIndex, config.label.offset, labelText, {fontSize:config.label.fontSize});
          });
        });
      }
    }, getBars:function() {
      return this._bars;
    }, _getItemsBoundPoints:function() {
      var _getItemsBoundPoints = arguments.callee;
      var result = [], firstItemsBoundPoints = this._firstItemsBoundPoints, lastItemsBoundPoints = this._lastItemsBoundPoints, ln = firstItemsBoundPoints.length;
      for (var i = 0;i < ln;i++) {
        result.push([firstItemsBoundPoints[i][0], firstItemsBoundPoints[i][1], lastItemsBoundPoints[i][2], lastItemsBoundPoints[i][3]]);
      }
      return result;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.graph.painter.PieGraphPainter", {extend:"hm.core.ui.graph.GraphPainter", config:{pieGap:4, labelOffset:10, arcGap:2, arcStrokeWidth:2, centerPointPosition:[0.5, 0.5], startPoint:[0, 100], quarters:4, maxRadius:null, minRadius:null, padding:[0, 0, 0, 0], color:"yellow", opacity:1, highlightColor:null, highlightOpacity:1, useValueForAngle:true, forceColor:false}, _draw:function() {
      var _draw = arguments.callee;
      this.callParent(_draw, arguments);
      var me = this, config = this.config, board = this._board, chartData = this._chartData;
      var minRadiusPoints = this._getMinRadiusPoints();
      var maxRadiusPoints = this._getMaxRadiusPoints();
      var midPoints = this._getMidPoints();
      this._circleSectors = [];
      this._circleSectorsParts = [];
      $.each(chartData.data, function(index) {
        var chartDataItem = this;
        var color = config.color, opacity = config.opacity, highlightColor = config.highlightColor, highlightOpacity = config.highlightOpacity;
        if (!config.forceColor) {
          if (chartDataItem.color) {
            color = chartDataItem.color;
          }
          if (chartDataItem.highlightColor) {
            highlightColor = chartDataItem.highlightColor;
          }
          if (chartDataItem.opacity) {
            opacity = chartDataItem.opacity;
          }
          if (chartDataItem.highlightOpacity) {
            highlightOpacity = chartDataItem.highlightOpacity;
          }
        }
        if (highlightColor === null) {
          highlightColor = color;
        }
        var circleSectorConfig = {points:[maxRadiusPoints[index], maxRadiusPoints[index + 1], minRadiusPoints[index], minRadiusPoints[index + 1], me._getCenterPoint()], midPoint:midPoints[index], value:chartDataItem.value, title:chartDataItem.title, color:color, opacity:opacity, highlightColor:highlightColor, highlightOpacity:highlightOpacity, board:board, maxValue:me._getItemsMaxValue(), sourceData:{itemData:chartDataItem, data:chartData}};
        if (config.jsxElementOptions !== null) {
          circleSectorConfig.jsxElementOptions = config.jsxElementOptions;
        }
        var sector = HM.create("hm.core.ui.graph.element.CircleSector", circleSectorConfig);
        me._circleSectors.push(sector);
        me.drawElement(sector, function() {
          board.update();
          if (config.label.visible === true && !chartDataItem.hideLabel) {
            var labelText = hm.core.String.printf(config.label.format, {index:index + 1, title:sector.getTitle(), value:sector.getValue(), percent:sector.getPercentValue(), day:hm.core.String.dayString(sector.getValue())});
            var jsxOptions = {fontSize:config.label.fontSize};
            if (config.label.color) {
              jsxOptions.strokeColor = config.label.color;
              jsxOptions.highlightStrokeColor = config.label.color;
            }
            if (config.label.cssClass) {
              jsxOptions.cssClass = config.label.cssClass;
              jsxOptions.highlightCssClass = config.label.cssClass;
            }
            sector.addLabel(config.label.anchorPointIndex, config.label.offset, labelText, jsxOptions, config.label.testBounds);
          }
        });
        if (chartDataItem.parts) {
          var minPaddingPoints = me._getMinPaddingPoints();
          var maxPaddingPoints = me._getMaxPaddingPoints();
          var sectorParts = HM.create("hm.core.ui.graph.element.CircleSectorParts", {points:[maxPaddingPoints[index * 2], maxPaddingPoints[index * 2 + 1], minPaddingPoints[index * 2], minPaddingPoints[index * 2 + 1], me._getCenterPoint()], arcStrokeWidth:config.arcStrokeWidth, board:board, title:chartDataItem.title, parts:chartDataItem.parts});
          me._circleSectorsParts.push(sectorParts);
          me.drawElement(sectorParts);
        }
      });
    }, getCircleSectors:function() {
      return this._circleSectors;
    }, getCircleSectorsParts:function() {
      return this._circleSectorsParts;
    }, _getCenterPoint:function() {
      if (this._centerPoint === undefined) {
        var board = this._board, config = this.config, x = (board.canvasWidth - config.padding[3] - config.padding[1]) * config.centerPointPosition[0] + config.padding[3], y = (board.canvasHeight - config.padding[0] - config.padding[2]) * config.centerPointPosition[1] + config.padding[2];
        this._centerPoint = board.create("point", [x, y]);
      }
      return this._centerPoint;
    }, _getRadiusPoints:function() {
      if (this._radiusPoints === undefined) {
        this._radiusPoints = [];
        this._maxRadiusPoints = [];
        this._minRadiusPoints = [];
        this._midPoints = [];
        var board = this._board, config = this.config, centerPoint = this._getCenterPoint(), me = this;
        var basePoint = board.create("point", [centerPoint.X() + config.startPoint[0], centerPoint.Y() + config.startPoint[1]]);
        var baseLine = board.create("line", [centerPoint, basePoint]);
        var maxI = board.create("intersection", [baseLine, this._getMaxRadiusCircle(), 0]), minI = board.create("intersection", [baseLine, this._getMinRadiusCircle(), 0]), mid = board.create("midpoint", [minI, maxI]);
        var sectorsCount = this._getItemsCount(), sectorAngle = 360 / sectorsCount;
        var chartData = this._chartData;
        var dataSumValue = 0;
        var angleSum = 0;
        $.each(chartData.data, function(i) {
          var value = 1;
          if (config.useValueForAngle) {
            value = this.value;
          }
          dataSumValue += value;
        });
        var setPoints = function(i, value) {
          if (!config.useValueForAngle) {
            value = 1;
          }
          var sectorAngle = value / dataSumValue * 360;
          var rotation = board.create("transform", [-angleSum * Math.PI / (720 / config.quarters), centerPoint], {type:"rotate"});
          var rotationMid = board.create("transform", [-(angleSum + sectorAngle / 2) * Math.PI / (720 / config.quarters), centerPoint], {type:"rotate"});
          angleSum += sectorAngle;
          var maxPoint = board.create("point", [maxI, rotation], {withLabel:true, name:"p" + i});
          var minPoint = board.create("point", [minI, rotation], {withLabel:true, name:"p" + i});
          me._radiusPoints.push(maxPoint);
          me._radiusPoints.push(minPoint);
          me._maxRadiusPoints.push(maxPoint);
          me._minRadiusPoints.push(minPoint);
          if (value !== null) {
            var midPoint = board.create("point", [mid, rotationMid], {withLabel:true, name:"p" + i});
            me._midPoints.push(midPoint);
          }
        };
        $.each(chartData.data, function(i) {
          setPoints(i, this.value);
          if (sectorsCount - 1 == i) {
            setPoints(i + 1, null);
          }
        });
      }
      return this._radiusPoints;
    }, _getMidPoints:function() {
      if (this._midPoints === undefined) {
        this._getRadiusPoints();
      }
      return this._midPoints;
    }, _getMaxRadiusPoints:function() {
      if (this._maxRadiusPoints === undefined) {
        this._getRadiusPoints();
      }
      return this._maxRadiusPoints;
    }, _getMinRadiusPoints:function() {
      if (this._minRadiusPoints === undefined) {
        this._getRadiusPoints();
      }
      return this._minRadiusPoints;
    }, _getMaxRadius:function() {
      if (this._maxRadius === undefined) {
        var config = this.config, board = this._board;
        if (config.maxRadius !== null) {
          this._maxRadius = config.maxRadius;
        } else {
          var width = (board.canvasWidth - config.padding[1] - config.padding[3]) / 2;
          var height = (board.canvasHeight - config.padding[0] - config.padding[2]) / 2;
          this._maxRadius = Math.min(width, height);
        }
      }
      return this._maxRadius;
    }, _getMinRadius:function() {
      if (this._minRadius === undefined) {
        var config = this.config, maxRadius = this._getMaxRadius();
        if (config.minRadius !== null) {
          this._minRadius = config.minRadius;
        } else {
          this._minRadius = maxRadius - ((config.arcGap + config.arcStrokeWidth) * 18 + config.pieGap * 2);
        }
      }
      return this._minRadius;
    }, _getMaxRadiusCircle:function() {
      if (this._maxRadiusCircle === undefined) {
        var board = this._board, maxRadius = this._getMaxRadius(), centerPoint = this._getCenterPoint();
        this._maxRadiusCircle = board.create("circle", [centerPoint, maxRadius]);
      }
      return this._maxRadiusCircle;
    }, _getMinRadiusCircle:function() {
      if (this._minRadiusCircle === undefined) {
        var board = this._board, centerPoint = this._getCenterPoint(), minRadius = this._getMinRadius();
        this._minRadiusCircle = board.create("circle", [centerPoint, minRadius]);
      }
      return this._minRadiusCircle;
    }, _initPaddingPoints:function() {
      if (this._maxPaddingPoints === undefined || this._minPaddingPoints === undefined) {
        this._maxPaddingPoints = [];
        this._minPaddingPoints = [];
        var me = this, board = this._board, config = this.config, radius = config.pieGap;
        var maxRadiusCircle = this._getMaxRadiusCircle(), minRadiusCircle = this._getMinRadiusCircle(), centerPoint = this._getCenterPoint(), maxRadiusPoints = this._getMaxRadiusPoints(), minRadiusPoints = this._getMinRadiusPoints(), maxPaddingCircle = board.create("circle", [centerPoint, maxRadiusCircle.getRadius() - radius - config.arcStrokeWidth / 2]), minPaddingCircle = board.create("circle", [centerPoint, minRadiusCircle.getRadius() + radius + config.arcStrokeWidth / 2]);
        $.each(maxRadiusPoints, function(index) {
          var maxPoint = maxRadiusPoints[index], minPoint = minRadiusPoints[index];
          var circleMax = board.create("circle", [maxPoint, radius]), cwiMax = board.create("intersection", [maxRadiusCircle, circleMax]), ccwiMax = board.create("otherintersection", [maxRadiusCircle, circleMax, cwiMax]);
          var circleMin = board.create("circle", [minPoint, radius]), cwiMin = board.create("intersection", [minRadiusCircle, circleMin]), ccwiMin = board.create("otherintersection", [minRadiusCircle, circleMin, cwiMin]);
          if (index != 0) {
            var ccwLine = board.create("line", [ccwiMax, ccwiMin], {strokeColor:"yellow"});
            me._maxPaddingPoints.push(board.create("intersection", [maxPaddingCircle, ccwLine, 1]));
            me._minPaddingPoints.push(board.create("intersection", [minPaddingCircle, ccwLine, 1]));
          }
          if (index != maxRadiusPoints.length - 1) {
            var cwLine = board.create("line", [cwiMax, cwiMin], {strokeColor:"green"});
            me._maxPaddingPoints.push(board.create("intersection", [maxPaddingCircle, cwLine, 1]));
            me._minPaddingPoints.push(board.create("intersection", [minPaddingCircle, cwLine, 1]));
          }
        });
      }
    }, _getMaxPaddingPoints:function() {
      if (this._maxPaddingPoints === undefined) {
        this._initPaddingPoints();
      }
      return this._maxPaddingPoints;
    }, _getMinPaddingPoints:function() {
      if (this._minPaddingPoints === undefined) {
        this._initPaddingPoints();
      }
      return this._minPaddingPoints;
    }});
  })();
  (function() {
    HM.define("hm.core.String", {statics:{printf:function(string, obj) {
      var useArguments = false;
      var _arguments = Array.prototype.slice.call(arguments, 1);
      var i = -1;
      if (typeof _arguments[0] == "string") {
        useArguments = true;
      }
      if (obj instanceof Array || useArguments) {
        return string.replace(/\%s/g, function(a, b) {
          i++;
          if (useArguments) {
            if (typeof _arguments[i] == "string") {
              return _arguments[i];
            } else {
              throw new Error("Arguments element is an invalid type");
            }
          }
          return obj[i];
        });
      } else {
        return string.replace(/{([^{}]*)}/g, function(a, b) {
          var r = obj[b];
          return typeof r === "string" || typeof r === "number" ? r : a;
        });
      }
    }, dayString:function(digit) {
      var lastFigure = digit % 10;
      if (digit > 11 && digit < 15) {
        return "\u0434\u043d\u0435\u0439";
      } else {
        if (lastFigure == 1) {
          return "\u0434\u0435\u043d\u044c";
        }
        if (lastFigure > 1 && lastFigure < 5) {
          return "\u0434\u043d\u044f";
        }
        if (lastFigure == 0 || lastFigure >= 5) {
          return "\u0434\u043d\u0435\u0439";
        }
      }
    }}});
  })();
  (function() {
    HM.define("hm.core.data.reader.AbstractReader", {config:{dataProperty:"data", totalProperty:"total", successProperty:"success", messageProperty:"message", type:"json"}, read:function(data) {
    }});
    hm.core.data.reader.AbstractReader.factory = hm.core.ClassManager.createFactory("type", {json:"hm.core.data.reader.JsonReader"});
  })();
  (function() {
    HM.define("hm.core.data.proxy.AbstractProxy", {extend:"hm.core.ObservableClass", requires:["hm.core.data.reader.AbstractReader"], config:{reader:"json", model:"hm.core.data.Model", async:true, type:"xhr", data:null}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var reader = this.config.reader;
      if (typeof reader === "string") {
        reader = {type:reader};
      } else {
        reader = reader || {type:"json"};
      }
      this._reader = hm.core.data.reader.AbstractReader.factory(reader);
    }, createItems:function(data) {
      var items = [], modelClass = this.config.model;
      for (var i = 0;i < data.length;i++) {
        items.push(HM.create(modelClass, {data:data[i]}));
      }
      return items;
    }, read:function(offset, limit, params) {
    }, readMore:function(offset, limit, params) {
    }});
    hm.core.data.proxy.AbstractProxy.factory = hm.core.ClassManager.createFactory("type", {xhr:"hm.core.data.proxy.XhrProxy", memory:"hm.core.data.proxy.MemoryProxy"});
  })();
  (function() {
    HM.define("hm.core.data.Store", {extend:"hm.core.ObservableClass", requires:["hm.core.data.proxy.AbstractProxy"], config:{data:null, autoLoad:true, pageSize:20, pagination:true, proxy:null, offset:0}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._items = [];
      this._offset = this.config.offset;
      var proxy = this.config.proxy;
      if (typeof proxy === "string") {
        proxy = {type:proxy};
      } else {
        if (!proxy) {
          proxy = {type:"memory"};
        }
      }
      proxy.data = this.config.data;
      proxy.listeners = {data_loaded:this._onProxyDataLoaded, scope:this};
      this._proxy = hm.core.data.proxy.AbstractProxy.factory(proxy);
      if (this.config.autoLoad) {
        this.load();
      }
    }, _readProxy:function(params, method) {
      method = method || "load";
      if (this.config.pagination) {
        this._proxy.read(this.getOffset(), this.config.pageSize, params, method);
      } else {
        this._proxy.read(null, null, params, method);
      }
    }, _load:function(data, method) {
      var items = data.items || [], item;
      for (var i = 0, ln = items.length;i < ln;i++) {
        items[i].on("change", this._onItemChange, this);
      }
      var resultArray = [];
      if (method === "more") {
        resultArray.push.apply(resultArray, this._items);
      }
      resultArray.push.apply(resultArray, items);
      this._items = resultArray;
      this._count = data.total;
      this.fireEvent("data_loaded", this, items, method);
    }, _onProxyDataLoaded:function(e, data, method) {
      this._load(data, method);
    }, _onItemChange:function(e, name, value) {
      var item = e.target;
      this.fireEvent("item_changed", this, item, name, value);
    }, load:function(params) {
      this._readProxy(params);
    }, loadMore:function(params) {
      this._readProxy(params, "more");
    }, getOffset:function() {
      return this._offset;
    }, getCount:function() {
      return this._count;
    }, getItemsCount:function() {
      return this._items.length;
    }, getItem:function(i) {
      return this._items[i];
    }, getProxy:function() {
      return this._proxy;
    }});
  })();
  (function() {
    HM.define("hm.module.es.data.store.EventServiceStore", {extend:"hm.core.data.Store", requires:["hm.core.Date"], config:{pagination:false, proxy:{type:"xhr", reader:"hm.module.es.data.reader.EventGroupsReader", url:"/es/events/get", model:"hm.module.es.data.model.EventGroupModel", params:{types:["forumAddMessage", "blogAddMessage", "forumInternalAddMessage", "wikiAddPage", "wikiModifyPage", "blogInternalAddMessage", "wikiInternalAddPage", "wikiInternalModifyPage", "courseAddMaterial", "courseAttachLesson", 
    "courseScoreTriggered", "courseTaskComplete", "courseTaskAction", "commentAdd", "commentInternalAdd", "courseTaskScoreTriggered", "personalMessageSend", "motivationMessage", "courseAddMessage"], group:1, showAll:1}}}, LOAD_PERIOD:6E4 * 60 * 24 * 7, load:function(params) {      
	  var load = arguments.callee;
      params = params || {};
      params.fromTime = hm.core.Date.getServerTime(Date.now() - this.LOAD_PERIOD) / 1E3;
      params.forceStats = 1;
      this._lastFromTime = params.fromTime;
	  //loading events is disabled
      //this.callParent(load, [params]);
    }, loadMore:function(params) {
      var loadMore = arguments.callee;
      if (!this._lastFromTime) {
        this.loadMore(params);
        return;
      }
      params = params || {};
      params.toTime = this._lastFromTime;
      params.fromTime = this._lastFromTime - this.LOAD_PERIOD / 1E3;
      params.forceStats = 0;
      this._lastFromTime = params.fromTime;
      this.callParent(loadMore, [params]);
    }});
    HM.singleton(hm.module.es.data.store.EventServiceStore);
  })();
  (function() {
	  
    HM.define("hm.module.es.data.store.EventServiceCourseStore", {extend:"hm.module.es.data.store.EventServiceStore", requires:["hm.core.Date"], config:{autoLoad:false, pagination:false, proxy:{type:"xhr", reader:"hm.module.es.data.reader.EventGroupsReader", url:"/es/events/get", model:"hm.module.es.data.model.EventGroupModel", params:{types:["courseAddMaterial", "courseAttachLesson", "courseScoreTriggered", "courseTaskComplete", "courseTaskAction", "motivationMessage", "courseAddMessage"], group:1, showAll:1}}}, load:function(params) {
      hm.core.data.Store.prototype.load.call(this, params);	  
    }, loadMore:function() {
      return;
    }});
  })();
  (function() {
    HM.define("hm.core.data.proxy.MemoryProxy", {extend:"hm.core.data.proxy.AbstractProxy", config:{}, read:function(offset, limit, params) {
      var data = this.config.data;
      if (offset !== null && limit !== null) {
        data = data.splice(offset, limit);
      }
      if (this.config.async) {
        setTimeout(this._onTimeout.bind(this, data), 0);
      } else {
        this._onTimeout(data);
      }
    }, _onTimeout:function(data) {
      data = this._reader.read(data);
      data.items = this.createItems(data.items);
      data.total = data.length;
      this.fireEvent("data_loaded", data);
    }});
  })();
  (function() {
    HM.define("hm.core.data.proxy.XhrProxy", {extend:"hm.core.data.proxy.AbstractProxy", config:{url:"", method:"get", cache:false, async:true, params:null, offsetProperty:"offset", limitProperty:"limit"}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
    }, read:function(offset, limit, additionalParams, returnData) {
      var params = this.config.params || {};
      additionalParams = additionalParams || {};
      params = $.extend({}, params, additionalParams);
      if (offset !== null && limit !== null) {
        params[this.config.offsetProperty] = offset;
        params[this.config.limitProperty] = limit;
      }
      $.ajax({url:this.config.url, type:this.config.method, data:params, cache:this.config.cache, async:this.config.async, success:this._onXhrRequestSuccess.bind(this, returnData)});
    }, _onXhrRequestSuccess:function(returnData, data, textStatus, jqXHR) {
      var readData = this._reader.read(data);
      readData.items = this.createItems(readData.items);
      this.fireEvent("data_loaded", readData, returnData);
    }});
  })();
  (function() {
    HM.define("hm.core.data.reader.JsonReader", {extend:"hm.core.data.reader.AbstractReader", read:function(data) {
      var Obj = hm.core.Object;
      return{items:Obj.getProperty(this.config.dataProperty, data), total:Obj.getProperty(this.config.totalProperty, data), success:Obj.getProperty(this.config.successProperty, data), message:Obj.getProperty(this.config.messageProperty, data), source:data};
    }});
  })();
  (function() {
    HM.define("hm.module.es.data.reader.EventGroupsReader", {extend:"hm.core.data.reader.JsonReader", read:function(data) {
      var read = arguments.callee;
      var result = this.callParent(read, arguments), items = result.items, itemsArray = [], item;
      for (var i in items) {
        if (!items.hasOwnProperty(i)) {
          continue;
        }
        item = items[i];
        itemsArray.push({name:i, description:JSON.parse(item.group_description), type:item.group_type, events:item.events, lastModify:this._getGroupLastModifyTimestamp(item)});
      }
      itemsArray.sort(function(a, b) {
        return b.lastModify - a.lastModify;
      });
      result.items = itemsArray;
      return result;
    }, _getGroupLastModifyTimestamp:function(group) {
      var groupEvents = group.events, result = 0;
      for (var i = 0;i < groupEvents.length;i++) {
        var eventCreateTime = groupEvents[i].eventCreateTime;
        if (eventCreateTime > result) {
          result = eventCreateTime;
        }
      }
      return result;
    }});
  })();
  (function() {
    HM.define("hm.core.template.helper.AbstractHelper", {name:"", help:function(text) {
      return text;
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var me = this;
      Handlebars.registerHelper(this.name, function() {
        var args = Array.prototype.slice.call(arguments);
        args.push(this);
        return me.help.apply(me, args);
      });
    }});
  })();
  (function() {
    HM.define("hm.core.template.helper.IncludeHelper", {extend:"hm.core.template.helper.AbstractHelper", name:"include", help:function(tplCode, obj, view) {
      return new Handlebars.SafeString(hm.core.template.Template.get(tplCode + ".hbs")(view));
    }});
  })();
  (function() {
    HM.define("hm.core.template.helper.date.DateTimeHelper", {extend:"hm.core.template.helper.AbstractHelper", name:"datetime", help:function(dt, pattern) {
      dt = hm.core.Date.parse(dt);
      return hm.core.Date.format(dt, pattern || "dd.mm.yyyy HH:MM:ss");
    }});
  })();
  (function() {
    HM.define("hm.core.template.helper.text.CropText", {extend:"hm.core.template.helper.AbstractHelper", name:"cropText", help:function(text, length) {
      if (typeof length === "object") {
        return hm.core.DOM.cropTags(text);
      }
      var text = hm.core.DOM.cropTags(text);
      if (text.length <= length) {
        return text;
      }
      return text.slice(0, length) + "...";
    }});
  })();
  (function() {
    HM.define("hm.core.template.helper.translate.TranslateHelper", {extend:"hm.core.template.helper.AbstractHelper", name:"_", help:function(text) {
      return HM._(text);
    }});
  })();
  (function() {
    HM.define("hm.core.template.Template", {requires:["hm.core.template.helper.date.DateTimeHelper", "hm.core.template.helper.translate.TranslateHelper", "hm.core.template.helper.text.CropText", "hm.core.template.helper.IncludeHelper"]});
    (function() {
      var Template = hm.core.template.Template, ClassManager = hm.core.ClassManager;
      Template._templates = {};
      Template._clear = function(tpl) {
        var tplLines = tpl.split("\n");
        for (var i = 0;i < tplLines.length;i++) {
          tplLines[i] = tplLines[i].trim();
        }
        return tplLines.join("");
      }, Template._compile = function(fileName) {
        var templates = this._templates, tpl = templates[fileName];
        if (typeof tpl === "string") {
          tpl = templates[fileName] = Handlebars.compile(tpl);
        }
        return tpl;
      };
      Template.register = function(fileName, tpl) {
        if (typeof tpl === "function") {
          tpl = Handlebars.template(tpl);
        }
        this._templates[fileName] = tpl;
      };
      Template.get = function(fileName) {			
        if (!(fileName in this._templates)) {			
          var requestFileName = "/dev_tools.php?path=" + encodeURIComponent("/hbs/get/index") + "&tpl=" + encodeURIComponent(fileName), tpl = ClassManager.loadCachedFile(requestFileName);
          this.register(fileName, this._clear(tpl));
        }
        return this._compile(fileName);
      };
      var requiredClasses = hm.core.template.Template.$requiredClasses;
      for (var i = 0;i < requiredClasses.length;i++) {
        if (!requiredClasses[i].extendedFrom(hm.core.template.helper.AbstractHelper)) {
          continue;
        }
        HM.create(requiredClasses[i]);
      }
    })();
  })();
  (function(Template) {
    var registerTemplate = Template.register.bind(Template);
    registerTemplate("hm/core/ui/autocomplete/Autocomplete.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-autocomplete"><input type="text" placeholder="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.placeholder), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" value="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.value), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" /></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/autocomplete/search/Search.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-autocomplete hm-autocomplete-search"><input type="text" placeholder="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.placeholder), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" value="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.value), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 
      '" /><div class="hm-autocomplete-button"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/container/layout/TabLayout.button.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-layout-tab-button">';
      if (helper = helpers.title) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.title;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '<span class="hm-layout-tab-button-close"></span></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/container/layout/TabLayout.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-layout-tab"><div class="hm-layout-tab-header"></div><div class="hm-layout-tab-container"></div></div>';
    });
    registerTemplate("hm/core/ui/form/element/AbstractElement.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-form-element"><div class="hm-form-element-label">';
      if (helper = helpers.getLabel) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getLabel;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</div><div class="hm-form-element-container"></div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/Select.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-form-select"><input type="hidden" name="';
      if (helper = helpers.getName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '" value="';
      if (helper = helpers.getValue) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getValue;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-form-select-trigger"></div><div class="hm-form-select-text">';
      if (helper = helpers.getTextValue) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTextValue;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/graph/amcharts/Chart.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div id="';
      if (helper = helpers.chartContainerId) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.chartContainerId;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><p>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 Flash Player...", options) : helperMissing.call(depth0, "_", "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 Flash Player...", options))) + "</p></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/progressbar/Progressbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-progressbar-wrap"><div class="ui-progressbar"><div class="gradient-me"></div></div></div>';
    });
    registerTemplate("hm/core/ui/tooltip/Tooltip.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-tooltip"><div class="hm-tooltip-shadow"><div class="hm-tooltip-shadow-arrow"></div></div><div class="hm-tooltip-content"></div><div class="hm-tooltip-arrow"></div></div>';
    });
    registerTemplate("hm/core/ui/window/dialog/Dialog.loading.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-dialog-loading">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u0438\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430", options) : helperMissing.call(depth0, "_", "\u041f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435, \u0438\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430", options))) + "...</div>";
      return buffer;
    });
    registerTemplate("hm/module/base/ui/ajax/AjaxSpinner.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="ajax-spinner ajax-spinner-global" style="display: none;"><div class="ajax-spinner-wrapper">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430", options) : helperMissing.call(depth0, "_", "\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430", options))) + "...</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/base/ui/like/Like.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, blockHelperMissing = helpers.blockHelperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        buffer += '<a class="hm-like-button-dislike"><div class="hm-like-button-dislike-image"></div><span>';
        if (helper = helpers.dislikeCount) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.dislikeCount;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + "</span></a>";
        return buffer;
      }
      buffer += '<span class="hm-like-liked hm-like"><a class="hm-like-button-like"><div class="hm-like-button-like-image"></div><span class="hm-like-button-like-counter">';
      if (helper = helpers.likeCount) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.likeCount;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</span></a>";
      options = {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data};
      if (helper = helpers.showDislikeButton) {
        stack1 = helper.call(depth0, options);
      } else {
        helper = depth0 && depth0.showDislikeButton;
        stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
      }
      if (!helpers.showDislikeButton) {
        stack1 = blockHelperMissing.call(depth0, stack1, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</span>";
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-subject-list-item-description"><ul><li><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-lessons">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0417\u0430\u043d\u044f\u0442\u0438\u044f", options) : helperMissing.call(depth0, "_", "\u0417\u0430\u043d\u044f\u0442\u0438\u044f", options))) + '</a></li><li><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-progress">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441", options) : helperMissing.call(depth0, "_", "\u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441", options))) + '</a></li><li><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-events">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f", options) : helperMissing.call(depth0, "_", "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f", options))) + "</a></li></ul>" + escapeExpression((helper = helpers.include || depth0 && depth0.include, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      "hm/module/course/ui/list/CourseDescriptionTabs.lessons", options) : helperMissing.call(depth0, "include", "hm/module/course/ui/list/CourseDescriptionTabs.lessons", options))) + '<div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-progress" class="hm-subject-list-item-description-progress"></div><div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-events" class="hm-subject-list-item-description-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.lessons.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += "<ul>";		
        stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});		
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</ul>";
        return buffer;
      }
      function program2(depth0, data) {
        var buffer = "", stack1;
        buffer += '<li class="hm-subject-list-item-description-lesson ';
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += " ";
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isExpired, {hash:{}, inverse:self.noop, fn:self.program(5, program5, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '"><div class="hm-subject-list-item-description-lesson-date ">';        
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(7, program7, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        stack1 = helpers.unless.call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(9, program9, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }		
        buffer += '</div>';
		buffer += '<div class="lesson-status-tab">'+escapeExpression((stack1 = depth0 && depth0.status, typeof stack1 === functionType ? stack1.apply(depth0) : stack1))+'</div>';		
		
		let additionalClass = '';
		if(depth0.failLesson == true){
			additionalClass = ' isFailLesson ';
		}
		buffer += '<div class="hm-subject-list-item-description-lesson-title"><a class="' + additionalClass + '" href="' + escapeExpression((stack1 = depth0 && depth0.url, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</a></div></li>";
		return buffer;
      }
      function program3(depth0, data) {
        return "hm-subject-list-item-description-lesson-free";
      }
      function program5(depth0, data) {
        return "hm-subject-list-item-description-lesson-expired";
      }
      function program7(depth0, data) {
        return "\u221e";
      }
      function program9(depth0, data) {
        var stack1;
        return escapeExpression((stack1 = depth0 && depth0.end, typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      }
      function program11(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-subject-list-item-description-panel-empty"><div>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0417\u0430\u043d\u044f\u0442\u0438\u0439 \u043d\u0435\u0442", options) : helperMissing.call(depth0, "_", "\u0417\u0430\u043d\u044f\u0442\u0438\u0439 \u043d\u0435\u0442", options))) + "</div></div>";
        return buffer;
      }
      buffer += '<div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-lessons" class="hm-subject-list-item-description-lessons">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(11, program11, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</div>";
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.progress.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-subject-list-item-description-progress-chart"><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-best"><div class="hm-subject-list-item-description-progress-bar-caption">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", options) : helperMissing.call(depth0, 
      "_", "\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", options))) + '</div><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1.best), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-my"><div class="hm-subject-list-item-description-progress-bar-caption">' + 
      escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0432\u0430\u0448 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", options) : helperMissing.call(depth0, "_", "\u0432\u0430\u0448 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", options))) + '</div><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + escapeExpression((stack1 = 
      (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1.my), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-axis"><div class="hm-subject-list-item-description-progress-bar-rect"></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-3"><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + 
      escapeExpression((stack1 = (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1[3]), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/course/ui/marksheet/ScrollBar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-marksheet-scrollbar" unselectable="on"><div class="hm-marksheet-scrollbar-scroller"></div></div>';
    });
    registerTemplate("hm/module/develop/ui/panel/DevPanel.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, self = this, functionType = "function", blockHelperMissing = helpers.blockHelperMissing;
      function program1(depth0, data) {
        return " hm-dev-button-debug-switcher-enabled";
      }
      buffer += '<div class="hm-dev-panel"><div class="hm-dev-panel-header">\u041f\u0430\u043d\u0435\u043b\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430</div><div class="hm-dev-panel-body"><div class="hm-dev-button-debug-switcher';
      options = {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data};
      if (helper = helpers.debugEnabled) {
        stack1 = helper.call(depth0, options);
      } else {
        helper = depth0 && depth0.debugEnabled;
        stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
      }
      if (!helpers.debugEnabled) {
        stack1 = blockHelperMissing.call(depth0, stack1, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '">\u0420\u0435\u0436\u0438\u043c \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0444\u0440\u043e\u043d\u0442\u044d\u043d\u0434\u0430</div></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/EventList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, self = this, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += '<div class="hm-es-event-list-header">';
        stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.fullMode), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<h2 class="hm-es-event-list-title">\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</h2></div>';
        return buffer;
      }
      function program2(depth0, data) {
               // return'<a href="#" class="hm-es-event-list-url">\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0451</a>';
        return '<a href="#" class="hm-es-event-list-url">'+HM._("\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0451") + '</a>';		   
	  }
      buffer += '<div class="hm-es-event-list">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showHeader), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-es-event-list-body"></div><div class="hm-es-event-list-body-empty">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0421\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0443\u0441\u0442", options) : helperMissing.call(depth0, "_", "\u0421\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0443\u0441\u0442", 
      options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/DefaultEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, blockHelperMissing = helpers.blockHelperMissing;
      function program1(depth0, data) {
        return'<span class="hm-es-event-list-group-icon-more"></span>';
      }
      buffer += '<div class="hm-es-event-list-group"><h3><span class="hm-es-event-list-group-type">';
      if (helper = helpers.getTypeTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTypeTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><span class="hm-es-event-list-group-title">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.groupTitle), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span>";
      options = {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data};
      if (helper = helpers.needShowMoreIcon) {
        stack1 = helper.call(depth0, options);
      } else {
        helper = depth0 && depth0.needShowMoreIcon;
        stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
      }
      if (!helpers.needShowMoreIcon) {
        stack1 = blockHelperMissing.call(depth0, stack1, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-group-name">';
      if (helper = helpers.getGroupName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getGroupName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/message/MessageEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-group hm-es-event-list-group-messages hm-es-event-list-group-with-avatar"><h3><div class="hm-es-event-list-group-avatar-wrapper"><div class="hm-es-event-list-group-avatar"></div></div><a class="hm-es-event-list-group-name" target="_blank" href="';
      if (helper = helpers.getAuthorUrl) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthorUrl;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '">';
      if (helper = helpers.getAuthorName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthorName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</a><span class="hm-es-event-list-group-action"> ' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0412\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430)", options) : helperMissing.call(depth0, "_", "\u0412\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430)", options))) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/notification/DefaultNotificationEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-group"><h3><span class="hm-es-event-list-group-title">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u041a\u0443\u0440\u0441", options) : helperMissing.call(depth0, "_", "\u041a\u0443\u0440\u0441", options))) + '</span><span class="hm-es-event-list-group-icon-more"></span><span class="hm-es-event-list-group-name">';
      if (helper = helpers.getCourseName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getCourseName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/EventAbstract.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = 
      helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</span> \u043d\u0430\u043f\u0438\u0441\u0430\u043b<div class="hm-es-event-list-item-desc" title="' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, 
      helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), options))) + '">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === 
      false ? stack1 : stack1.text), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options))) + '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/blog/BlogAddMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, 
      "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), 
      typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u0437\u0430\u043f\u0438\u0441\u044c", options) : helperMissing.call(depth0, "_", "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u0437\u0430\u043f\u0438\u0441\u044c", options))) + ' "' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, 
      stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"</div><div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.body), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, 
      stack1 == null || stack1 === false ? stack1 : stack1.body), 100, options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseAddMaterial.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", 
      options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">';
      if (helper = helpers.getAuthor) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthor;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b", options) : helperMissing.call(depth0, "_", "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b", options))) + 
      " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseAttachLesson.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = 
      {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>" + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0412\u0430\u043c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u043d\u043e\u0432\u043e\u0435 \u0437\u0430\u043d\u044f\u0442\u0438\u0435", options) : helperMissing.call(depth0, 
      "_", "\u0412\u0430\u043c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u043d\u043e\u0432\u043e\u0435 \u0437\u0430\u043d\u044f\u0442\u0438\u0435", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseScoreTriggered.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>" + escapeExpression((helper = helpers._ || depth0 && 
      depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0412\u0430\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430", options) : helperMissing.call(depth0, "_", "\u0412\u0430\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430", options))) + '<div class="hm-clear"></div></div>';
      return buffer;
    });    
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskAction.hbs", function(Handlebars, depth0, helpers, partials, data) {		
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : 
      stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b(-\u0430) \u043d\u043e\u0432\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438", options) : helperMissing.call(depth0, "_", "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b(-\u0430) \u043d\u043e\u0432\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438", 
      options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);      
	  if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
	
	/**new**/
	registerTemplate("hm/module/es/ui/event/list/item/course/MotivationMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {	
		
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : 
      stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0423 \u0412\u0430\u0441 \u043D\u043E\u0432\u043E\u0435 \u043C\u043E\u0442\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0435 \u0437\u0430\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043F\u043E \u043A\u0443\u0440\u0441\u0443", options) : helperMissing.call(depth0, "_", "", 
      options))) + '<div class="hm-es-event-list-item-desc motivation-message-text">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);      
	  if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
	registerTemplate("hm/module/es/ui/event/list/item/course/CourseAddMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {	
		
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : 
      stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, " написал(а) Вам сообщение \u0432 \u043A\u0443\u0440\u0441\u0435", options) : helperMissing.call(depth0, "_", "", 
      options))) + 
	  " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.course_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
	  
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);      
	  if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
	  console.log(depth0);
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
	  
    });
	
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskComplete.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : 
      stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b(\u0430) \u0437\u0430\u0434\u0430\u043d\u0438\u0435", options) : helperMissing.call(depth0, "_", "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b(\u0430) \u0437\u0430\u0434\u0430\u043d\u0438\u0435", options))) + " <q>" + escapeExpression((stack1 = 
      (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskScoreTriggered.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = 
      {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>\u0412 \u0437\u0430\u043d\u044f\u0442\u0438\u0438 <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q> \u0412\u0430\u043c \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0430<div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/forum/ForumAddMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, 
      "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), 
      typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435", options) : helperMissing.call(depth0, "_", "\u0434\u043e\u0431\u0430\u0432\u0438\u043b(\u0430) \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435", options))) + ' "' + escapeExpression((stack1 = 
      (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"</div><div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options) : helperMissing.call(depth0, 
      "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/personalMessage/PersonalMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-message" title="' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), options))) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + 
      escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, 
      "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : 
      stack1.message), 100, options))) + '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/wiki/WikiPage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-wiki"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">';
      if (helper = helpers.getAuthor) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthor;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</span> ";
      if (helper = helpers.actionTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.actionTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443", options) : helperMissing.call(depth0, "_", "\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : 
      stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/panel/EventListPanel.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-es-event-panel"><div class="hm-es-event-list-container"></div><div class="hm-es-event-panel-trigger">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435", options) : helperMissing.call(depth0, "_", "\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435", 
      options))) + "<br><span style='font-size: 11px;'>"+HM._("\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u043d\u0430\u0436\u0430\u0442\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f.")+"</span></div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/toolbar/EventToolbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-es-event-toolbar"></div>';
    });
    registerTemplate("hm/module/es/ui/event/toolbar/button/EventToolbarButton.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-es-event-toolbar-button"><span class="hm-es-event-toolbar-button-caption">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.caption), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</span><span class="hm-es-event-toolbar-button-icon-tab"><span class="hm-es-event-toolbar-button-icon">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === 
      false ? stack1 : stack1.count), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></span></div>";
      return buffer;
    });
    registerTemplate("hm/module/user/ui/role/switcher/RoleSwitcher.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<span style="width: 200px; height: 10px; display: inline-block; position: relative;"><div class="hm-roleswitcher"><div class="hm-roleswitcher-left"></div><div class="hm-roleswitcher-center" unselectable="on"></div><div class="hm-roleswitcher-right"><div class="hm-roleswitcher-trigger"></div></div></div></span>';
    });
  })(hm.core.template.Template);
  (function() {
    HM.define("hm.core.ui.Component", {extend:"hm.core.ObservableClass", requires:["hm.core.template.Template"], config:{renderTo:"", elTag:"div", tpl:false, tplByClass:false, hidden:false, autoRender:true}, __construct:function() {
      this._rendered = false;
      var config = this.config;
      if (config.autoRender) {
        this.render();
      }
    }, render:function() {
      if (this._rendered) {
        return;
      }
      this._rendered = true;
      this._init();
      this._initEvents();
      if (this.config.renderTo) {
        if (document.body) {
          this._renderTo();
        } else {
          $(this._renderTo.bind(this));
        }
      }
    }, __destruct:function() {
      var __destruct = arguments.callee;
      this.getEl().remove();
      this.callParent(__destruct, arguments);
    }, _renderTo:function() {
      this._$elRenderTo = $(this.config.renderTo);
      this._$elRenderTo.append(this.el);
    }, _init:function() {
      this._render();
      if (this.config.hidden) {
        this.getEl().hide();
      }
    }, _initEvents:function() {
    }, _renderTemplate:function(tplCode, data) {
      return $(hm.core.template.Template.get(tplCode + ".hbs")(data || this));
    }, _render:function() {
      var config = this.config;
      if (!this.hasTemplate()) {
        this.el = document.createElement(config.elTag);
        this.$el = $(this.el);
      } else {
        var tpl = config.tpl;
        if (config.tplByClass) {
          tpl = this.$className.replace(/\./g, "/");
        }
        this.$el = this._renderTemplate(tpl);
        this.el = this.$el[0];
      }
    }, _beforeShow:function() {
      var event = this.fireEvent("beforeShow", this);
      if (event && event.isPrevented()) {
        return false;
      }
      return true;
    }, _beforeHide:function() {
      var event = this.fireEvent("beforeHide", this);
      if (event && event.isPrevented()) {
        return false;
      }
      return true;
    }, getEl:function() {
      return this.$el;
    }, hasTemplate:function() {
      return this.config.tplByClass || !!this.config.tpl;
    }, elOn:function(event, selector, fn, scope) {
      var $el = this.getEl();
      if (!scope) {
        scope = this;
      }
      fn = fn.bind(scope);
      if (selector) {
        $el.on(event, selector, fn);
      } else {
        $el.on(event, fn);
      }
    }, show:function() {
      if (!this._rendered) {
        this.render();
      }
      if (!this._beforeShow()) {
        return;
      }
      this.getEl().show();
      this.fireEvent("show", this);
      return true;
    }, hide:function() {
      if (!this._beforeHide()) {
        return false;
      }
      this.getEl().hide();
      this.fireEvent("hide", this);
      return true;
    }, toggle:function() {
      if (this.isVisible()) {
        this.hide();
      } else {
        this.show();
      }
    }, isVisible:function() {
      return this.getEl().is(":visible");
    }});
  })();
  (function() {
    HM.define("hm.core.ui.List", {extend:"hm.core.ui.Component", config:{minWidth:"30px", displayField:"name", valueField:"id", collection:null, getCls:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.renderList();
    }, renderList:function() {
      if (!this.config.collection) {
        throw "\u0414\u043b\u044f hm.ui.List \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0438\u043f\u0430 hm.core.Collection";
      }
      var collection = this.config.collection, ln = collection.length();
      if (!ln) {
        return;
      }
      var df = document.createDocumentFragment();
      for (var i = 0;i < ln;i++) {
        var item = document.createElement("div"), model = collection.models[i];
        item.innerHTML = model.get(this.config.displayField);
        item.hmModel = model;
        item.className = "hm-list-item";
        if (this.config.getCls) {
          var itemClassName = this.config.getCls(model);
          if (itemClassName) {
            $(item).addClass(itemClassName);
          }
        }
        df.appendChild(item);
      }
      this.el.appendChild(df);
      this.getEl().bind("click", this.onClick.bind(this));
    }, onClick:function(e) {
      var target = e.target;
      while (target && !$(target).hasClass("hm-list-item")) {
        target = $(target).parent()[0];
      }
      if (!target.hmModel) {
        return;
      }
      this.fireEvent("select", this, target.hmModel);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.autocomplete.Autocomplete", {extend:"hm.core.ui.Component", config:{tplByClass:true, placeholder:null, value:null, source:["c++", "java", "php", "coldfusion", "javascript", "asp", "ruby"]}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._input = this.getEl().find("input");
      this._initAutocomplete();
    }, _initAutocomplete:function() {
      var config = this.config, input = this._input;
      input.autocomplete({source:config.source});
      input.autocomplete("widget").addClass("hm-autocomplete-ui");
    }, _initEvents:function() {
      var config = this.config, input = this._input;
      input.on("autocompleteselect", _.bind(this._onSelect, this));
      input.on("autocompletechange", _.bind(this._onChange, this));
      input.on("autocompleteopen", _.bind(this._onOpen, this));
      input.on("keypress", _.bind(this._onKeypress, this));
    }, getValue:function() {
      return this._input.val();
    }, reset:function() {
      this._input.val("");
      this.fireEvent("change", "");
      this._blur();
    }, setSource:function(src) {
      this._input.autocomplete("option", "source", src);
    }, _blur:function() {
      var me = this;
      setTimeout(function() {
        me._input.trigger("blur");
      }, 0);
    }, _onKeypress:function(e) {
      if (e.which == 13) {
        e.preventDefault();
        this._blur();
      }
    }, _onOpen:function() {
      var $el = this.getEl(), input = this._input, widget = input.autocomplete("widget");
      widget.css("width", $el.outerWidth());
      widget.position({of:$el, my:"left top", at:"left bottom"});
    }, _onSelect:function(e) {
      this._blur();
    }, _onChange:function() {
      this.fireEvent("change", this._input.val());
    }});
  })();
  (function() {
    HM.define("hm.core.ui.autocomplete.search.Search", {extend:"hm.core.ui.autocomplete.Autocomplete", config:{}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._button = this.getEl().find(".hm-autocomplete-button");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var config = this.config, button = this._button, input = this._input;
      button.on("click", _.bind(this._onButtonClick, this));
      input.on("focus", _.bind(this._onFocus, this));
      input.on("blur", _.bind(this._onBlur, this));
    }, _onButtonClick:function() {
      var value = this.getValue(), button = this._button;
      if (value && button.hasClass("hm-autocomplete-button-reset")) {
        this.reset();
      } else {
        this._blur();
      }
    }, _onFocus:function(e) {
      var button = this._button;
      if (!e.isTrigger) {
        button.removeClass("hm-autocomplete-button-reset");
      }
    }, _onBlur:function(e) {
      var value = this.getValue(), button = this._button;
      if (!value) {
        button.removeClass("hm-autocomplete-button-reset");
      } else {
        button.addClass("hm-autocomplete-button-reset");
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.container.layout.AbstractLayout", {extend:"hm.core.ui.Component", addItems:function(items) {
    }});
  })();
  (function() {
    HM.define("hm.core.ui.container.layout.TabLayout", {extend:"hm.core.ui.container.layout.AbstractLayout", addItems:function(items) {
    }});
  })();
  (function() {
    HM.define("hm.core.ui.form.element.AbstractElement", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/form/element/AbstractElement", inputTpl:"", label:"", labelVisible:true, value:"", name:"", isMobileView:false, height:25, width:"auto"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      if (this.inputTpl) {
        this._$elInput = this._renderTemplate(this.inputTpl);
        this.getEl().find(".hm-form-element-container").append(this._$elInput);
      }
      if (this.isMobileView) {
        this.getEl().addClass("hm-form-element-mobile");
      }
    }, getValue:function() {
      return this.value;
    }, getName:function() {
      return this.name;
    }, getLabel:function() {
      return this.label;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.form.element.Select", {extend:"hm.core.ui.form.element.AbstractElement", config:{inputTpl:"hm/core/ui/form/element/Select", renderTo:"body"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.form.element.inline_editor.InlineEditor", {extend:"hm.core.ui.Component", config:{saveUrl:""}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      $el.addClass("hm-ui-InlineEditor");
      $el.attr("contenteditable", "true");
      this.setText($(this.renderTo).text(), true);
      $(this.renderTo).text("");
    }, _initEvents:function() {
      this.getEl().on("blur", this.onBlur.bind(this));
    }, setText:function(text, notSave) {
      this.getEl().text(text);
      if (text !== this.text && !notSave) {
        $.ajax({url:this.saveUrl, type:"post", success:this.onSaveSuccess.bind(this), error:this.onSaveFailure.bind(this), data:{text:text}});
      }
      this.text = text;
    }, onBlur:function() {
      this.setText(this.getEl().text());
    }, onSaveSuccess:function() {
    }, onSaveFailure:function() {
      elsHelpers.alert(HM._("\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c! \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0437\u0436\u0435."));
    }});
  })();
  (function() {
    var chartsCount = 0;
    HM.define("hm.core.ui.graph.GraphCanvas", {extend:"hm.core.ui.Component", config:{width:280, height:280}, __destruct:function() {
      var __destruct = arguments.callee;
      this._freeBoard();
      this.callParent(__destruct, arguments);
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      this._initBoard();
    }, _initBoard:function() {
      var $el = this.getEl(), config = this.config, id = this._generateId();
      $el.attr("id", id);
      $el.css({width:config.width, height:config.height});
      JXG.Options.point.visible = false;
      JXG.Options.point.showInfobox = false;
      JXG.Options.point.withLabel = false;
      JXG.Options.point.size = 1;
      JXG.Options.polygon.vertices.withLabel = false;
      JXG.Options.polygon.withLines = false;
      JXG.Options.line.visible = false;
      JXG.Options.circle.visible = false;
      JXG.Options.text.highlightStrokeOpacity = 1;
      JXG.Options.text.highlightStrokeColor = "black";
      JXG.Options.polygon.label.highlightStrokeColor = "black";
      var board = JXG.JSXGraph.initBoard(id, {originX:0, unitX:1, unitY:1, axis:false, grid:false, showCopyright:false, showNavigation:false, transformations:false});
      this._board = board;
      $el.on("mouseleave", function(e) {
        var currentTip = hm.core.ui.tooltip.Tooltip.currentTip;
        if (!currentTip) {
          return;
        }
        setTimeout(function() {
          if (hm.core.ui.tooltip.Tooltip.mouseOverTooltip) {
            return;
          }
          currentTip.hide();
        }, 0);
      });
      board.resizeContainer(config.width, config.height, true);
      board.origin.scrCoords[2] = this._board.canvasHeight;
      board.update();
    }, clear:function() {
      this._freeBoard();
      this._initBoard();
    }, getBoard:function() {
      return this._board;
    }, _freeBoard:function() {
      JXG.JSXGraph.freeBoard(this._board);
    }, _generateId:function() {
      return "JSXGraph_" + ++chartsCount;
    }});
  })();
  (function() {
    var bridgeInited = false, chartCount = 0;
    HM.define("hm.core.ui.graph.amcharts.Chart", {extend:"hm.core.ui.Component", config:{tplByClass:true, amChartsPath:"/js/lib/amcharts", infoBlockId:"", chartType:"amcolumn", dataUrl:"", settingUrl:"", height:300, width:"100%"}, _init:function() {
      var _init = arguments.callee;
      var config = this.config, me = this;
      this.export_url = hm.core.Url.getInstance().url({app:"", module:"infoblock", controller:config.infoBlockId, action:"get-data", format:"csv"});
      if (!bridgeInited) {
        this._initAmChartsBridge();
      }
      this.chartId = ++chartCount;
      this.infoblockId = config.infoBlockId === "" ? "hm-chart-" + this.chartId : config.infoBlockId;
      this.chartContainerId = this.infoblockId + "-chart-container";
      this.swfObjectId = this.infoblockId + "-chart";
      this.callParent(_init, arguments);
      yepnope({test:$.url, nope:"/js/lib/jquery/jquery.urldecoder.min.js", complete:function() {
        yepnope({test:window.SWFObject, nope:config.amChartsPath + "/swfobject.js", complete:function() {
          $(me._onDocReady.bind(me));
        }});
      }});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _onDocReady:function() {
      var config = this.config, swfUrl = config.amChartsPath + "/" + config.chartType + ".swf";
      var Chart = new SWFObject(swfUrl, this.swfObjectId, config.width, config.height, "8", "#FFFFFF");
      Chart.addVariable("chart_id", this.swfObjectId);
      Chart.addVariable("path", config.amChartsPath + "/");
      Chart.addVariable("settings_file", encodeURIComponent(config.settingUrl));
      Chart.addVariable("data_file", encodeURIComponent(config.dataUrl));
      Chart.addVariable("loading_settings", HM._("\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430"));
      Chart.addVariable("loading_data", HM._("\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430"));
      Chart.addParam("wmode", "opaque");
      Chart.write(this.chartContainerId);
      console.log(Chart);
      this._chart = Chart;
    }, _initAmChartsBridge:function() {
      window.data = new Array;
      window.amChartInited = function(chart_id) {
        chart = document.getElementById(chart_id);
        chart.getData();
      };
      window.amReturnData = function(chart_id, chart_data) {
        data[chart_id] = $.url.decode(chart_data);
        eval(chart_id.replace("-", "") + "Inited()");
      };
      bridgeInited = true;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.progressbar.Progressbar", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/progressbar/Progressbar", renderTo:"", value:30, maxValue:100, valueColor:"#5e7aa8", label:null, width:null, height:null, size:"normal"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $progressbar = this._getProgressbar(), config = this.config;
      if (config.size) {
        $progressbar.addClass("progressbar-" + config.size);
      }
      if (config.width) {
        $progressbar.width(config.width);
      }
      if (config.height) {
        $progressbar.height(config.height);
      }
      this._initMaxValue();
      this._initBarValue();
      if (config.label) {
        $progressbar.append('<div class="ui-progressbar-label">' + config.label + "</div>");
      }
    }, _initMaxValue:function() {
      this._maxValue = this.config.maxValue;
    }, _initBarValue:function() {
      var config = this.config;
      this.addBarValue(config.value, config.valueColor);
    }, addBarValue:function(value, color, offset, zIndex) {
      var $progressbar = this._getProgressbar(), config = this.config, $barValue = $('<div class="ui-progressbar-value"></div>');
      var css = {"width":this._getPercent(value) + "%", "background-color":color, "z-index":10};
      if (offset) {
        css["left"] = this._getPercent(offset) + "%";
      } else {
        $barValue.addClass("ui-corner-left");
      }
      if (zIndex) {
        css["z-index"] = zIndex;
      }
      if (config.width) {
        $barValue.width(config.width);
      }
      if (config.height) {
        $barValue.height(config.height);
        $barValue.css("margin-top", "-" + $barValue.css("height"));
        $progressbar.find(".gradient-me").height(config.height);
      }
      $barValue.css(css);
      $progressbar.append($barValue);
      return $barValue;
    }, _getProgressbar:function() {
      if (this._$progressbar === undefined) {
        this._$progressbar = this.getEl().find(".ui-progressbar");
      }
      return this._$progressbar;
    }, _getPercent:function(value) {
      return Math.round(value / this._maxValue * 100);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.progressbar.cumulative.ProgressbarCumulative", {extend:"hm.core.ui.progressbar.Progressbar", config:{bestValueColor:"#51C54C", bestValue:null, altValue:null, bestAltValue:null, maxAltValue:null, targetValue:null}, _initMaxValue:function() {
      var config = this.config;
      this._maxValue = config.maxValue + config.maxAltValue;
    }, _initBarValue:function() {
      var _initBarValue = arguments.callee;
      this.callParent(_initBarValue, arguments);
      var config = this.config;
      this.addBarValue(config.bestValue, config.bestValueColor, null, 9);
      this.addBarValue(config.altValue, config.valueColor, config.maxValue);
      this.addBarValue(config.bestAltValue, config.bestValueColor, config.maxValue, 9);
      this._addTargetLine(config.targetValue);
      this._addAltLine(config.maxValue, "\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435");
      this._addAltLine(0, "\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435", {lineColor:"transparent", hideValueLabel:true});
    }, _addTargetLine:function(value) {
      var $progressbar = this._getProgressbar();
      var $targetvalue = $('<div class="hm-progressbar-line hm-progressbar-simple-line">' + '<div class="hm-progressbar-value-label">' + value + "</div>" + '<div class="hm-progressbar-flag"></div>' + "</div>");
      $targetvalue.css("left", this._getPercent(value) + "%");
      $progressbar.append($targetvalue);
    }, _addAltLine:function(value, text, options) {
      var $progressbar = this._getProgressbar();
      var $targetvalue = $('<div class="hm-progressbar-line hm-progressbar-alt-line">' + '<div class="hm-progressbar-value-label">' + value + "</div>" + '<div class="hm-progressbar-text-label">' + text + "</div>" + "</div>");
      if (options) {
        if (options["lineColor"]) {
          $targetvalue.css("background-color", options["lineColor"]);
        }
        if (options["hideValueLabel"]) {
          $targetvalue.find(".hm-progressbar-value-label").hide();
        }
        if (options["hideTextLabel"]) {
          $targetvalue.find(".hm-progressbar-text-label").hide();
        }
      }
      $targetvalue.css("left", this._getPercent(value) + "%");
      $progressbar.append($targetvalue);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.tooltip.Tooltip", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/tooltip/Tooltip", contentTpl:null, renderTo:"body", showDelay:0, followPointer:false, posX:null, posY:null, arrowDirection:"up", width:"auto"}, __destruct:function() {
      var __destruct = arguments.callee;
      var $doc = HM.$document();
      $doc.off("mousemove", this._showWithDelayEvent);
      $doc.off("mousemove", this._updatePositionEvent);
      if (hm.core.ui.tooltip.Tooltip.currentTip === this) {
        hm.core.ui.tooltip.Tooltip.currentTip = null;
      }
      this.callParent(__destruct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      this._arrow = $el.find(".hm-tooltip-arrow");
      this._resetArrowDirection();
      $el.css("width", this.config.width);
      this._contentConatiner = $el.find(".hm-tooltip-content");
    }, _initEvents:function() {
      this._showWithDelayEvent = this._showWithDelay.bind(this);
      this._updatePositionEvent = this._updatePosition.bind(this);
      this.elOn("mouseenter", null, this._onMouseEnter);
      this.elOn("mouseleave", null, this._onMouseLeave);
    }, setContent:function(newData) {
      var $container = this._contentConatiner;
      $container.contents().detach();
      $container.append(newData);
      this.updateArrowPosition();
      return newData;
    }, updateArrowPosition:function() {
      var config = this.config;
      if (config.posX !== null && config.posY !== null) {
        this._setRealPosition(config.posX, config.posY);
      }
    }, empty:function() {
      this._contentConatiner.empty();
    }, renderContent:function(newData, tpl) {
      var template = tpl;
      if (!template) {
        template = this.config.contentTpl;
        if (template === null) {
          console.error("\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0448\u0430\u0431\u043b\u043e\u043d.");
        }
      }
      console.log(newData);
      var $result = this._renderTemplate(template, newData);
      this.setContent($result);
      return $result;
    }, show:function(forceInstant) {
      var show = arguments.callee;
      var TooltipClass = hm.core.ui.tooltip.Tooltip, currentTip = TooltipClass.currentTip;
      if (currentTip && currentTip !== this) {
        currentTip.hide();
      }
      TooltipClass.currentTip = this;
      var config = this.config;
      if (config.showDelay > 0 && forceInstant !== true) {
        HM.$document().on("mousemove", this._showWithDelayEvent);
        return;
      }
      if (this.isVisible()) {
        return true;
      }
      if (!this.callParent(show)) {
        return false;
      }
      var posX = config.posX, posY = config.posY, followPointer = config.followPointer;
      if (!followPointer && (posX !== null && posY !== null)) {
        this._setRealPosition(posX, posY);
      }
      if (followPointer) {
        HM.$document().on("mousemove", this._updatePositionEvent);
      }
    }, hide:function() {
      var hide = arguments.callee;
      if (this.showTimer) {
        clearTimeout(this.showTimer);
        delete this.showTimer;
      }
      if (hm.core.ui.tooltip.Tooltip.mouseOverTooltip === this) {
        delete hm.core.ui.tooltip.Tooltip.mouseOverTooltip;
      }
      if (hm.core.ui.tooltip.Tooltip.currentTip === this) {
        delete hm.core.ui.tooltip.Tooltip.currentTip;
      }
      if (this.config.showDelay > 0) {
        HM.$document().off("mousemove", this._showWithDelayEvent);
      }
      if (this.config.followPointer) {
        HM.$document().off("mousemove", this._updatePositionEvent);
      }
      if (!this.isVisible()) {
        return true;
      }
      if (!this.callParent(hide, arguments)) {
        return false;
      }
      return true;
    }, showAt:function(x, y, forceInstant) {
      this.config.posX = x;
      this.config.posY = y;
      this.show(forceInstant);
    }, _showWithDelay:function(e) {
      var me = this;
      clearTimeout(this.showTimer);
      if (this.showTimer) {
        clearTimeout(this.showTimer);
      }
      this.showTimer = setTimeout(function() {
        if (me.config.followPointer) {
          me._setRealPosition(e.pageX, e.pageY);
        }
        HM.$document().off("mousemove", me._showWithDelayEvent);
        delete me.showTimer;
        me.show(true);
      }, this.config.showDelay);
    }, isVisible:function() {
      return this.getEl().is(":visible");
    }, _setArrowDirection:function(str) {
      var $el = this.getEl();
      $el.removeClass("hm-tooltip-arrow-left hm-tooltip-arrow-right hm-tooltip-arrow-down hm-tooltip-arrow-up");
      switch(str) {
        case "left":
          $el.addClass("hm-tooltip-arrow-left");
          break;
        case "right":
          $el.addClass("hm-tooltip-arrow-right");
          break;
        case "down":
          $el.addClass("hm-tooltip-arrow-down");
          break;
        case "up":
        ;
        default:
          $el.addClass("hm-tooltip-arrow-up");
          break;
      }
      this._currentarrowDirection = str;
    }, _resetArrowDirection:function() {
      this._setArrowDirection(this.config.arrowDirection);
    }, _setRealPosition:function(x, y) {
      var $el = this.$el;
      var newPosX = x;
      var newPosY = y;
      var arrow = this._arrow;
      var arrowDirection = this.config.arrowDirection;
      switch(arrowDirection) {
        case "down":
          newPosY -= $el.outerHeight() + 8;
          newPosX -= $el.width() / 2;
          if (this.config.followPointer) {
            newPosY -= 8;
          }
          break;
        case "left":
          break;
        case "right":
          break;
        case "up":
        ;
        default:
          newPosX -= $el.width() / 2;
          newPosY += 8;
          if (this.config.followPointer) {
            newPosY += 10;
          }
          break;
      }
      arrow.attr("style", "");
      if (newPosX < 0) {
        switch(this.config.arrowDirection) {
          case "down":
          ;
          case "up":
            arrow.css("margin-left", newPosX);
            break;
        }
        newPosX = 0;
      }
      $el.css({left:newPosX, top:newPosY});
    }, _updatePosition:function(e) {
      this._setRealPosition(e.pageX, e.pageY);
    }, _beforeHide:function() {
      var _beforeHide = arguments.callee;
      if (this._notHide) {
        return false;
      }
      return this.callParent(_beforeHide, arguments);
    }, _onMouseLeave:function() {
      if (!this.hide()) {
        return false;
      }
      if (hm.core.ui.tooltip.Tooltip.mouseOverTooltip === this) {
        hm.core.ui.tooltip.Tooltip.mouseOverTooltip = null;
      }
      return true;
    }, _onMouseEnter:function() {
      hm.core.ui.tooltip.Tooltip.mouseOverTooltip = this;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.window.Window", {extend:"hm.core.ui.Component", config:{title:"", resizable:false, closeOnEscape:true, text:"\u0443\u0446\u0430\u0443\u0446", contentUrl:false, renderTo:"body", width:"50%", maxHeight:400}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this.getEl().dialog({resizable:this.resizable, title:this.title, closeOnEscape:this.closeOnEscape, autoOpen:true, width:this.width});
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.getEl().addClass("hm-window");
      this.getEl().css({maxHeight:this.maxHeight});
      var me = this;
      if (this.contentUrl) {
        this.getEl().html('<div class="hm-window-ajax-loader"></div>');
        $.ajax({url:this.contentUrl, async:true}).done(function(data) {
          me.$el.html(data);
        });
      } else {
        this.getEl().text(this.text);
      }
    }, show:function() {
    }});
  })();
  (function() {
    HM.define("hm.module.message.ui.ViewMessageDialog", {extend:"hm.core.ui.window.Window", config:{title:"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f", message_id:0}, _init:function() {
      var _init = arguments.callee;
      this.contentUrl = HM.getService("Message").getViewMessageUrl(this.message_id);
      this.callParent(_init, arguments);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.window.dialog.Dialog", {extend:"hm.core.ui.Component", config:{printable:false, renderTo:"body", width:690, autoShow:true, resizable:false, className:"", closeOnEscape:true, url:"", loadingTpl:"hm/core/ui/window/dialog/Dialog.loading"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, url = config.url;
      if (url !== "") {
        var $el = this.getEl(), $loading = this._renderTemplate(config.loadingTpl, this);
        $el.html("");
        $el.append($loading);
        $.ajax({url:this.config.url, async:true}).done(function(data) {
          $el.html(data);
          $el.dialog("option", "position", {my:"center", at:"center", of:window});
        });
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      var config = this.config;
      this.getEl().dialog({modal:true, closeOnEscape:config.closeOnEscape, dialogClass:config.className, resizable:config.resizable, width:config.width, close:this._onClose.bind(this), autoOpen:false});
      if (config.autoShow) {
        this.show();
      }
    }, show:function() {
      if (this.config.printable) {
        $("#container").addClass("hm-hidden-if-print");
      }
      this.getEl().dialog("open");
    }, toCenter:function() {
      this.getEl().dialog("option", "position", {my:"center", at:"center", of:window});
    }, _onClose:function() {
      if (this.config.printable) {
        $("#container").removeClass("hm-hidden-if-print");
      }
    }});
  })();
  (function() {
    HM.define("hm.module.base.ui.ajax.AjaxSpinner", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/base/ui/ajax/AjaxSpinner", renderTo:"body", toggleDuration:400, toggleEffect:"fade"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._ajaxCounter = 0;
      this._visible = false;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var $doc = $(document);
      $doc.on("ajaxStart", this._onAjaxStart.bind(this));
      $doc.on("ajaxStop", this._onAjaxEnd.bind(this));
      this._onTogglingComplete = this._onTogglingComplete.bind(this);
    }, _show:function() {
      this._toggleRunned = true;
      this._visible = true;
      this.getEl().show({duration:this.config.toggleDuration, effect:this.config.toggleEffect, complete:this._onTogglingComplete});
    }, _hide:function() {
      this._toggleRunned = true;
      this._visible = false;
      this.getEl().hide({duration:this.config.toggleDuration, effect:this.config.toggleEffect, complete:this._onTogglingComplete});
    }, _checkState:function() {
      if (this._toggleRunned || this._disabled) {
        return;
      }
      if (this._ajaxCounter > 0 && !this._visible) {
        this._show();
      }
      if (this._ajaxCounter === 0 && this._visible) {
        this._hide();
      }
    }, disable:function() {
      this._disabled = true;
      this._visible = false;
      this.getEl().hide();
    }, _onTogglingComplete:function() {
      this._toggleRunned = false;
      this._checkState();
    }, _onAjaxStart:function() {
      this._ajaxCounter++;
      this._checkState();
    }, _onAjaxEnd:function() {
      this._ajaxCounter--;
      this._checkState();
    }});
    HM.singleton(hm.module.base.ui.ajax.AjaxSpinner);
  })();
  (function() {
    HM.define("hm.module.base.ui.like.Like", {extend:"hm.core.ui.Component", config:{elTag:"span", likeCount:0, dislikeCount:0, vote:0, itemType:0, itemId:0, showDislikeButton:false, tpl:"hm/module/base/ui/like/Like"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.setVote(this.vote);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-like-button-like", this.onClick_like, this);
      this.elOn("click", ".hm-like-button-dislike", this.onClick_dislike, this);
    }, setLikeCount:function(value) {
      this.$el.find(".hm-like-button-like > .hm-like-button-like-counter").text(value);
      this.likeCount = value;
    }, setDislikeCount:function(value) {
      this.$el.find(".hm-like-button-dislike > .hm-like-button-like-counter").text(value);
      this.dislikeCount = value;
    }, TYPE_LIKE:"LIKE", TYPE_DISLIKE:"DISLIKE", sendLike:function(type) {
      this.locked = true;
      var params = {like_type:type, item_type:this.itemType, item_id:this.itemId};
      $.ajax({type:"post", url:"/like/index/like", data:params, success:this.onSendLikeSuccess.bind(this), error:this.onSendLikeFailure.bind(this)});
    }, setVote:function(vote) {
      this.vote = vote;
      var $el = this.getEl();
      $el.removeClass("hm-like-liked");
      $el.removeClass("hm-like-disliked");
      switch(vote) {
        case -1:
          $el.addClass("hm-like-disliked");
          break;
        case 1:
          $el.addClass("hm-like-liked");
          break;
      }
    }, onClick_like:function() {
      if (this.locked) {
        return;
      }
      if (this.vote == -1) {
        this.setDislikeCount(this.dislikeCount - 1);
      }
      if (this.vote == 1) {
        this.setVote(0);
        this.setLikeCount(this.likeCount - 1);
      } else {
        this.setVote(1);
        this.setLikeCount(this.likeCount + 1);
      }
      this.sendLike(this.TYPE_LIKE);
    }, onClick_dislike:function() {
      if (this.locked) {
        return;
      }
      if (this.vote == 1) {
        this.setLikeCount(this.likeCount - 1);
      }
      if (this.vote == -1) {
        this.setVote(0);
        this.setDislikeCount(this.dislikeCount - 1);
      } else {
        this.setVote(-1);
        this.setDislikeCount(this.dislikeCount + 1);
      }
      this.sendLike(this.TYPE_DISLIKE);
    }, onSendLikeSuccess:function(result) {
      result = $.parseJSON(result);
      if (result.message === "OK") {
        result = result.result;
        this.setLikeCount(result.count_like);
        this.setDislikeCount(result.count_dislike);
      }
      this.locked = false;
    }, onSendLikeFailure:function() {
      alert(result.message);
      this.locked = false;
    }});
  })();
  (function() {
    var counter = 0;
    HM.define("hm.module.course.ui.list.CourseDescriptionTabs", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/course/ui/list/CourseDescriptionTabs", lessons:null, course_id:0}, _init:function() {
      var _init = arguments.callee;
      this.tab_id = "hm-subject-list-item-description-" + ++counter;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      var $renderTo = $(this.config.renderTo), contHeight = $renderTo.height(), $el = this.getEl();
      this.callParent(_renderTo, arguments);
      $el.tabs({show:this._onTabActivate.bind(this)});
      var $header = $el.find(".ui-tabs-nav"), headerHeight = $header.height();
      $el.find(".ui-tabs-panel").height(contHeight - headerHeight - 20);
    }, _loadProgress:function($panel) {
      if (this._progressLoaded) {
        return;
      }
      this._progressLoaded = true;
      var url = hm.core.Url.getInstance().url({module:"course", controller:"mark", action:"get-stat", course_id:this.config.course_id, user_id:HM.getService("User").getUserId()});
      var $el = this.getEl(), me = this, $spinner = this._getSpinner();
      $panel.append($spinner);
      $.ajax({url:url, async:true}).done(function(data) {
        $spinner.remove();
        if (!data.maxValue) {
          var $emptyCont = $('<div class="hm-subject-list-item-description-panel-empty"><div></div></div>');
          $panel.html("");
          $emptyCont.find("div").text(HM._("\u041f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u043d\u0435\u0442"));
          $panel.append($emptyCont);
          return;
        }
        var styles = {};
        styles.best = "width: " + data.maxValueOfStudents * 100 / data.maxValue + "%";
        styles.my = "width: " + data.value * 100 / data.maxValue + "%";
        if (data.threshold === null) {
          styles[3] = "display: none";
        } else {
          styles[3] = "width: " + data.threshold * 100 / data.maxValue + "%";
        }
        $panel.html(me._renderTemplate("hm/module/course/ui/list/CourseDescriptionTabs.progress", {styles:styles}));
      });
    }, _getSpinner:function() {
      return $('<div class="ajax-spinner-local"></div>');
    }, _loadEvents:function($panel) {
      if (this._eventsLoaded) {
        return;
      }
      this._eventsLoaded = true;
      this._$eventsSpinner = this._getSpinner();
      this._eventsStore = HM.create("hm.module.es.data.store.EventServiceCourseStore", {listeners:{scope:this, data_loaded:this._onEventsLoaded}});
      this._eventList = HM.create("hm.module.es.ui.event.list.EventList", {fullMode:true, showHeader:false, store:this._eventsStore, groupsCollapsible:false});
      $panel.append(this._eventList.getEl());
      $panel.append(this._$eventsSpinner);
      this._eventsStore.load({singleSubject:this.config.course_id});
    }, _onTabActivate:function(event, ui) {
      var $panel = $(ui.panel);
      if ($panel.hasClass("hm-subject-list-item-description-progress")) {
        this._loadProgress($panel);
        return;
      }
      if ($panel.hasClass("hm-subject-list-item-description-events")) {
        this._loadEvents($panel);
        return;
      }
    }, _onEventsLoaded:function() {
      this._$eventsSpinner.remove();
      delete this._$eventsSpinner;
      if (this._eventsStore.getItemsCount()) {
        return;
      }
      var $panel = this.getEl().find(".hm-subject-list-item-description-events"), $emptyCont = $('<div class="hm-subject-list-item-description-panel-empty"><div></div></div>');
      $panel.html("");
      $emptyCont.find("div").text(HM._("\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0435\u0442"));
      $panel.append($emptyCont);
    }});
  })();
  (function() {
    HM.define("hm.module.course.ui.marksheet.ScrollBar", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/course/ui/marksheet/ScrollBar", scrollSize:100}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._onMouseUp = this._onMouseUp.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      this._$elScroller = this.getEl().find(".hm-marksheet-scrollbar-scroller");
      this._$elScroller.css({width:this.scrollSize + "%"});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("mousedown", ".hm-marksheet-scrollbar-scroller", this._onMouseDown);
    }, _onMouseDown:function(e) {
      var $scroller = this._$elScroller, begin = {scroller:{left:$scroller.position().left, width:$scroller.width()}, mouse:{x:e.screenX}};
      HM.$document().on("mouseup", this._onMouseUp);
      HM.$document().on("mousemove", begin, this._onMouseMove);
      e.preventDefault();
    }, _onMouseMove:function(e) {
      var begin = e.data, left = begin.scroller.left + e.screenX - begin.mouse.x, maxLeft = this.getEl().width() - begin.scroller.width - 4;
      if (left < 1) {
        left = 1;
      }
      if (left > maxLeft) {
        left = maxLeft;
      }
      this._$elScroller.css({left:left + "px"});
      this.fireEvent("scroll", left / maxLeft);
      try {
        window.getSelection().removeAllRanges();
      } catch (e) {
        document.selection.empty();
      }
    }, _onMouseUp:function(e) {
      HM.$document().off("mouseup", this._onMouseUp);
      HM.$document().off("mousemove", this._onMouseMove);
    }});
  })();
  (function() {
    HM.define("hm.module.develop.ui.panel.DevPanel", {extend:"hm.core.ui.Component", requires:["hm.core.Cookie"], config:{tpl:"hm/module/develop/ui/panel/DevPanel"}, COOKIE_DEBUG_NAME:"hm-dev-debug-enabled", DEBUG_ENABLED:"1", DEBUG_DISABLED:"0", _init:function() {
      var _init = arguments.callee;
      this.debugEnabled = hm.core.Cookie.get(this.COOKIE_DEBUG_NAME) === this.DEBUG_ENABLED;
      this.callParent(_init, arguments);
      this._$elDebugSwitcher = this.getEl().find(".hm-dev-button-debug-switcher");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._$elDebugSwitcher.on("click", this._onDebugSwitcherClick.bind(this));
    }, disableDebug:function() {
      this.debugEnabled = false;
      hm.core.Cookie.set(this.COOKIE_DEBUG_NAME, this.DEBUG_DISABLED, {path:"/"});
      this._$elDebugSwitcher.removeClass("hm-dev-button-debug-switcher-enabled");
      location.reload();
    }, enableDebug:function() {
      this.debugEnabled = true;
      hm.core.Cookie.set(this.COOKIE_DEBUG_NAME, this.DEBUG_ENABLED, {path:"/"});
      this._$elDebugSwitcher.addClass("hm-dev-button-debug-switcher-enabled");
      location.reload();
    }, show:function() {
      HM.$body().append(this.$el);
    }, _onDebugSwitcherClick:function() {
      if (this.debugEnabled) {
        this.disableDebug();
      } else {
        this.enableDebug();
      }
    }});
    HM.singleton(hm.module.develop.ui.panel.DevPanel);
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.EventAbstract", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/list/item/EventAbstract", groupType:"discussions", isInternal:false, eventTypeStr:"", data:null}, _init:function() {
      var _init = arguments.callee;
      this._groupType = this.config.groupType;
      this._data = this.config.data;
      this._description = this._data.get("description");
      this.description = this._description.getData();
      this.findDateOfCreation();
      this.callParent(_init, arguments);
      this.setAvatar();
      if (this.isNew()) {
        this.markAsNew();
      }
      if (HM.isDebug) {
        this._initDebugButton();
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", null, this._onItemClick);
      this.elOn("click", ".hm-es-event-list-item-new-trigger", this._onNewTriggerClick);
      this.elOn("click", ".hm-es-event-list-item-portfolio-add a", this._addToPortfolio);
      this._data.on("change_view_state", this._onChangeViewState, this);
    }, _initDebugButton:function() {
      var $button = $('<div style="position: absolute; right: 0; top: 0; bottom: 0; width: 20px;"></div>'), me = this;
      $button.on("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log(me);
      });
      this.getEl().append($button);
    }, _render:function() {
      var _render = arguments.callee;
      this.callParent(_render, arguments);
      if (this.$className === "hm.module.es.ui.event.list.item.EventAbstract") {
        this.getEl().text("\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435");
      }
    }, hide:function() {
      this.getEl().hide();
    }, show:function() {
      this.getEl().show();
    }, getData:function() {
      return this._data;
    }, getAuthor:function() {
      return this.description.author || this.description.author_name;
    }, getAuthorId:function() {
      var user_id = this.description.user_id;
      if (!user_id) {
        user_id = this.description.author_id;
      }
      return user_id;
    }, getAuthorUrl:function() {
      return HM.getService("User").getUserUrl(this.getAuthorId());
    }, getGroupType:function() {
      return this._groupType;
    }, findDateOfCreation:function() {
      this.creationDate = this._data.get("eventCreateTime");
    }, setAvatar:function() {
      var desc = this.description;
      var avatar = desc.author_avatar || desc.user_avatar;
      if (!avatar) {
        return;
      }
      this.getEl().find(".hm-es-event-list-item-avatar").css({backgroundImage:"url(" + avatar + ")"});
    }, viewEntity:function() {
      return false;
    }, isNew:function() {
      return!this._description.get("views");
    }, markAsNew:function() {
      this.getEl().addClass("hm-es-event-list-item-new");
      if (!this._$elNewTrigger) {
        this._$elNewTrigger = $('<div class="hm-es-event-list-item-new-trigger"></div>');
        this._$elNewTrigger.prop("title", HM._("\u041f\u043e\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u043e\u0435"));
      }
      this.getEl().append(this._$elNewTrigger);
    }, markAsNotNew:function() {
      this.getEl().removeClass("hm-es-event-list-item-new");
      this._$elNewTrigger.detach();
    }, getEventId:function() {
      return this._data.get("eventId");
    }, getTitle:function() {
      return this.description.title;
    }, getElHtml:function() {
      var clone = this.getEl().clone();
      clone.find(".hm-es-event-list-item-datetime, .hm-es-event-list-item-portfolio-add").remove();
      return encodeURIComponent(clone.html());
    }, _addToPortfolio:function(e) {
      e.preventDefault();
      var me = this;
      $.ajax({type:"POST", url:hm.core.Url.getInstance().url({module:"user", controller:"ajax", action:"event-to-achievement", eventId:this.getEventId()}), data:{text:this.getElHtml()}}).done(function(data) {
        if (data) {
          me.getEl().find(".hm-es-event-list-item-portfolio-add").html(data[0]);
        }
      });
    }, _onItemClick:function(e) {
      if (e.target.tagName === "A") {
        return;
      }
      this.viewEntity();
    }, _onNewTriggerClick:function(e) {
      e.stopPropagation();
      this._description.set("views", true);
    }, _onChangeViewState:function(e, isViewed) {
      if (isViewed) {
        this.markAsNotNew();
      } else {
        this.markAsNew();
      }
    }});
    hm.module.es.ui.event.list.item.EventAbstract.factory = hm.core.ClassManager.createFactory("eventTypeStr", {"default":"hm.module.es.ui.event.list.item.EventAbstract", blogAddMessage:"hm.module.es.ui.event.list.item.blog.BlogAddMessage", blogInternalAddMessage:"hm.module.es.ui.event.list.item.blog.BlogInternalAddMessage", forumAddMessage:"hm.module.es.ui.event.list.item.forum.ForumAddMessage", forumInternalAddMessage:"hm.module.es.ui.event.list.item.forum.ForumInternalAddMessage", wikiAddPage:"hm.module.es.ui.event.list.item.wiki.WikiPage", 
    wikiInternalAddPage:"hm.module.es.ui.event.list.item.wiki.WikiInternalPage", wikiModifyPage:"hm.module.es.ui.event.list.item.wiki.WikiPage", wikiInternalModifyPage:"hm.module.es.ui.event.list.item.wiki.WikiInternalPage", courseAddMaterial:"hm.module.es.ui.event.list.item.course.CourseAddMaterial", courseAttachLesson:"hm.module.es.ui.event.list.item.course.CourseAttachLesson", courseScoreTriggered:"hm.module.es.ui.event.list.item.course.CourseScoreTriggered", courseTaskComplete:"hm.module.es.ui.event.list.item.course.CourseTaskComplete", 
    courseTaskAction:"hm.module.es.ui.event.list.item.course.CourseTaskAction", courseTaskScoreTriggered:"hm.module.es.ui.event.list.item.course.CourseTaskScoreTriggered", personalMessageSend:"hm.module.es.ui.event.list.item.personalMessage.PersonalMessage", motivationMessage:"hm.module.es.ui.event.list.item.course.MotivationMessage", courseAddMessage:"hm.module.es.ui.event.list.item.course.CourseAddMessage"});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.group.DefaultEventGroup", {extend:"hm.core.ui.Component", requires:["hm.module.es.ui.event.list.item.EventAbstract"], config:{tpl:"hm/module/es/ui/event/list/group/DefaultEventGroup", type:"", data:null, eventList:null, groupTitle:"", collapsible:true}, _init:function() {
      var _init = arguments.callee;
      this._data = this.config.data;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-es-event-list-group-trigger", this._onTriggerClick);
    }, _render:function() {
      var _render = arguments.callee;
      var EventAbstract = hm.module.es.ui.event.list.item.EventAbstract, events = this._data.get("events"), eventItems = [], limit = 3, shortList = !this.config.eventList.config.fullMode, itemsCount = events.getItemsCount();
      if (shortList) {
        limit = 1;
      }
      if (!this.config.collapsible) {
        limit = itemsCount;
      }
      for (var i = 0;i < itemsCount;i++) {
        var event = events.getItem(i);
        event.on("change_view_state", this._onEventMarkedAsViewed, this);
        if (shortList && (i >= limit && event.get("description").get("views"))) {
          continue;
        }
        var ev = EventAbstract.factory({eventTypeStr:event.get("eventTypeStr"), data:event});
        eventItems.push(ev);
      }
      eventItems.sort(function(a, b) {
        return b.getData().get("eventCreateTime") - a.getData().get("eventCreateTime");
      });
      this.events = eventItems;
      this.callParent(_render, arguments);
      var $cont = this.$elEventsCont = this.getEl().find(".hm-es-event-list-group-events");
      for (var i = 0;i < eventItems.length;i++) {
        $cont.append(eventItems[i].getEl());
      }
      if (eventItems.length > limit) {
        this._$elTrigger = $('<div class="hm-es-event-list-group-trigger hm-es-event-list-group-trigger-collapsed"></div>');
        $cont.append(this._$elTrigger);
        this.setCollapsed(true);
      }
      this.setAvatar();
      this.updateIsNewStatus();
    }, getNewEventsCount:function() {
      var events = this.events, result = 0;
      for (var i = 0;i < events.length;i++) {
        if (events[i].isNew()) {
          result++;
        }
      }
      return result;
    }, updateIsNewStatus:function() {
      var newEventsCount = this.getNewEventsCount();
      if (newEventsCount) {
        this.getEl().addClass("hm-es-event-list-group-with-new-events");
      } else {
        this.getEl().removeClass("hm-es-event-list-group-with-new-events");
      }
    }, getEventItemById:function(eventId) {
      var eventId, events = this.events;
      for (var i = 0;i < events.length;i++) {
        eventId = events[i].getEventId();
        if (eventId == eventId) {
          return events[i];
        }
      }
    }, setCollapsed:function(collapse) {
      var events = this.events;
      if (collapse) {
        for (var i = 2;i < events.length;i++) {
          events[i].hide();
        }
        this._$elTrigger.text(HM._("\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435"));
      } else {
        for (var i = 2;i < events.length;i++) {
          events[i].show();
        }
        this._$elTrigger.text(HM._("\u0421\u043a\u0440\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435"));
      }
      this._collapsed = collapse;
    }, setAvatar:function() {
      var desc = this._data.get("description"), avatar = desc.author_avatar || desc.user_avatar;
      if (!avatar) {
        return;
      }
      this.getEl().find(".hm-es-event-list-group-avatar").css({backgroundImage:"url(" + avatar + ")"});
    }, getTypeTitle:function() {
      if (this.isInternal()) {
        return "\u0423\u0447\u0435\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441";
      } else {
        return "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u0430\u043d\u0430\u043b";
      }
    }, getGroupName:function() {
      return this._data.get("description").theme;
    }, filterByGroupType:function(groupType) {
      if (!groupType) {
        this.isVisible = groupIsVisible;
        this.getEl().show();
        return;
      }
      var events = this.events, groupIsVisible = false;
      for (var i = 0;i < events.length;i++) {
        var event = events[i];
        if (event.getGroupType() === groupType) {
          groupIsVisible = true;
        }
      }
      if (groupIsVisible) {
        this.getEl().show();
      } else {
        this.getEl().hide();
      }
      this.isVisible = groupIsVisible;
    }, isInternal:function() {
      var events = this.events, groupIsInternal = false;
      for (var i = 0;i < events.length;i++) {
        var event = events[i];
        if (event.config.isInternal) {
          return true;
        }
      }
      return false;
    }, getAuthorUrl:function() {
      return HM.getService("User").getUserUrl(this._data.get("description").author_id);
    }, getAuthorName:function() {
      return this._data.get("description").author_name;
    }, needShowMoreIcon:function() {
      return!!this.getGroupName();
    }, _onTriggerClick:function(e) {
      this.setCollapsed(!this._collapsed);
    }, _onEventMarkedAsViewed:function(e) {
      this.updateIsNewStatus();
    }});
    (function() {
      var classMapper = {FORUM_MESSAGE_ADD:"hm.module.es.ui.event.list.group.forum.ForumMessagesEventGroup", WIKI_PAGE:"hm.module.es.ui.event.list.group.wiki.WikiEventGroup", COURSE_ACTIVITY:"hm.module.es.ui.event.list.group.notification.DefaultNotificationEventGroup", PERSONAL_MESSAGE_SEND:"hm.module.es.ui.event.list.group.message.MessageEventGroup"};
      var titleMapper = {FORUM_MESSAGE_ADD:"\u0424\u043e\u0440\u0443\u043c", BLOG_MESSAGE_ADD:"\u0411\u043b\u043e\u0433", WIKI_PAGE:"Wiki"};
      hm.module.es.ui.event.list.group.DefaultEventGroup.factory = function(data) {
        var className = "hm.module.es.ui.event.list.group.DefaultEventGroup", groupType = data.type;
        if (classMapper.hasOwnProperty(groupType)) {
          className = classMapper[groupType];
        }
        if (titleMapper.hasOwnProperty(groupType)) {
          data.groupTitle = titleMapper[groupType];
        }
        return HM.create(className, data);
      };
    })();
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.EventList", {extend:"hm.core.ui.Component", requires:["hm.module.es.data.store.EventServiceStore", "hm.module.es.ui.event.list.group.DefaultEventGroup"], config:{tpl:"hm/module/es/ui/event/list/EventList", fullMode:false, store:null, showHeader:true, groupsCollapsible:true}, _init:function() {
      var _init = arguments.callee;
      this._store = this.config.store;
      this.groups = [];
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._store.on("data_loaded", this._onDataLoaded, this);
      this.elOn("click", ".hm-es-event-list-url", this._onClickShowAll);
    }, getStore:function() {
      return this._store;
    }, filterByGroupType:function(groupType) {
      var groups = this.groups, listIsEmpty = true;
      for (var i = 0;i < groups.length;i++) {
        groups[i].filterByGroupType(groupType);
        if (groups[i].isVisible) {
          listIsEmpty = false;
        }
      }
      if (listIsEmpty) {
        this.getEl().find(".hm-es-event-list-body-empty").show();
      } else {
        this.getEl().find(".hm-es-event-list-body-empty").hide();
      }
    }, setTitle:function(title) {
      this.getEl().find(".hm-es-event-list-title").text(title);
    }, setEmptyMessage:function(message) {
      this.getEl().find(".hm-es-event-list-body-empty").text(HM._(message));
    }, loadNext:function() {
      this._store.loadMore();
    }, getEventItemById:function(eventId) {
      var event, groups = this.groups;
      for (var i = 0;i < groups.length;i++) {
        event = groups[i].getEventItemById();
        if (event) {
          return event;
        }
      }
    }, _onDataLoaded:function(e, store, items, method) {
      if (!this.config.fullMode && method === "more") {
        return;
      }
      var $elBody = this.getEl().find(".hm-es-event-list-body"), DefaultEventGroup = hm.module.es.ui.event.list.group.DefaultEventGroup, groups = [];
      for (var i = 0;i < items.length;i++) {
        var group = groups[i] = DefaultEventGroup.factory({type:items[i].get("type"), eventList:this, data:items[i], collapsible:this.config.groupsCollapsible});
        $elBody.append(group.getEl());
      }
      this.groups.push.apply(this.groups, groups);
    }, _onClickShowAll:function(e) {
      e.preventDefault();
      HM.getService("EventService").viewFullList();
    }, _onEventMarkedAsViewed:function(e, eventId, groupType) {
      var eventItem = this.getEventItemById(eventId);
      if (eventItem) {
        eventItem.markAsNotNew(true);
      }
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.group.forum.ForumMessagesEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{}});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.group.message.MessageEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{tpl:"hm/module/es/ui/event/list/group/message/MessageEventGroup"}});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.group.notification.DefaultNotificationEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{tpl:"hm/module/es/ui/event/list/group/notification/DefaultNotificationEventGroup"}, getCourseName:function() {
      return this._data.get("description").course_name;
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.group.wiki.WikiEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", getGroupName:function() {
      return "";
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.blog.BlogAddMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/blog/BlogAddMessage"}, viewEntity:function() {
      var subjectId = 0, url, blogService = HM.getService("Blog");
      if (this.isInternal) {
        subjectId = this.description.course_id;
        url = blogService.getBlogListUrl(subjectId, "subject");
      } else {
        url = blogService.getBlogListUrl();
      }
      location.href = url + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.blog.BlogInternalAddMessage", {extend:"hm.module.es.ui.event.list.item.blog.BlogAddMessage", config:{isInternal:true}});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseAddMaterial", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseAddMaterial", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      if (!subjectId) {
        subjectId = this.description.cource_id;
      }
      location.href = HM.getService("CourseMaterialService").getListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseAttachLesson", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseAttachLesson", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseScoreTriggered", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseScoreTriggered"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskAction", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseTaskAction"}, viewEntity:function() {
      var userService = HM.getService("User"), lessonService = HM.getService("CourseLesson"), isBaseUser = userService.isBaseUser(), subjectId = this.description.course_id, url;
      //url = lessonService.getMyLessonsListUrl(subjectId);
	  url = '/interview/index/index/subject_id/'+this.description.course_id+'/lesson_id/'+this.description.lesson_id+'/user_id/'+this.description.user_id;
      location.href = url + "?eventId=" + this.getEventId();
    }});
  })();
  /********************************/
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.MotivationMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/MotivationMessage"}, viewEntity:function() {
      
	  var userService = HM.getService("User"), subjectService = HM.getService("MotivationMessage"), isBaseUser = userService.isBaseUser(), subjectId = this.description.subjectId, url;
      url = subjectService.getListUrl(subjectId);	  
      location.href = url + "?eventId=" + this.getEventId();	  
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseAddMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseAddMessage"}, viewEntity:function() {      
	  
	  var userService = HM.getService("User"), subjectService = HM.getService("CourseAddMessage"), isBaseUser = userService.isBaseUser(), subjectId = this.description.subjectId, url;
      url = '/subject/interview/index/subject_id/'+this.description.subjectId+'/user_id/'+this.description.user_id;	  
      location.href = url + "?eventId=" + this.getEventId();	  
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskComplete", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseTaskComplete"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      location.href = HM.getService("CourseLesson").getLessonListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskScoreTriggered", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseTaskScoreTriggered", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.forum.ForumAddMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{isInternal:false, tpl:"hm/module/es/ui/event/list/item/forum/ForumAddMessage"}, viewEntity:function() {
      var sectionId = this.description.section_id, forum_id = this.description.forum_id;
      HM.getService("Forum").viewForum(sectionId, forum_id);
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.forum.ForumInternalAddMessage", {extend:"hm.module.es.ui.event.list.item.forum.ForumAddMessage", config:{isInternal:true}, viewEntity:function() {
      var sectionId = this.description.section_id, subject_id = this.description.course_id;
      HM.getService("Forum").viewInternalForumUrl(subject_id, sectionId);
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.personalMessage.PersonalMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/personalMessage/PersonalMessage", groupType:"personalMessages"}, viewEntity:function() {
      var url = HM.getService("Message").getMessageListUrl(), author_id = this.getAuthorId();
      location.href = url + "?from=" + author_id;
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.wiki.WikiPage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/wiki/WikiPage"}, _init:function() {
      var _init = arguments.callee;
      switch(this.config.eventTypeStr) {
        case "wikiAddPage":
        ;
        case "wikiInternalAddPage":
          this.actionTitle = HM._("\u0441\u043e\u0437\u0434\u0430\u043b(\u0430)");
          break;
        case "wikiModifyPage":
        ;
        case "wikiInternalModifyPage":
          this.actionTitle = HM._("\u0438\u0437\u043c\u0435\u043d\u0438\u043b(\u0430)");
          break;
      }
      this.callParent(_init, arguments);
    }, viewEntity:function() {
      var page_id = this.description.subjectId;
      location.href = HM.getService("Wiki").getPageUrl(page_id) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.list.item.wiki.WikiInternalPage", {extend:"hm.module.es.ui.event.list.item.wiki.WikiPage", config:{isInternal:true}, viewEntity:function() {
      var page_id = this.description.subjectId, subject = "subject", subject_id = this.description.course_id;
      location.href = HM.getService("Wiki").getPageUrl(page_id, subject_id, subject) + "?eventId=" + this.getEventId();
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.panel.EventListPanel", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/panel/EventListPanel"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._toolbar = HM.create("hm.module.es.ui.event.toolbar.EventToolbar", {fullMode:true, renderTo:false, revertButtonList:true});
      this._eventList = this._toolbar.getEventList();
      this._$elCont = this.getEl().find(".hm-es-event-list-container");
      this._$elCont.append(this._toolbar.getEl());
      this._$elCont.append(this._eventList.getEl());
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.elOn("click", ".hm-es-event-panel-trigger", this._onClickShowNext);
      this.callParent(_initEvents, arguments);
    }, _onClickShowNext:function() {
      $(".hm-es-event-panel-trigger").prop( "disabled", true );
	  this._eventList.loadNext();
	  setTimeout("$('.hm-es-event-panel-trigger').prop( 'disabled', false );", 1500);	  
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.toolbar.button.EventToolbarButton", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/toolbar/button/EventToolbarButton", groupType:"discussions", emptyMessage:"", toolbar:null, caption:"", count:0}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._toolbar = this.config.toolbar;
      this._fullMode = this._toolbar.config.fullMode;
      this._$elIcon = this.getEl().find(".hm-es-event-toolbar-button-icon");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      if (this._fullMode) {
        this.elOn("click", null, this._onClick);
      } else {
        this.elOn("click", ".hm-es-event-toolbar-button-icon-tab", this._onClick);
      }
    }, select:function() {
      var $el = this.getEl(), toolbar = this._toolbar;
      this.selected = true;
      $el.addClass("hm-es-event-toolbar-button-selected");
      toolbar.setSelectedButton(this);
      var eventList = toolbar.getEventList(), $tab = $el.find(".hm-es-event-toolbar-button-icon-tab"), tabOffset = $tab.offset(), $eventListEl = eventList.getEl(), me = this;
      eventList.setTitle(this.config.caption);
      eventList.filterByGroupType(this.config.groupType);
      eventList.setEmptyMessage(this.config.emptyMessage);
      if (!this._fullMode) {
        hm.core.PopupManager.show($eventListEl[0], function() {
          me.unSelect(true);
        });
        var eventListWidth = $eventListEl.outerWidth();
        $eventListEl.css({top:tabOffset.top + $tab.outerHeight(), position:"absolute"});
        if (eventListWidth + tabOffset.left > document.body.offsetWidth) {
          $eventListEl.css({right:10, left:""});
        } else {
          $eventListEl.css({left:tabOffset.left - 30, right:""});
        }
      }
    }, unSelect:function(dontDetachEventList) {
      this.selected = false;
      this.getEl().removeClass("hm-es-event-toolbar-button-selected");
      if (!dontDetachEventList && !this._fullMode) {
        this._toolbar.getEventList().getEl().detach();
      }
    }, setStat:function(stat) {
      this.setNewEventsCount(stat.not_showed_event);
    }, setNewEventsCount:function(value) {
      this.newEventsCount = value;
      this._$elIcon.text(value);
      if (this.newEventsCount > 0) {
        this._$elIcon.addClass("hm-es-event-toolbar-button-new-events");
      } else {
        this._$elIcon.removeClass("hm-es-event-toolbar-button-new-events");
      }
    }, decrementNewEventsCount:function() {
      this.setNewEventsCount(this.newEventsCount - 1);
    }, _onClick:function(e) {
      e.stopPropagation();
      if (this.selected) {
        this.unSelect();
        this._toolbar.getEventList().filterByGroupType(false);
      } else {
        this.select();
      }
    }});
  })();
  (function() {
    HM.define("hm.module.es.ui.event.toolbar.EventToolbar", {extend:"hm.core.ui.Component", requires:["hm.module.es.ui.event.toolbar.button.EventToolbarButton"], config:{tpl:"hm/module/es/ui/event/toolbar/EventToolbar", renderTo:"#user-block", fullMode:false, revertButtonList:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();      
	  this._eventList = HM.create("hm.module.es.ui.event.list.EventList", {fullMode:this.config.fullMode, store:hm.module.es.data.store.EventServiceStore.getInstance()});	  
      var proxy = this._eventList.getStore().getProxy();
      proxy.on("data_loaded", this._onDataLoaded, this);
      var ButtonClass = "hm.module.es.ui.event.toolbar.button.EventToolbarButton";
      this._btnMessages = HM.create(ButtonClass, {toolbar:this, caption:HM._("\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f"), emptyMessage:HM._("\u041d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0435\u0442"), count:0, groupType:"personalMessages"});
      this._btnDiscussions = HM.create(ButtonClass, {toolbar:this, caption:HM._("\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f"), emptyMessage:HM._("\u041d\u043e\u0432\u044b\u0445 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \u043d\u0435\u0442"), count:0, groupType:"discussions"});
      this._btnNotifications = HM.create(ButtonClass, {toolbar:this, caption:HM._("\u041e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u044f"), emptyMessage:HM._("\u041d\u043e\u0432\u044b\u0445 \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u0439 \u043d\u0435\u0442"), count:0, groupType:"notifications"});
      var buttonElements = [this._btnMessages.getEl(), this._btnDiscussions.getEl(), this._btnNotifications.getEl()];
      if (this.config.revertButtonList) {
        buttonElements.reverse();
      }
      $el.append.apply($el, buttonElements);
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      var logoutOffset = $("#user-block .logout").position(), $el = this.getEl();
      $el.css({left:logoutOffset.left - $el.width() - 10 + "px"});
    }, _onDataLoaded:function(e, data) {
      var items = data.items, ln = items.length;
      for (var i = 0;i < ln;i++) {
        items[i].on("event_change_view_state", this._onEventViewStateChange, this);
      }
      this.loadData(data.source);
    }, loadData:function(data) {
      data = data || {};
      var stats = data.stats || [];
      for (var i = 0;i < stats.length;i++) {
        var stat = stats[i];
        switch(stat.group_type) {
          case "discussions":
            this._btnDiscussions.setStat(stat);
            break;
          case "personalMessages":
            this._btnMessages.setStat(stat);
            break;
          case "notifications":
            this._btnNotifications.setStat(stat);
            break;
        }
      }
    }, getEventList:function() {
      return this._eventList;
    }, setSelectedButton:function(button) {
      if (this._selectedButton === button) {
        return;
      }
      if (this._selectedButton) {
        this._selectedButton.unSelect();
      }
      this._selectedButton = button;
    }, getButtonByType:function(type) {
      switch(type) {
        case "discussions":
          return this._btnDiscussions;
        case "personalMessages":
          return this._btnMessages;
        case "notifications":
          return this._btnNotifications;
      }
    }, _onEventViewStateChange:function(e, event, isViewed) {
      var groupCode = event.getEventGroup();
      this.getButtonByType(groupCode).decrementNewEventsCount();
    }});
  })();
  (function() {
    HM.define("hm.module.user.ui.role.switcher.RoleSwitcher", {extend:"hm.core.ui.Component", config:{elTag:"span", tpl:"hm/module/user/ui/role/switcher/RoleSwitcher", userRoles:[], inheritUsers:[]}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var roles = this.config.userRoles || [], rolesWithoutEmployee = [], roleEndUser = null;
      for (var i in roles) {
        if (!roles.hasOwnProperty(i)) {
          continue;
        }
        if (!this.isEndUser(roles[i].basic_name)) {
          rolesWithoutEmployee.push(roles[i]);
        } else {
          roleEndUser = roles[i];
        }
      }
      if (roleEndUser) {
        this.endUser = roleEndUser;
        this.ENDUSER_NAME = roleEndUser.basic_name;
        /*roleEndUser.alias = '<div class="hm-roleswitcher-list-item-enduser-separator"></div>' + HM._("\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f") + '<div class="hm-roleswitcher-list-item-enduser-bottomtext">(' + HM._("\u0432\u043e\u0439\u0442\u0438 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c") + ")</div>"; */
        roleEndUser.alias = '<div class="hm-roleswitcher-list-item-enduser-separator"></div>' + HM._("\u0412\u043e\u0439\u0442\u0438 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c"); 
		
        rolesWithoutEmployee.push(roleEndUser);
      }
      this.collection = HM.create("hm.core.Collection", {data:rolesWithoutEmployee});
      var $el = this.getEl();
      this.$elCont = $el.find(".hm-roleswitcher");
      this.$elLeftPart = $el.find(".hm-roleswitcher-left");
      this.$elRightPart = $el.find(".hm-roleswitcher-right");
      this.$elCenterPart = $el.find(".hm-roleswitcher-center");
      if (this.collection.length() <= 2) {
        $el.find(".hm-roleswitcher-trigger").remove();
      }
      var currentRole = this.collection.find("current", true);
      if (currentRole) {
        this.setValue(currentRole.get("basic_name"));
      }
    }, _initEvents:function() {
      if (this.collection.length() > 2) {
        this.$elLeftPart.on("click", this.onClickButton.bind(this));
      } else {
        this.$elLeftPart.on("click", this.onClickTrigger.bind(this));
      }
      this.$elRightPart.on("click", this.onClickTrigger.bind(this));
      this.$elCenterPart.on("click", this.onClickTrigger.bind(this));
      $(document).on("click", this.onClick_document.bind(this));
    }, isEndUser:function(basic_name) {
      var inheiritUsers = this.config.inheritUsers[basic_name];
      if (!inheiritUsers) {
        return false;
      }
      for (var i = 0;i < inheiritUsers.length;i++) {
        if (inheiritUsers[i] === "enduser") {
          return true;
        }
      }
      return false;
    }, disable:function() {
      if (this.disabled) {
        return;
      }
      this.getEl().addClass("hm-roleswitcher-disabled");
      /*this.$elCenterPart.text(HM._("\u0420\u0435\u0436\u0438\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f"));*/
	  this.$elCenterPart.text(HM._("\u0421\u043B\u0443\u0448\u0430\u0442\u0435\u043B\u044C")); 
      this.disabled = true;
    }, enable:function() {
      if (!this.disabled) {
        return;
      }
      this.getEl().removeClass("hm-roleswitcher-disabled");
      this.disabled = false;
    }, showMenu:function() {
      if (this.disabled) {
        return;
      }
      var position = this.$elCont.offset();
      this.menu.$el.css({left:position.left + 25 + "px", top:position.top + 24 + "px"});
      if (this.value == this.ENDUSER_NAME) {
        this.menu.$el.find(".hm-roleswitcher-menu-item-enduser").hide();
      } else {
        this.menu.$el.find(".hm-roleswitcher-menu-item-enduser").show();
      }
      hm.core.PopupManager.show(this.menu.el, this.onHideMenu, this, true);
      this.menuShowed = true;
    }, hideMenu:function() {
      hm.core.PopupManager.hide(this.menu.el);
    }, setLocation:function(roleName) {
      window.location.href = "/switch/role/" + roleName;
    }, setValue:function(basic_name, redirect) {
      this.value = basic_name;
      if (basic_name === this.ENDUSER_NAME) {
        this.disable();
      } else {
        var currentRole = this.collection.find("basic_name", basic_name);
        this.$elCenterPart.text(currentRole.get("alias"));
        this.enable();
      }
      if (redirect) {
        this.setLocation(basic_name);
      }
    }, onClickButton:function() {
      if (this.disabled) {
        this.enable();
      } else {
        this.disable();
        if (this.value !== this.ENDUSER_NAME) {
          this.setLocation(this.ENDUSER_NAME);
        }
      }
    }, onClick_document:function(e) {
      if (e.target === this.$elLeftPart[0]) {
        return;
      }
      this.setValue(this.value);
    }, onGetListCls:function(model) {
      if (model.get("basic_name") === this.ENDUSER_NAME) {
        return "hm-roleswitcher-menu-item-enduser";
      } else {
        return "";
      }
    }, onClickTrigger:function(e) {
      if (this.collection.length() === 2) {
        if (this.isEndUser(this.value)) {
          this.setValue(this.collection.models[0].get("basic_name"), true);
        } else {
          this.setValue(this.ENDUSER_NAME, true);
        }
        return;
      }
      if (this.disabled) {
        this.onClickButton();
      }
      if (!this.menu) {
        this.menu = HM.create("hm.core.ui.List", {collection:this.collection, displayField:"alias", valueField:"basic_name", listeners:{select:this.onSelect, scope:this}, getCls:this.onGetListCls.bind(this)});
        this.menu.$el.addClass("hm-roleswitcher-menu");
      }
      if (!this.menuShowed) {
        this.showMenu();
      } else {
        this.hideMenu();
      }
      e.stopPropagation();
    }, onHideMenu:function() {
      this.menuShowed = false;
      if (this.value === this.ENDUSER_NAME) {
        this.disable();
      }
    }, onSelect:function(e, list, model) {
      var name = model.get("basic_name");
      if (this.value !== name) {
        this.setValue(name);
        this.setLocation(name);
      } else {
        this.setValue(name);
      }
      this.hideMenu();
    }});
  })();
  (function() {
    HM.define("hm.core.ui.container.Container", {xtype:"container", extend:"hm.core.ui.Component"});
  })();
  (function() {
    HM.define("hm.core.ui.grid.AbstractElement", {_getParamNames:function() {
      if (!this._paramNames) {
        this._paramNames = ["offset", "width", "height", "outerWidth", "outerHeight"];
      }
      return this._paramNames;
    }, getParam:function(param, update) {
      var paramName = "_" + param;
      if (this[paramName] === undefined || update) {
        this.updateParam(param);
      }
      return this[paramName];
    }, updateParam:function(param) {
      if (this._getParamNames().indexOf(param) == -1) {
        throw new Error('"' + param + '" \u043d\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432');
      }
      var paramName = "_" + param;
      this[paramName] = this.getEl()[param]();
      return this[paramName];
    }, getOffset:function(update) {
      return this.getParam("offset", update);
    }, getWidth:function(update) {
      return this.getParam("width", update);
    }, getHeight:function(update) {
      return this.getParam("height", update);
    }, getOuterWidth:function(update) {
      return this.getParam("outerWidth", update);
    }, getOuterHeight:function(update) {
      return this.getParam("outerHeight", update);
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.Grid", {extend:"hm.core.ui.grid.AbstractElement", config:{}, __construct:function() {
      var $grid = this._$grid = $(".els-grid");
      if ($grid.size() == 0) {
        return;
      }
      var $gridTable = this._$gridTable = $grid.find("> table");
      this._$gridTableWrap = $gridTable.wrap('<div class="hm-grid-table-wrap"></div>').parent();
      $gridTable.find("tr").eq(0).addClass("sticky-top");
      $gridTable.find("tr").eq(1).addClass("sticky-top");
      $gridTable.find(".bottom-grid").parent("tr");
      var col = $gridTable.find("tr").eq(0);
      col.find(".checkboxes").addClass("sticky-left");
      col.find(".grid-fio").addClass("sticky-left");
      col.find(".grid-actions").addClass("sticky-right");
      $(document).undelegate(".els-grid tr, .els-grid td, .els-grid th", "mouseenter mouseleave");
      var me = this;
      setTimeout(function() {
        me._initGridAction();
        me._initCells();
        me._initStickyContainers();
        me._initScroll();
        me._initEvents();
        me._checkStickyRight(0, 9999, true);
        me._checkStickyTop(me.getCurrentScrollTop(true), 0, true);
        me._stickCells();
        me._updateStickyContainers(true);
        me._scroll.update();
      }, 1E3);
    }, getEl:function() {
      return this._$grid;
    }, getTable:function() {
      return this._$gridTable;
    }, getTableWidth:function(update) {
      if (this._tableWidth === undefined || update) {
        this._tableWidth = this.getTable().outerWidth();
      }
      return this._tableWidth;
    }, _initScroll:function() {
      this._scroll = HM.create("hm.core.ui.grid.element.Scroll", {grid:this});
    }, _initStickyContainers:function() {
      var $grid = this._$grid;
      var $gridTable = this._$gridTable;
      var rows = this._rows;
      this._stickyContainers = {};
      var stickyCon = this._stickyContainers;
      stickyCon.top = HM.create("hm.core.ui.grid.element.sticky.TopContainer", {grid:this});
      stickyCon.left = HM.create("hm.core.ui.grid.element.sticky.LeftContainer", {grid:this});
      stickyCon.right = HM.create("hm.core.ui.grid.element.sticky.RightContainer", {grid:this});
      stickyCon.topLeft = HM.create("hm.core.ui.grid.element.sticky.TopLeftContainer", {grid:this});
      stickyCon.topRight = HM.create("hm.core.ui.grid.element.sticky.TopRightContainer", {grid:this});
    }, getCleanTable:function() {
      if (!this._$cleanTable) {
        var $cleanTable = this._$gridTable.clone(true);
        $cleanTable.find("[id]").removeAttr("id");
        var $thtd = $cleanTable.find("th, td");
        $thtd.hide();
        $thtd.find(".hm-grid-cell-content-wrapper").contents().remove();
        this._$cleanTable = $cleanTable;
      }
      return this._$cleanTable.clone(true);
    }, _initStickyItems:function() {
    }, _initCells:function() {
      var $gridTable = this._$gridTable;
      var $rows = $gridTable.find("tr");
      var rows = [];
      var stickyTopRows = [];
      var stickyBottomRows = [];
      var cols = [];
      var stickyLeftCols = [];
      var stickyRightCols = [];
      var cells = [];
      $gridTable.hide();
      var index = 0;
      var me = this;
      $.each($rows, function(rowIndex) {
        var $tr = $(this);
        var $rowCells = $tr.find("th, td");
        rows[rowIndex] = HM.create("hm.core.ui.grid.element.Row", {grid:me, index:rowIndex});
        if ($tr.hasClass("sticky-top")) {
          rows[rowIndex].stickySide("top");
        }
        if ($tr.hasClass("sticky-bottom")) {
          rows[rowIndex].stickySide("bottom");
        }
        $.each($rowCells, function(colIndex) {
          var $td = $(this);
          if (rowIndex == 0) {
            cols[colIndex] = HM.create("hm.core.ui.grid.element.Col", {grid:me, index:colIndex});
          }
          if ($td.is("[colspan]")) {
            return;
          }
          if ($td.hasClass("sticky-left")) {
            cols[colIndex].stickySide("left");
          }
          if ($td.hasClass("sticky-right")) {
            cols[colIndex].stickySide("right");
          }
          var cell = HM.create("hm.core.ui.grid.element.Cell", {grid:me, $el:$td, index:index, rowIndex:rowIndex, colIndex:colIndex});
          index++;
          cells.push(cell);
          rows[rowIndex].addCell(cell);
          cols[colIndex].addCell(cell);
        });
      });
      $gridTable.show();
      var i, ln, row, col, cell;
      for (i = 0, ln = cells.length;i < ln;i++) {
        cells[i]._wrapContent();
      }
      var topOffset = 0;
      for (i = 0, ln = rows.length;i < ln;i++) {
        row = rows[i];
        row.fixHeight();
        if (row.stickySide() == "top") {
          stickyTopRows.push(row);
          row.stickyOffset(topOffset);
          topOffset += row.getHeight();
        }
      }
      var leftOffset = 0;
      for (i = 0, ln = cols.length;i < ln;i++) {
        col = cols[i];
        col.fixWidth();
        if (col.stickySide() == "left") {
          stickyLeftCols.push(col);
          col.stickyOffset(leftOffset);
          leftOffset += col.getWidth();
        }
      }
      var rightOffset = 0;
      for (i = cols.length - 1;i >= 0;i--) {
        col = cols[i];
        if (col.stickySide() == "right") {
          stickyRightCols.push(col);
          col.stickyOffset(rightOffset);
          rightOffset += col.getWidth();
        }
      }
      this._stickyTopRows = stickyTopRows;
      this._stickyBottomRows = stickyBottomRows;
      this._stickyLeftCols = stickyLeftCols;
      this._stickyRightCols = stickyRightCols;
      this._rows = rows;
      this._cols = cols;
      this._cells = cells;
    }, getCells:function() {
      return this._cells;
    }, getRows:function(sticky) {
      var rows;
      switch(sticky) {
        case "top":
          rows = this._stickyTopRows;
          break;
        case "bottom":
          rows = this._stickyBottomRows;
          break;
        default:
          rows = this._rows;
      }
      return rows;
    }, getCols:function(sticky) {
      var cols;
      switch(sticky) {
        case "left":
          cols = this._stickyLeftCols;
          break;
        case "right":
          cols = this._stickyRightCols;
          break;
        default:
          cols = this._cols;
      }
      return cols;
    }, getStickyContainer:function(name) {
      if (!this._stickyContainers[name]) {
        throw new Error('StickyContainer "' + name + '" \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.');
      }
      return this._stickyContainers[name];
    }, getStickyContainers:function() {
      return this._stickyContainers;
    }, fixRowHeight:function(rowIndex, height) {
      var rows = this.getRows(), row = rows[rowIndex], cells = row.getCells();
      for (var i = 0, ln = cells.length;i < ln;i++) {
        var cell = cells[i];
        cell.freeHeight();
      }
      var maxHeightCell = _.max(cells, function(cell) {
        return cell.getOuterHeight(true);
      });
      var maxHeight = maxHeightCell.getOuterHeight();
      var stickyContainers = this.getStickyContainers();
      $.each(stickyContainers, function() {
        var stickyContainer = this;
        stickyContainer.fixRowHeight(rowIndex, maxHeight);
      });
      this.getTable().find("tr:eq(" + rowIndex + ")").find("th, td").height(maxHeight);
    }, freeRowHeight:function(rowIndex) {
      var stickyContainers = this.getStickyContainers();
      $.each(stickyContainers, function() {
        var stickyContainer = this;
        stickyContainer.freeRowHeight(rowIndex);
      });
      this.getTable().find("tr:eq(" + rowIndex + ")").find("th, td, .hm-grid-cell-content-wrapper").css("height", "");
    }, _initEvents:function() {
      $(document).on("scroll", _.bind(this._onDocumentScroll, this));
      this._$gridTableWrap.on("scroll", _.bind(this._onGridScroll, this));
      $(window).on("resize", _.bind(this._onDocumentResize, this));
      var me = this;
      this._$gridTable.find(".div_expand").on("click", function() {
        var $tr = $(this).closest("tr"), $table = $(this).closest("table"), $trs = $table.find("tr"), index = $trs.index($tr);
        me.freeRowHeight(index);
        me.fixRowHeight(index);
      });
    }, _onDocumentScroll:function(e) {
      var me = this;
      var prevScrollTop = me._currentScrollTop || 0;
      var scrollTop = me.getCurrentScrollTop(true);
      me._checkStickyTop(scrollTop, prevScrollTop);
      me._checkStickyBottom(scrollTop, prevScrollTop);
      me._stickCells();
      me._updateStickyContainers();
      me._scroll.update();
    }, _onGridScroll:function(e) {
      var me = this;
      var prevScrollLeft = me._currentScrollLeft || 0;
      var scrollLeft = me.getCurrentScrollLeft(true);
      me._checkStickyRight(scrollLeft, prevScrollLeft);
      me._checkStickyLeft(scrollLeft, prevScrollLeft);
      me._stickyContainers.top.setScroll(scrollLeft);
      me._stickCells();
      me._scroll.syncScroll();
      me._updateStickyContainers();
    }, getCurrentScrollTop:function(update) {
      if (this._currentScrollTop === undefined || update) {
        this._currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
      }
      return this._currentScrollTop;
    }, getCurrentScrollBottom:function(update) {
      var currentScrollTop, windowHeight;
      if (this._currentScrollBottom === undefined || update) {
        currentScrollTop = this.getCurrentScrollTop(update);
        windowHeight = this.getWindowHeight(update);
      } else {
        currentScrollTop = this.getCurrentScrollTop();
        windowHeight = this.getWindowHeight();
      }
      this._currentScrollBottom = currentScrollTop + windowHeight;
      return this._currentScrollBottom;
    }, getCurrentScrollLeft:function(update) {
      if (this._currentScrollLeft === undefined || update) {
        this._currentScrollLeft = this._$gridTableWrap.scrollLeft();
      }
      return this._currentScrollLeft;
    }, getMaxScrollLeft:function(update) {
      if (this._maxScrollLeft === undefined || update) {
        var delta = this.getTableWidth(update) - this.getWidth(update);
        if (delta < 0) {
          delta = 0;
        }
        this._maxScrollLeft = delta;
      }
      return this._maxScrollLeft;
    }, getWindowHeight:function(update) {
      if (this._windowHeight === undefined || update) {
        this._windowHeight = $(window).height();
      }
      return this._windowHeight;
    }, getDocumentWidth:function(update) {
      if (this._documentWidth === undefined || update) {
        this._documentWidth = $(document).width();
      }
      return this._documentWidth;
    }, _checkStickyTop:function(scrollTop, prevScrollTop, forceUpdate) {
      forceUpdate = forceUpdate || false;
      var rows = this.getRows("top");
      for (var i = 0, ln = rows.length;i < ln;i++) {
        var row = rows[i];
        var delta = row.getOffset().top - scrollTop;
        var prevDelta = row.getOffset().top - prevScrollTop;
        var stickyOffset = row.stickyOffset();
        var noChange = prevDelta < stickyOffset && delta < stickyOffset || prevDelta > stickyOffset && delta > stickyOffset;
        if (noChange && !forceUpdate) {
        } else {
          if (delta < stickyOffset) {
            row.setCellsStick("top", true);
          } else {
            row.setCellsStick("top", false);
          }
        }
      }
    }, _checkStickyBottom:function(scrollTop, prevScrollTop) {
    }, _checkStickyLeft:function(scrollLeft, prevScrollLeft, forceUpdate) {
      forceUpdate = forceUpdate || false;
      var cols = this.getCols("left");
      for (var i = 0, ln = cols.length;i < ln;i++) {
        var col = cols[i];
        var gridOffsetLeft = this.getOffset().left;
        var delta = col.getOffset().left - gridOffsetLeft - scrollLeft;
        var prevDelta = col.getOffset().left - gridOffsetLeft - prevScrollLeft;
        var stickyOffset = col.stickyOffset();
        var noChange = prevDelta < stickyOffset && delta < stickyOffset || prevDelta > stickyOffset && delta > stickyOffset;
        if (noChange && !forceUpdate) {
        } else {
          if (delta < stickyOffset) {
            col.setCellsStick("left", true);
          } else {
            col.setCellsStick("left", false);
          }
        }
      }
    }, _checkStickyRight:function(scrollLeft, prevScrollLeft, forceUpdate) {
      forceUpdate = forceUpdate || false;
      var cols = this.getCols("right");
      for (var i = 0, ln = cols.length;i < ln;i++) {
        var col = cols[i];
        var gridOffsetLeft = this.getOffset().left;
        var gridWidth = this.getWidth();
        var delta = col.getOffset().right - gridOffsetLeft - gridWidth - scrollLeft;
        var prevDelta = col.getOffset().right - gridOffsetLeft - gridWidth - prevScrollLeft;
        var stickyOffset = col.stickyOffset();
        var noChange = prevDelta > stickyOffset && delta > stickyOffset || prevDelta > stickyOffset && delta > stickyOffset;
        if (noChange && !forceUpdate) {
        } else {
          if (delta > stickyOffset) {
            col.setCellsStick("right", true);
          } else {
            col.setCellsStick("right", false);
          }
        }
      }
    }, _stickCells:function() {
      var cells = this.getCells();
      for (var i = 0, ln = cells.length;i < ln;i++) {
        var cell = cells[i];
        if (!cell.isStickyStateChanged()) {
          continue;
        }
        cell.resetStickyState();
        if (cell.stick("top") && cell.stick("left")) {
          this.getStickyContainer("top").showCellContainer(cell);
          this.getStickyContainer("left").showCellContainer(cell);
          this.getStickyContainer("topLeft").addCells(cell);
          continue;
        }
        if (cell.stick("top") && cell.stick("right")) {
          this.getStickyContainer("top").showCellContainer(cell);
          this.getStickyContainer("right").showCellContainer(cell);
          this.getStickyContainer("topRight").addCells(cell);
          continue;
        }
        if (cell.stick("top")) {
          this.getStickyContainer("top").addCells(cell);
          continue;
        }
        if (cell.stick("left")) {
          this.getStickyContainer("left").addCells(cell);
          continue;
        }
        if (cell.stick("right")) {
          this.getStickyContainer("right").addCells(cell);
          continue;
        }
        cell.appendToDefault();
      }
    }, _scrollAxisChanged:function(currentAxis) {
    }, _onDocumentResize:function(e) {
      this.getWidth(true);
      this.getHeight(true);
      this.getOffset(true);
      this.getOuterWidth(true);
      this.getTableWidth(true);
      this.getDocumentWidth(true);
      this.getCurrentScrollBottom(true);
      this.getCurrentScrollLeft(true);
      this.getMaxScrollLeft(true);
      this._checkStickyRight(0, 9999, true);
      this._stickCells();
      this._updateStickyContainers();
      this._scroll.update();
    }, _updateStickyContainers:function() {
      this._scroll.syncScroll();
      $.each(this._stickyContainers, function() {
        var stickyContainer = this;
        stickyContainer.update();
      });
    }, _initGridAction:function() {
      var me = this;
      this._$grid.find("td.grid-actions").each(function() {
        var $menu = $(this).find(".grid-row-actions");
        $(this).on("click", function(e) {
          var $td = $(this);
          if (me._currentActionMenu) {
            var curMenu = me._currentActionMenu;
            curMenu.menu.hide();
            curMenu.container.append(curMenu.menu);
            me._currentActionMenu = false;
          }
          $menu.appendTo("body").show().position({my:"right top", at:"right bottom", offset:"-2 -1", of:$td, collision:"none"});
          me._currentActionMenu = {menu:$menu, container:$td};
        });
      });
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.Cell", {extend:"hm.core.ui.grid.AbstractElement", config:{grid:null, $el:null, index:null, rowIndex:null, colIndex:null}, __construct:function() {
      var isJQ = this.config.$el instanceof jQuery;
      var nodeName = this.config.$el[0].nodeName.toLowerCase();
      var isTHTD = nodeName == "th" || nodeName == "td";
      if (!isJQ || !isTHTD) {
        throw new Error("$el \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c jQuery(th|td)");
      }
      this._stickSides = ["top", "bottom", "left", "right"];
    }, _wrapContent:function() {
      if (this._contentWrapper) {
        return;
      }
      var td = this._realContainer = this.config.$el;
      var content = this._content = td.contents();
      var contentWrapper = $('<div class="hm-grid-cell-content-wrapper" style="overflow: hidden;"></div>');
      contentWrapper.append(content);
      td.append(contentWrapper);
      this._contentWrapperWidth = contentWrapper.width();
      contentWrapper.width(this._contentWrapperWidth);
      contentWrapper.css("overflow", "");
      this._contentWrapper = contentWrapper;
    }, fixHeight:function(height) {
      this.getEl().height(height);
    }, freeHeight:function() {
      this.getEl().css("height", "auto");
    }, fixWidth:function(width) {
      this.getEl().width(width);
    }, stick:function(side, value) {
      side = side.toLowerCase();
      if (this._stickSides.indexOf(side) == -1) {
        throw new Error("\u041d\u0435 \u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 side, \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: top|bottom|left|right");
      }
      var paramName = "_stick_" + side.toLowerCase();
      if (this[paramName] === undefined) {
        this[paramName] = false;
      }
      if (value !== undefined && this[paramName] != value) {
        this._stickyStateChanged = true;
        this[paramName] = value;
      }
      return this[paramName];
    }, isStickyStateChanged:function() {
      if (this._stickyStateChanged === undefined) {
        this._stickyStateChanged = false;
      }
      return this._stickyStateChanged;
    }, resetStickyState:function() {
      this._stickyStateChanged = false;
    }, setStickyState:function(val) {
      this._stickyStateChanged = val;
    }, getContentWrapper:function() {
      if (!this._contentWrapper) {
        this._wrapContent();
      }
      return this._contentWrapper;
    }, getContent:function() {
      if (!this._content) {
        this._wrapContent();
      }
      return this._content;
    }, setTempContainer:function(el) {
      this._realContainer = el;
      this._tempContainer = el;
    }, appendToDefault:function() {
      if (this._tempContainer) {
        this._tempContainer.hide();
        this._tempContainer = false;
      }
      this.getContentWrapper().append(this.getContent());
    }, getEl:function() {
      return this._realContainer;
    }, getIndex:function() {
      return this.config.index;
    }, getRowIndex:function() {
      return this.config.rowIndex;
    }, getColIndex:function() {
      return this.config.colIndex;
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.Scroll", {extend:"hm.core.ui.grid.AbstractElement", config:{grid:null}, _scrollGridTo:function(scrollTo) {
      this.config.grid._$gridTableWrap.scrollLeft(scrollTo);
    }, __construct:function() {
      var me = this;
      var $scroll = this._scroll = $('<div class="hm-grid-scroll"></div>');
      var uiSlider = this._uiSlider = $("<div></div>");
      uiSlider.appendTo($scroll);
      uiSlider.slider({slide:function(event, ui) {
        var grid = me.config.grid;
        var gridWidth = grid.getOuterWidth();
        var gridTableWidth = grid.getTableWidth();
        var scrollTo = Math.ceil((gridTableWidth - gridWidth) / 100 * ui.value);
        me._scrollGridTo(scrollTo);
      }});
      var uiSliderHandle = uiSlider.find(".ui-slider-handle");
      var uiSliderHandleWrap = uiSliderHandle.wrap('<div class="ui-slider-handle-wrap"></div>').parent();
      this._sliderWidth = 300;
      uiSlider.on("slidestop", function(event, ui) {
        uiSlider.width("100%");
        uiSliderHandleWrap.css("margin", "0 " + me._sliderWidth / 2 + "px");
      });
      uiSliderHandleWrap.mousedown(function() {
        uiSlider.width(uiSliderHandleWrap.width());
        uiSliderHandleWrap.css("margin", 0);
      }).mouseup(function() {
        uiSlider.width("100%");
        uiSliderHandleWrap.css("margin", "0 " + me._sliderWidth / 2 + "px");
      });
      uiSliderHandleWrap.css("margin", "0 " + me._sliderWidth / 2 + "px");
      uiSliderHandle.width(me._sliderWidth - 4);
      uiSliderHandle.css("margin-left", -(me._sliderWidth / 2 - 1));
      $scroll.appendTo("body");
    }, syncScroll:function() {
      var grid = this.config.grid, gridWidth = grid.getOuterWidth(), gridTableWidth = grid.getTableWidth(), gridScrollLeft = grid.getCurrentScrollLeft();
      var value = Math.ceil(gridScrollLeft / (gridTableWidth - gridWidth) * 100);
      this.setSliderValue(value);
    }, setSliderValue:function(value) {
      this._uiSlider.slider("value", value);
    }, update:function() {
      this._updatePosition();
    }, _updatePosition:function() {
      var grid = this.config.grid, gridOffset = grid.getOffset(), gridHeight = grid.getHeight(), currentScrollBottom = grid.getCurrentScrollBottom(), gridOffsetBottom = gridOffset.top + gridHeight;
      var gridWidth = grid.getOuterWidth();
      var gridTableWidth = grid.getTableWidth();
      if (currentScrollBottom >= gridOffsetBottom || gridTableWidth < gridWidth) {
        this.hide();
      } else {
        this.setWidth(grid.getWidth());
        this.setLeft(gridOffset.left);
        this.show();
      }
    }, setWidth:function(width) {
      if (!this._width || this._width != width) {
        this._width = width;
        this._scroll.width(width);
      }
    }, setLeft:function(val) {
      if (!this._left || this._left != val) {
        this._left = val;
        this._scroll.css("left", val);
      }
    }, hide:function() {
      this._scroll.hide();
    }, show:function() {
      this._scroll.show();
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.Grid.old", {config:{}, __construct:function() {
      this.$grid = $(".els-grid");
      if (this.$grid.size() == 0) {
        return;
      }
      this.$gridTable = this.$grid.find("> table");
      var $gridTable = this.$gridTable;
      $gridTable.find("tr").eq(0).addClass("sticky-top");
      $gridTable.find("tr").eq(1).addClass("sticky-top");
      $gridTable.find(".bottom-grid").parent("tr");
      var col = $gridTable.find("tr").eq(0);
      col.find(".checkboxes").addClass("sticky-left");
      col.find(".grid-fio").addClass("sticky-left");
      col.find(".grid-actions").addClass("sticky-right");
      var me = this;
      setTimeout(function() {
        me._initStickyContainers();
        me._initStickyItems();
        me._initEvents();
        me._updateStickyContainers(true);
        me._checkStickyRows();
        me._checkStickyCols();
        me._updateStickyContainers(true);
        me._updateCellsHeight();
      }, 1E3);
    }, _initStickyContainers:function() {
      var $grid = this.$grid;
      var $gridTable = this.$gridTable;
      var $colgroup = $gridTable.find("colgroup").clone();
      var $gridWrap = $('<div class="hm-grid-wrap"></div>');
      $gridWrap.append($grid.contents());
      $grid.append($gridWrap);
      this.$gridWrap = $gridWrap;
      $gridTable.find("tr:first").find("th, td").each(function(index) {
        var newWidth = $(this).outerWidth();
        $colgroup.children(":eq(" + index + ")").attr("width", newWidth);
      });
      $gridTable.find("tr").each(function(index) {
        var h = $(this).outerHeight();
        $(this).find("th, td").height(h);
      });
      $gridTable.find("colgroup").remove();
      $gridTable.prepend($colgroup.clone());
      var $cleanTable = $gridTable.clone(true);
      $cleanTable.find("th, td, col").detach();
      $cleanTable.find("[id]").removeAttr("id");
      this._stickyContainers = {left:$('<div class="hm-grid-helper hm-grid-helper-left"></div>').append($cleanTable.clone(true)), right:$('<div class="hm-grid-helper hm-grid-helper-right"></div>').append($cleanTable.clone(true)), top:$('<div class="hm-grid-helper hm-grid-helper-top"><table cellspacing="0"><thead></thead><tbody></tbody><tfoot></tfoot></table></div>'), topLeft:$('<div class="hm-grid-helper hm-grid-helper-top-left"></div>').append($cleanTable.clone(true)), topRight:$('<div class="hm-grid-helper hm-grid-helper-top-right"></div>').append($cleanTable.clone(true)), 
      bottom:$('<div class="hm-grid-helper hm-grid-helper-bottom"><table cellspacing="0"><thead></thead><tbody></tbody><tfoot></tfoot></table></div>'), bottomLeft:$('<div class="hm-grid-helper hm-grid-helper-bottom-left"></div>').append($cleanTable.clone(true)), bottomRight:$('<div class="hm-grid-helper hm-grid-helper-bottom-right"></div>').append($cleanTable.clone(true))};
      $(document).off("mouseover", "tr, th, td").unbind("mouseenter");
      $.each(this._stickyContainers, function() {
        $gridWrap.append(this);
        this.find("table").each(function() {
          if ($(this).find("colgroup").size() == 0) {
            $(this).prepend($colgroup.clone());
          }
        });
      });
      this._stickyContainers.top.append(this._stickyContainers.topLeft).append(this._stickyContainers.topRight);
      this._stickyContainers.bottom.append(this._stickyContainers.bottomLeft).append(this._stickyContainers.bottomRight);
      $grid.find("table").css("table-layout", "fixed");
      var $scrollbar = $('<div class="hm-grid-scrollbar"><div></div></div>');
      $scrollbar.children(":first").width($gridTable.width());
      $grid.append($scrollbar);
      this.$scrollbar = $scrollbar;
    }, _initStickyItems:function() {
      this._stickyItems = {top:[], bottom:[], left:[], right:[]};
      var $grid = this.$grid;
      var $gridTable = this.$gridTable;
      var me = this;
      $gridTable.find(".sticky, .sticky-top, .sticky-bottom, .sticky-left, .sticky-right").each(function() {
        var $sticky = $(this);
        var tagName = this.tagName.toLowerCase();
        if ($sticky.closest($gridTable).size() == 0) {
          return;
        }
        switch(tagName) {
          case "tr":
            if ($(this).hasClass("sticky-bottom")) {
              me._stickyItems.bottom.push($sticky);
            } else {
              me._stickyItems.top.push($sticky);
            }
            break;
          case "th":
          ;
          case "td":
            var stickyIndex = $sticky.index();
            var $col = $gridTable.find("tr").find("th:eq(" + stickyIndex + "), td:eq(" + stickyIndex + ")").not("[colspan]");
            if ($(this).hasClass("sticky-left")) {
              me._stickyItems.left.push($col);
            }
            if ($(this).hasClass("sticky-right")) {
              me._stickyItems.right.push($col);
            }
            break;
          default:
            console.error("Wrong sticky element: " + $sticky[0].tagName);
        }
        $sticky.data("sticked", false);
      });
      me._stickyItems.right.reverse();
    }, _initEvents:function() {
      var me = this;
      $(document).on("scroll", _.bind(this._onDocumentScroll, this));
      this.$grid.on("scroll", _.bind(this._onGridScroll, this));
      this.$scrollbar.on("scroll", function() {
        me.$grid.scrollLeft($(this).scrollLeft());
      });
      this.$grid.on("scroll", function() {
        me.$scrollbar.scrollLeft($(this).scrollLeft());
      });
      this.$gridTable.find(".div_expand").on("click", function() {
        $.each(me._stickyItems.left, function(index) {
          var $sticky = this;
          if ($sticky.data("sticked") == true) {
            me._unstickColItem($sticky);
          }
        });
        $.each(me._stickyItems.right, function(index) {
          var $sticky = this;
          if ($sticky.data("sticked") == true) {
            me._unstickColItem($sticky);
          }
        });
        $(this).parents("tr:first").find("th, td").css("height", "auto");
        me._checkStickyCols();
        me._updateStickyContainers(false);
      });
      $(window).on("resize", _.bind(this._onDocumentResize, this));
      $(this.$grid).find("td.grid-actions").each(function() {
        var $menu = $(this).find(".grid-row-actions");
        $(this).on("click", function(e) {
          var $td = $(this);
          if (me._currentActionMenu) {
            var curMenu = me._currentActionMenu;
            curMenu.menu.hide();
            curMenu.container.append(curMenu.menu);
            me._currentActionMenu = false;
          }
          $menu.appendTo("body").show().position({my:"right top", at:"right bottom", offset:"-2 -1", of:$td, collision:"none"});
          me._currentActionMenu = {menu:$menu, container:$td};
        });
      });
    }, _onDocumentScroll:function(e) {
      var me = this;
      if (this.t) {
        clearTimeout(this.t);
      }
      this.t = setTimeout(function() {
        me._scrollAxisChanged("y");
        me._updateStickyContainers(true);
        me._checkStickyRows();
        me._updateStickyContainers(true);
      }, 0);
    }, _onGridScroll:function(e) {
      this._scrollAxisChanged("x");
      this._updateStickyContainers(false);
      this._checkStickyCols();
      this._updateStickyContainers(false);
    }, _scrollAxisChanged:function(currentAxis) {
      if (currentAxis != this._lastAxis) {
        this._lastAxis = currentAxis;
        return true;
      }
      return false;
    }, _onDocumentResize:function(e) {
      this._updateStickyContainers(true);
      this._checkStickyRows();
      this._updateStickyContainers(true);
      this._updateStickyContainers(false);
      this._checkStickyCols();
      this._updateStickyContainers(false);
    }, _updateStickyContainers:function(verticalScroll) {
      var $grid = this.$grid;
      var gridWidth = $grid.width();
      var $gridTable = this.$gridTable;
      var gridTableWidth = $gridTable.width();
      var currentScrollTop = $(document).scrollTop();
      var gridOffsetTop = $grid.offset().top;
      var bottomScreenPoint = currentScrollTop + $(window).height();
      var bottomGridPoint = this.$grid.offset().top + this.$grid.outerHeight();
      var scrollBarHeight = 0;
      if (gridWidth >= gridTableWidth) {
        this.$scrollbar.hide();
      } else {
        this.$scrollbar.show();
        scrollBarHeight = this.$scrollbar.height();
      }
      if (bottomScreenPoint >= bottomGridPoint) {
        this.$scrollbar.css("bottom", bottomScreenPoint - bottomGridPoint);
        this.$scrollbar.hide();
        this._stickyContainers.bottom.hide();
      } else {
        this._stickyContainers.bottom.show();
        this.$scrollbar.show();
        this.$scrollbar.css("bottom", 0);
        this.$scrollbar.css("position", "fixed");
        this.$scrollbar.css("left", $grid.offset().left);
      }
      this.$scrollbar.css("width", gridWidth);
      this.$scrollbar.children(":first").width(gridTableWidth);
      if (gridOffsetTop < currentScrollTop) {
        this._stickyContainers.top.css("top", currentScrollTop - gridOffsetTop);
      } else {
        this._stickyContainers.top.css("top", 0);
      }
      $grid.css("padding-top", this._stickyContainers.top.outerHeight());
      var bottomContainerY = $grid.outerHeight() + gridOffsetTop - (currentScrollTop + $(window).height());
      if (bottomContainerY > 0) {
        this._stickyContainers.bottom.css("bottom", bottomContainerY);
      } else {
        this._stickyContainers.bottom.css("bottom", 0);
      }
      $grid.css("padding-bottom", this._stickyContainers.bottom.outerHeight());
      var gridOffset = $grid.offset();
      var gridTableOffset = $gridTable.offset();
      if (verticalScroll) {
        var currentScrollLeft = $grid.scrollLeft();
        var currentScrollRight = $grid.scrollLeft() * -1;
        this._stickyContainers.top.css({"position":"fixed", "top":0, "left":gridOffset.left, "width":gridWidth});
        this._stickyContainers.top.children("table").css("margin-left", -currentScrollLeft);
        this._stickyContainers.bottom.css({"position":"fixed", "bottom":scrollBarHeight, "left":gridOffset.left, "width":gridWidth});
        this._stickyContainers.left.css("position", "absolute");
        this._stickyContainers.left.css("left", currentScrollLeft).css("top", $grid.css("padding-top"));
        this._stickyContainers.right.css("position", "absolute");
        this._stickyContainers.right.css("right", currentScrollRight).css("top", $grid.css("padding-top"));
        this._stickyContainers.topLeft.css("position", "absolute");
        this._stickyContainers.topRight.css("position", "absolute");
        this._stickyContainers.bottomLeft.css("position", "absolute");
        this._stickyContainers.bottomRight.css("position", "absolute");
        this._stickyContainers.topLeft.css("left", 0);
        this._stickyContainers.bottomLeft.css("left", 0);
        this._stickyContainers.topRight.css("right", 0);
        this._stickyContainers.bottomRight.css("right", 0);
        this._stickyContainers.bottomLeft.css("top", 0);
        this._stickyContainers.bottomRight.css("top", 0);
      } else {
        this._stickyContainers.top.css({"position":"", "left":"", "width":""});
        this._stickyContainers.top.children("table:first").css("margin-left", "");
        this._stickyContainers.bottom.css({"position":"", "left":"", "width":""});
        this._stickyContainers.left.css("position", "fixed");
        this._stickyContainers.left.css("left", gridOffset.left);
        this._stickyContainers.left.css("top", gridTableOffset.top - currentScrollTop);
        this._stickyContainers.right.css("position", "fixed");
        this._stickyContainers.right.css("right", $(document).width() - (gridOffset.left + $grid.width()));
        this._stickyContainers.right.css("top", gridTableOffset.top - currentScrollTop);
        this._stickyContainers.topLeft.css("position", "fixed");
        this._stickyContainers.topRight.css("position", "fixed");
        this._stickyContainers.bottomLeft.css("position", "fixed");
        this._stickyContainers.bottomRight.css("position", "fixed");
        this._stickyContainers.topLeft.css("left", gridOffset.left);
        this._stickyContainers.topRight.css("right", $(document).width() - (gridOffset.left + $grid.width()));
        this._stickyContainers.bottomLeft.css("left", gridOffset.left);
        this._stickyContainers.bottomRight.css("right", $(document).width() - (gridOffset.left + $grid.width()));
        this._stickyContainers.bottomLeft.css("top", $(window).height() - this._stickyContainers.bottom.height());
        this._stickyContainers.bottomRight.css("top", $(window).height() - this._stickyContainers.bottom.height());
      }
    }, _checkStickyRows:function() {
      var me = this;
      $.each(this._stickyItems.top, function(index) {
        var $sticky = this;
        var stickyOffsetTop = $sticky.offset().top;
        var currentScrollTop = $(document).scrollTop() + me._stickyContainers.top.outerHeight();
        if ($sticky.data("sticked") == true) {
          var $placeholder = $sticky.data("placeholder");
          var phOffsetTop = $placeholder.offset().top;
          if (currentScrollTop < phOffsetTop) {
            me.$grid.css("padding-top", "-=" + $sticky.outerHeight());
            me._unstickRowItem($sticky);
          }
        } else {
          if (stickyOffsetTop < currentScrollTop) {
            me._stickTop($sticky);
          }
        }
      });
      $.each(this._stickyItems.bottom, function(index) {
        var $sticky = this;
        var stickyOffsetTop = $sticky.offset().top + $sticky.outerHeight();
        var currentScrollBottom = $(document).scrollTop() + $(window).height() - me._stickyContainers.bottom.outerHeight();
        if ($sticky.data("sticked") == true) {
          var $placeholder = $sticky.data("placeholder");
          var phOffsetTop = $placeholder.offset().top;
          if (currentScrollBottom > phOffsetTop) {
            me.$grid.css("padding-bottom", "-=" + $sticky.outerHeight());
            me._unstickRowItem($sticky);
          }
        } else {
          if (stickyOffsetTop > currentScrollBottom) {
            me._stickBottom($sticky);
          }
        }
      });
    }, _checkStickyCols:function() {
      var me = this;
      $.each(this._stickyItems.left, function(index) {
        var $sticky = this;
        var stickyOffsetLeft = $sticky.first().offset().left;
        var currentScrollLeft = me._stickyContainers.left.offset().left + me._stickyContainers.left.width();
        if ($sticky.data("sticked") == true) {
          var $placeholder = $sticky.first().data("placeholder");
          var phOffsetLeft = $placeholder.offset().left + $placeholder.outerWidth();
          if (phOffsetLeft >= currentScrollLeft) {
            me._unstickColItem($sticky);
          }
        } else {
          if (currentScrollLeft > stickyOffsetLeft) {
            me._stickLeft($sticky);
          }
        }
      });
      $.each(this._stickyItems.right, function(index) {
        var $sticky = this;
        var currentRightPoint = me.$grid.width() + me.$grid.offset().left - me._stickyContainers.right.width();
        if ($sticky.data("sticked") == true) {
          var $placeholder = $sticky.first().data("placeholder");
          var phOffsetLeft = $placeholder.offset().left;
          if (currentRightPoint >= phOffsetLeft) {
            me._unstickColItem($sticky);
          }
        } else {
          var stickyOffsetLeft = $sticky.first().offset().left + $sticky.first().outerWidth();
          if (currentRightPoint < stickyOffsetLeft) {
            me._stickRight($sticky);
          }
        }
      });
    }, _updateCellsHeight:function() {
      var me = this;
      me.$gridTable.find("tr").each(function(index) {
        if ($(this).children().size() == 0) {
          return;
        }
        var h = $(this).outerHeight();
        var leftTable = me._stickyContainers.left.find("tr").eq(index).children("th, td");
        var rightTable = me._stickyContainers.right.find("tr").eq(index).children("th, td");
        leftTable.height(h);
        rightTable.height(h);
        $(this).children("th, td").height(h);
      });
      me._stickyContainers.top.find("table:first tr").each(function(index) {
        if ($(this).children().size() == 0) {
          return;
        }
        var h = $(this).outerHeight();
        var leftTable = me._stickyContainers.topLeft.find("tr").eq(index).children("th, td");
        var rightTable = me._stickyContainers.topRight.find("tr").eq(index).children("th, td");
        leftTable.height(h);
        rightTable.height(h);
        $(this).children("th, td").height(h);
      });
      me._stickyContainers.bottom.find("table:first tr").each(function(index) {
        if ($(this).children().size() == 0) {
          return;
        }
        var h = $(this).outerHeight();
        var leftTable = me._stickyContainers.bottomLeft.find("tr").eq(index).children("th, td");
        var rightTable = me._stickyContainers.bottomRight.find("tr").eq(index).children("th, td");
        leftTable.height(h);
        rightTable.height(h);
        $(this).children("th, td").height(h);
      });
    }, _stickTop:function($sticky) {
      var parentNodeName = $sticky.parent()[0].nodeName;
      var $placeholder = $("<tr></tr>");
      $sticky.data("placeholder", $placeholder);
      $sticky.after($placeholder);
      this.$grid.css("padding-top", "+=" + $sticky.outerHeight());
      this._stickyContainers.top.find("table:first").find(parentNodeName).append($sticky);
      var phIndex = $placeholder.closest("table").find("tr").index($placeholder);
      var $leftItems = this._stickyContainers.left.find("tr").eq(phIndex).children();
      this._stickyContainers.topLeft.find("tr").eq(phIndex).append($leftItems);
      var $rightItems = this._stickyContainers.right.find("tr").eq(phIndex).children();
      this._stickyContainers.topRight.find("tr").eq(phIndex).append($rightItems);
      $sticky.data("sticked", true);
    }, _stickBottom:function($sticky) {
      var parentNodeName = $sticky.parent()[0].nodeName;
      var $placeholder = $("<tr></tr>");
      $sticky.data("placeholder", $placeholder);
      $sticky.after($placeholder);
      this.$grid.css("padding-bottom", "+=" + $sticky.outerHeight());
      this._stickyContainers.bottom.find("table:first").find(parentNodeName).prepend($sticky);
      var phIndex = $placeholder.closest("table").find("tr").index($placeholder);
      var $leftItems = this._stickyContainers.left.find("tr").eq(phIndex).children();
      this._stickyContainers.bottomLeft.find("tr").eq(phIndex).append($leftItems);
      var $rightItems = this._stickyContainers.right.find("tr").eq(phIndex).children();
      this._stickyContainers.bottomRight.find("tr").eq(phIndex).append($rightItems);
      $sticky.data("sticked", true);
    }, _unstickRowItem:function($sticky) {
      var $placeholder = $sticky.data("placeholder");
      var phIndex = $placeholder.closest("table").find("tr").index($placeholder);
      $placeholder.after($sticky);
      $placeholder.remove();
      var $topLeftItems = this._stickyContainers.topLeft.find("tr").eq(phIndex).children();
      var $botLeftItems = this._stickyContainers.bottomLeft.find("tr").eq(phIndex).children();
      this._stickyContainers.left.find("tr").eq(phIndex).append($topLeftItems);
      this._stickyContainers.left.find("tr").eq(phIndex).append($botLeftItems);
      var $topRightItems = this._stickyContainers.topRight.find("tr").eq(phIndex).children();
      var $botRightItems = this._stickyContainers.bottomRight.find("tr").eq(phIndex).children();
      this._stickyContainers.right.find("tr").eq(phIndex).append($topRightItems);
      this._stickyContainers.right.find("tr").eq(phIndex).append($botRightItems);
      $sticky.removeData("placeholder");
      $sticky.data("sticked", false);
      this._updateStickyContainers(true);
    }, _stickLeft:function($sticky) {
      var me = this;
      var $col = me.$gridTable.find("col").eq($sticky.first().index());
      me._stickyContainers.left.find("colgroup").append($col.clone());
      me._stickyContainers.topLeft.find("colgroup").append($col.clone());
      me._stickyContainers.bottomLeft.find("colgroup").append($col.clone());
      $sticky.each(function(index) {
        var $placeholder = $("<td></td>");
        $(this).data("placeholder", $placeholder);
        $(this).after($placeholder);
        if ($(this).closest(me._stickyContainers.top).size() != 0) {
          me._stickyContainers.topLeft.find("tr").eq(index).append($(this));
        } else {
          if ($(this).closest(me._stickyContainers.bottom).size() != 0) {
            me._stickyContainers.bottomLeft.find("tr").eq(index).append($(this));
          } else {
            me._stickyContainers.left.find("tr").eq(index).append($(this));
          }
        }
      });
      this._updateCellsHeight();
      $sticky.data("sticked", true);
      console.log("sticked left");
    }, _stickRight:function($sticky) {
      var me = this;
      var $col = me.$gridTable.find("col").eq($sticky.first().index());
      me._stickyContainers.right.find("colgroup").prepend($col.clone());
      me._stickyContainers.topRight.find("colgroup").prepend($col.clone());
      me._stickyContainers.bottomRight.find("colgroup").prepend($col.clone());
      $sticky.each(function(index) {
        var $placeholder = $("<td></td>");
        $(this).data("placeholder", $placeholder);
        $(this).after($placeholder);
        if ($(this).closest(me._stickyContainers.top).size() != 0) {
          me._stickyContainers.topRight.find("tr").eq(index).prepend($(this));
        } else {
          if ($(this).closest(me._stickyContainers.bottom).size() != 0) {
            me._stickyContainers.bottomRight.find("tr").eq(index).prepend($(this));
          } else {
            me._stickyContainers.right.find("tr").eq(index).prepend($(this));
          }
        }
      });
      this._updateCellsHeight();
      $sticky.data("sticked", true);
    }, _unstickColItem:function($sticky) {
      if ($.inArray($sticky, this._stickyItems.left) != -1) {
        this._stickyContainers.left.find("colgroup col:last").remove();
        this._stickyContainers.topLeft.find("colgroup col:last").remove();
        this._stickyContainers.bottomLeft.find("colgroup col:last").remove();
      } else {
        if ($.inArray($sticky, this._stickyItems.right) != -1) {
          this._stickyContainers.right.find("colgroup col:first").remove();
          this._stickyContainers.topRight.find("colgroup col:first").remove();
          this._stickyContainers.bottomRight.find("colgroup col:first").remove();
        }
      }
      $sticky.each(function() {
        var $placeholder = $(this).data("placeholder");
        $placeholder.after($(this));
        $placeholder.remove();
        $(this).removeData("placeholder");
      });
      this._updateCellsHeight();
      $sticky.data("sticked", false);
    }, _onMouseOverRow:function(e) {
      var $target = $(e.currentTarget), $tr = $target.closest("tr"), $trs = this._getTrsByTr($tr);
      if (event.type == "mouseleave") {
        $trs.removeClass("ui-state-hover");
      } else {
        $trs.siblings("tr.even, tr.odd").removeClass("ui-state-hover").end().addClass("ui-state-hover");
      }
    }, _onClick_showActionMenu:function(e) {
      var tr = e.currentTarget, $tr = $(tr), rowIndex = $tr.data("hm-grid-row-id"), $menu;
      $tr = this._rowList[rowIndex].$actionsTr;
      tr = $tr[0];
      if (this._currentActionMenu) {
        var curMenu = this._currentActionMenu;
        curMenu.$menu.hide();
        $tr.find("> td.grid-actions").append(curMenu.$menu);
        this._currentActionMenu = false;
        this._getTrsByTr(curMenu.$tr).removeClass("ui-state-selected ui-state-selected-even ui-state-selected-odd");
        if (curMenu.$tr[0] === tr) {
          return;
        }
      }
      var $target = $(e.target);
      if (!$target.is("td")) {
        return;
      }
      $menu = $tr.find("> td.grid-actions > .grid-row-actions");
      if (!$menu.length) {
        return;
      }
      this._getTrsByTr($tr).addClass("ui-state-selected " + ($tr.is(".even") ? "ui-state-selected-even" : "ui-state-selected-odd"));
      $menu.appendTo("body").show().position({my:"right top", at:"right bottom", offset:"-2 -1", of:$tr, collision:"none"});
      this._currentActionMenu = {$menu:$menu, $tr:$tr};
    }, _calcBrowserSize:function() {
      this._browserWidth = $(document.body).width();
      this._browserHeight = $(document.body).height();
    }, _calcScrollBarWidth:function() {
      var $elScrollCalc = $(document.createElement("div"));
      $elScrollCalc.css({width:0, height:0, overflow:"scroll", visibility:"hidden", position:"absolute"});
      $(document.body).append($elScrollCalc);
      this._scrollBarWidth = $elScrollCalc[0].offsetWidth - $elScrollCalc[0].clientWidth;
      $elScrollCalc.remove();
    }, _calcColumnWidth:function() {
      var cols = this.cols, fullWidth = 0, autoCount = 0;
      for (var i = 0;i < cols.length;i++) {
        var col = cols[i];
        if (col.width !== "auto") {
          fullWidth += col.width - 0;
        } else {
          autoCount++;
        }
      }
      if (!autoCount) {
        return;
      }
      var autoWidth = (this.getScrollPlaceWidth() - fullWidth) / autoCount;
      for (var i = 0;i < cols.length;i++) {
        var col = cols[i];
        if (col.width === "auto") {
          col.calcWidth = autoWidth;
        } else {
          col.calcWidth = col.width;
        }
      }
    }, getScrollPlaceWidth:function() {
      var availableSpace = this._$cont.width() - this._scrollBarWidth - this.actionsWidth - this.checkBoxesWidth + 0;
      if (availableSpace > this.width) {
        return availableSpace;
      }
      return this.width;
    }, patchGrid:function() {
      this.fixScrollBar();
      this.populateTable();
      this._$elScrollableHeader = this._$cont.find(".hm-grid-header-col-other");
      this._$elScrollable = this._$cont.find(".hm-grid-body-scrollable");
      this._$elScrollableContainer = this._$cont.find(".hm-grid-body-scrollable-container");
      this._$elCheckBoxesCol = this._$cont.find(".hm-grid-body-col-checkboxes");
      this._$elActionsCol = this._$cont.find(".hm-grid-body-col-actions");
      var me = this, updateRowHeightBinded = _.bind(this.updateRowHeight, this);
      function updateHeight() {
        setTimeout(updateRowHeightBinded, 0);
      }
      this._$elScrollable.on("scroll", _.bind(this._onScroll, this));
      this._$elScrollable.on("mousewheel", _.bind(this._onMouseWheel, this));
      this._$elScrollable.on("click", updateHeight);
      this._$elScrollable.on("mouseup", updateHeight);
      this._$elScrollable.on("mousedown", updateHeight);
    }, _onMouseWheel:function(e) {
      var originalEvent = e.originalEvent, wheelDelta = originalEvent.wheelDelta;
      if (!wheelDelta) {
        return;
      }
      var scrollTop = this._$elScrollable.scrollTop();
      if (scrollTop === 0 && wheelDelta > 0) {
        e.preventDefault();
      }
      if (this._$elScrollableContainer.height() - this._$elScrollable.height() + this._scrollBarWidth - scrollTop === 0 && wheelDelta < 0) {
        e.preventDefault();
      }
      console.log(e);
      e.stopPropagation();
    }, _onScroll:function(e) {
      var scrollTop = this._$elScrollable.scrollTop(), scrollLeft = this._$elScrollable.scrollLeft();
      this._$elCheckBoxesCol.css({top:-scrollTop + "px"});
      this._$elActionsCol.css({top:-scrollTop + "px"});
      this._$elScrollableHeader.css({left:-scrollLeft + "px"});
    }, fixScrollBar:function() {
      var $cont = this._$cont, scrollBarWidth = this._scrollBarWidth;
      $cont.find(".hm-grid-header-col-empty").width(scrollBarWidth);
      $cont.find(".hm-grid-header-col-actions").css({right:scrollBarWidth + "px"});
      $cont.find(".hm-grid-header-scrollable").css({right:scrollBarWidth + this.actionsWidth + "px"});
      $cont.find(".hm-grid-body-col-actions-scrollable").css({right:scrollBarWidth + "px", bottom:scrollBarWidth + "px"});
      $cont.find(".hm-grid-body-col-checkboxes-scrollable").css({bottom:scrollBarWidth + "px"});
    }, _initColgroup:function($table) {
      var $colgroup = $(document.createElement("colgroup"));
      for (var i = 0;i < this.cols.length;i++) {
        var $col = $(document.createElement("col")), width = this.cols[i].calcWidth + "px";
        $col.css({width:width, minWidth:width, maxWidth:width});
        $colgroup.append($col);
      }
      $table.prepend($colgroup);
    }, populateTable:function() {
      var $grid = this.$grid, $gridTable = $grid.find("> table");
      var $header = $gridTable.find("> thead"), $footer = $gridTable.find("> tfoot"), $bodies = $gridTable.find("> tbody"), $filter, $body;
      if ($bodies.length === 2) {
        $filter = $($bodies[0]);
        $body = $($bodies[1]);
      } else {
        $filter = false;
        $body = $($bodies[0]);
      }
      this._$cont.find(".hm-grid-footer > table > tfoot > tr").append($footer.find("tr > td"));
      var headerElems = [], filterElems = [], $curElem = null;
      filterElems.push(this._$cont.find(".hm-grid-header-col-checkboxes > tbody > tr > td"));
      filterElems.push(this._$cont.find(".hm-grid-header-col-empty > tbody > tr > td"));
      $curElem = $header.find("tr > th.checkboxes.first-cell");
      headerElems.push($curElem);
      this._$cont.find(".hm-grid-header-col-checkboxes > thead > tr").append($curElem);
      $curElem = $filter.find("tr > td.checkboxes.first-cell");
      filterElems.push($curElem);
      this._$cont.find(".hm-grid-header-col-checkboxes > tbody > tr").append($curElem);
      $curElem = $header.find("tr > th.grid-actions.last-cell");
      headerElems.push($curElem);
      this._$cont.find(".hm-grid-header-col-actions > thead > tr").append($curElem);
      $curElem = $filter.find("tr > td.grid-actions.last-cell");
      filterElems.push($curElem);
      this._$cont.find(".hm-grid-header-col-actions > tbody > tr").append($curElem);
      $curElem = $header.find("tr > th");
      headerElems.push($curElem);
      var $table = this._$cont.find(".hm-grid-header-col-other");
      this._initColgroup($table);
      $table.find("> thead > tr").append($curElem);
      $curElem = $filter.find("tr > td");
      filterElems.push($curElem);
      this._$cont.find(".hm-grid-header-col-other > tbody > tr").append($curElem);
      this.doEqualHeight.apply(this, headerElems);
      this.doEqualHeight.apply(this, filterElems);
      this._$cont.find("> .hm-grid-header").height(this._$cont.find(".hm-grid-header-col-checkboxes").outerHeight());
      this._$cont.find(".hm-grid-body-scrollable-container").width(this.getScrollPlaceWidth());
      this._$cont.find(".hm-grid-header-col-other").width(this.getScrollPlaceWidth());
      var $checkBoxesBody = this._$cont.find(".hm-grid-body-col-checkboxes > tbody"), $actionsBody = this._$cont.find(".hm-grid-body-col-actions > tbody"), $otherTable = this._$cont.find(".hm-grid-body-col-other"), $otherBody = $otherTable.find("> tbody");
      this._initColgroup($otherTable);
      var $rows = $body.find("tr"), rowList = [];
      for (var i = 0;i < $rows.length;i++) {
        var $row = $($rows[i]), rowClasses = $row.prop("class"), $checkboxTd = $row.find("> .checkboxes.first-cell"), $actionsTd = $row.find("> .grid-actions.last-cell"), $newCheckBoxTr = $(document.createElement("tr")), $newActionsTr = $(document.createElement("tr"));
        $newCheckBoxTr.append($checkboxTd);
        $newCheckBoxTr.prop("class", rowClasses);
        $checkBoxesBody.append($newCheckBoxTr);
        $newCheckBoxTr.data("hm-grid-row-id", i);
        $newActionsTr.append($actionsTd);
        $newActionsTr.prop("class", rowClasses);
        $actionsBody.append($newActionsTr);
        $newActionsTr.data("hm-grid-row-id", i);
        $otherBody.append($row);
        $row.data("hm-grid-row-id", i);
        var $trListItem = $([$newCheckBoxTr[0], $newActionsTr[0], $row[0]]);
        rowList.push({$checkBoxTr:$newCheckBoxTr, $actionsTr:$newActionsTr, $dataTr:$row, $trs:$trListItem});
      }
      this._rowList = rowList;
      this.updateRowHeight();
      setTimeout(_.bind(this.updateRowHeight, this));
    }, _getTrsByTr:function($tr) {
      var index = $tr.data("hm-grid-row-id"), rowListItem = this._rowList[index];
      if (!rowListItem) {
        return $([]);
      }
      return rowListItem.$trs;
    }, updateRowHeight:function() {
      var $rows = this._$cont.find(".hm-grid-body-col-other > tbody > tr"), $checkBoxRows = this._$cont.find(".hm-grid-body-col-checkboxes > tbody > tr"), $actionsRows = this._$cont.find(".hm-grid-body-col-actions > tbody > tr");
      for (var i = 0;i < $rows.length;i++) {
        var $row = $($rows[i]);
        this.setOuterHeight($($checkBoxRows[i]), $row.outerHeight());
        this.setOuterHeight($($actionsRows[i]), $row.outerHeight());
      }
    }, setOuterHeight:function($el, outerHeight) {
      var elemOuterHeight, elemHeight;
      for (var j = 0;j < $el.length;j++) {
        elemOuterHeight = $($el[j]).outerHeight();
        elemHeight = $($el[j]).height();
        $($el[j]).height(elemHeight + outerHeight - elemOuterHeight);
      }
    }, doEqualHeight:function() {
      var elems = arguments, height = 0, elemHeight = 0, elemOuterHeight = 0;
      for (var i = 0;i < elems.length;i++) {
        for (var j = 0;j < elems[i].length;j++) {
          elemOuterHeight = $(elems[i][j]).outerHeight();
          if (elemOuterHeight > height) {
            height = elemOuterHeight;
          }
        }
      }
      for (var i = 0;i < elems.length;i++) {
        this.setOuterHeight($(elems[i]), height);
      }
    }, initTable:function() {
      this._$cont = $(['<div class="hm-grid">', '<div class="hm-grid-header">', '<table class="hm-grid-header-col-checkboxes">', "<thead><tr></tr></thead>", '<tbody><tr class="filters_tr"></tr></tbody>', "</table>", '<div class="hm-grid-header-scrollable">', '<table class="hm-grid-header-col-other">', "<thead><tr></tr></thead>", '<tbody><tr class="filters_tr"></tr></tbody>', "</table>", "</div>", '<table class="hm-grid-header-col-actions">', "<thead><tr></tr></thead>", '<tbody><tr class="filters_tr"></tr></tbody>', 
      "</table>", '<table class="hm-grid-header-col-empty">', "<thead><tr><th></th></tr></thead>", '<tbody><tr class="filters_tr"><td></td></tr></tbody>', "</table>", "</div>", '<div class="hm-grid-body">', '<div class="hm-grid-body-col-checkboxes-scrollable">', '<table class="hm-grid-body-col-checkboxes">', "<tbody></tbody>", "</table>", "</div>", '<div class="hm-grid-body-scrollable">', '<div class="hm-grid-body-scrollable-container">', '<table class="hm-grid-body-col-other">', "<tbody></tbody>", 
      "</table>", "</div>", "</div>", '<div class="hm-grid-body-col-actions-scrollable">', '<table class="hm-grid-body-col-actions">', "<tbody></tbody>", "</table>", "</div>", "</div>", '<div class="hm-grid-footer">', "<table>", "<tfoot><tr></tr></tfoot>", "</table>", "</div>", "</div>"].join(""));
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.CellsCollection", {config:{grid:null, index:null}, __construct:function() {
      this._cells = [];
    }, addCell:function(cell) {
      this._cells.push(cell);
    }, getCells:function() {
      return this._cells;
    }, stickySide:function(side) {
      if (side !== undefined) {
        this._stickySide = side;
      }
      if (!this._stickySide) {
        return false;
      }
      return this._stickySide;
    }, stickyOffset:function(offset) {
      if (offset !== undefined) {
        this._stickyOffset = offset;
      }
      if (!this._stickyOffset) {
        return 0;
      }
      return this._stickyOffset;
    }, setCellsStick:function(side, value) {
      var cells = this.getCells();
      for (var i = 0, ln = cells.length;i < ln;i++) {
        var cell = cells[i];
        cell.stick(side, value);
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.Col", {extend:"hm.core.ui.grid.element.CellsCollection", config:{}, getOffset:function(update) {
      var cell = this.getCells()[0], cellOffset = cell.getOffset(update), cellWidth = cell.getOuterWidth(update);
      return{left:cellOffset.left, right:cellOffset.left + cellWidth};
    }, getWidth:function(update) {
      var offset = this.getOffset(update);
      return offset.right - offset.left;
    }, fixWidth:function() {
      var cells = this.getCells();
      if (cells.length == 0) {
        return;
      }
      var width = this.getWidth();
      for (var i = 0, ln = cells.length;i < ln;i++) {
        cells[i].fixWidth(width);
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.Row", {extend:"hm.core.ui.grid.element.CellsCollection", config:{}, getOffset:function(update) {
      var cell = this.getCells()[0], cellOffset = cell.getOffset(update), cellHeight = cell.getOuterHeight(update);
      return{top:cellOffset.top, bottom:cellOffset.top + cellHeight};
    }, getHeight:function(update) {
      var offset = this.getOffset(update);
      return offset.bottom - offset.top;
    }, fixHeight:function(update) {
      var cells = this.getCells();
      if (cells.length == 0) {
        return;
      }
      var height = this.getHeight(update);
      for (var i = 0, ln = cells.length;i < ln;i++) {
        cells[i].fixHeight(height);
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.StickyContainer", {config:{grid:null}, __construct:function() {
      var config = this.config, grid = config.grid;
      var wrapper = this._wrapper = $('<div class="hm-grid-helper"></div>');
      var $table = this._$table = grid.getCleanTable();
      this._$tr = $table.find("tr");
      this._$thtd = $table.find("th, td");
      this._$contentWrapper = $table.find(".hm-grid-cell-content-wrapper");
      wrapper.append($table);
      wrapper.appendTo(grid.getEl());
      this._cells = [];
    }, freeRowHeight:function(rowIndex) {
      this._$tr.eq(rowIndex).find("th, td, .hm-grid-cell-content-wrapper").css("height", "");
    }, fixRowHeight:function(rowIndex, height) {
      this._$tr.eq(rowIndex).find("th, td").height(height);
    }, setScroll:function(value) {
      this._wrapper.scrollLeft(value);
    }, addCells:function(cells) {
      if (cells instanceof hm.core.ui.grid.element.Cell) {
        cells = [cells];
      }
      for (var i = 0, ln = cells.length;i < ln;i++) {
        var cell = cells[i], cellIndex = cell.getIndex();
        this._$contentWrapper.eq(cellIndex).append(cell.getContent());
        var thtd = this._$thtd.eq(cellIndex);
        thtd.show();
        cell.setTempContainer(thtd);
      }
    }, showCellContainer:function(cell) {
      this._$thtd.eq(cell.getIndex()).show();
    }, hideCellContainer:function(cell) {
      this._$thtd.eq(cell.getIndex()).hide();
    }, removeCells:function(cells) {
      if (cells instanceof hm.core.ui.grid.element.Cell) {
        cells = [cells];
      }
      for (var i = 0, ln = cells.length;i < ln;i++) {
        var cell = cells[i], cellIndex = cell.getIndex();
        this._$thtd.eq(cellIndex).hide();
        cell.appendToDefault();
      }
    }, setWidth:function(width) {
      if (!this._width || this._width != width) {
        this._width = width;
        this._wrapper.width(width);
      }
    }, setHeight:function(height) {
      if (!this._height || this._height != height) {
        this._height = height;
        this._wrapper.height(height);
      }
    }, setLeft:function(val) {
      if (!this._left || this._left != val) {
        this._left = val;
        this._wrapper.css("left", val);
      }
    }, setRight:function(val) {
      if (!this._right || this._right != val) {
        this._right = val;
        this._wrapper.css("right", val);
      }
    }, setTop:function(val) {
      if (!this._top || this._top != val) {
        this._top = val;
        this._wrapper.css("top", val);
      }
    }, hide:function() {
      if (this._isVisible === false) {
        return;
      }
      this._isVisible = false;
      this._wrapper.hide();
    }, show:function() {
      if (this._isVisible === true) {
        return;
      }
      this._isVisible = true;
      this._wrapper.show();
    }, update:function() {
      this._updatePosition();
    }, _updatePosition:function() {
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.sticky.LeftContainer", {extend:"hm.core.ui.grid.element.StickyContainer", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._wrapper.addClass("hm-grid-helper-left");
      this._$table.find("colgroup").remove();
    }, _updatePosition:function() {
      var grid = this.config.grid, gridOffset = grid.getOffset(), currentScrollLeft = grid.getCurrentScrollLeft();
      if (currentScrollLeft <= 0) {
        this.hide();
      } else {
        this.show();
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.sticky.RightContainer", {extend:"hm.core.ui.grid.element.StickyContainer", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._wrapper.addClass("hm-grid-helper-right");
      this._$table.find("colgroup").remove();
    }, _updatePosition:function() {
      var grid = this.config.grid, currentScrollLeft = grid.getCurrentScrollLeft(), maxScrollLeft = grid.getMaxScrollLeft();
      if (currentScrollLeft >= maxScrollLeft) {
        this.hide();
      } else {
        this.show();
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.sticky.TopContainer", {extend:"hm.core.ui.grid.element.StickyContainer", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._wrapper.addClass("hm-grid-helper-top");
    }, _updatePosition:function() {
      var grid = this.config.grid, gridOffset = grid.getOffset(), currentScrollTop = grid.getCurrentScrollTop();
      var delta = currentScrollTop - gridOffset.top;
      if (delta <= 0) {
        this.hide();
      } else {
        this.setWidth(grid.getWidth());
        this.setLeft(gridOffset.left);
        this.setTop(0);
        this.show();
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.sticky.TopLeftContainer", {extend:"hm.core.ui.grid.element.StickyContainer", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._wrapper.addClass("hm-grid-helper-top-left");
      this._$table.find("colgroup").remove();
    }, _updatePosition:function() {
      var grid = this.config.grid, gridOffset = grid.getOffset(), currentScrollLeft = grid.getCurrentScrollLeft(), currentScrollTop = grid.getCurrentScrollTop();
      var topDelta = currentScrollTop - gridOffset.top;
      if (currentScrollLeft <= 0 || topDelta <= 0) {
        this.hide();
      } else {
        this.setLeft(gridOffset.left);
        this.setTop(0);
        this.show();
      }
    }});
  })();
  (function() {
    HM.define("hm.core.ui.grid.element.sticky.TopRightContainer", {extend:"hm.core.ui.grid.element.StickyContainer", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._wrapper.addClass("hm-grid-helper-top-right");
      this._$table.find("colgroup").remove();
    }, _updatePosition:function() {
      var grid = this.config.grid, gridOffset = grid.getOffset(), currentScrollLeft = grid.getCurrentScrollLeft(), currentScrollTop = grid.getCurrentScrollTop(), maxScrollLeft = grid.getMaxScrollLeft();
      var topDelta = currentScrollTop - gridOffset.top;
      if (currentScrollLeft >= maxScrollLeft || topDelta <= 0) {
        this.hide();
      } else {
        var gridWidth = grid.getWidth(), documentWidth = grid.getDocumentWidth();
        this.setRight(documentWidth - gridOffset.left - gridWidth);
        this.setTop(0);
        this.show();
      }
    }});
  })();
  (function() {
    HM.define("hm.module.es.service.EventServiceService", {viewFullList:function() {
      location.href = hm.core.Url.getInstance().url({module:"es", controller:"list", action:"index"});
    }, markEventAsViewed:function(eventId, callBack) {
      $.ajax({url:hm.core.Url.getInstance().url({module:"es", controller:"events", action:"markasviewed", eventId:eventId}), async:true}).done(function(data) {
        callBack(data.success);
      });
    }});
  })();
})(window);

